/**
 * js事件总线处理 样例如下： Eventbus.bind('myEvent5', function(event,args,fn) {
 * alert('Publish Message 4th Times with args : ' + args); fn(args) }); function
 * pubshMsg(){ Eventbus.trigger("myEvent5",
 * ["hello",function(args){alert(args);}]); }
 */
Eventbus = {
  listeners : {
	  list : {},
	  add : function(event) {
	  if(!this.list[event]){
		this.list[event] =$(new Object);
	  }  	  
		return this.list[event]; 
	  },
	  remove : function(event) {
	   this.list[event] = null;
	  },
	   get : function(event) {
		return this.list[event];
	   }
	 },
	 bind : function(event, fn) {
	   this.listeners.add(event).bind(event, fn);
	 },
	 unbind : function(event) {
	   this.listeners.get(event).unbind(event);
	   this.listeners.remove[event]
	 },
	 trigger : function(event,args) {
	   this.listeners.get(event).trigger(event,args);
	 }
 };
/**
 * 修改parseInt方法，使其默认为10进制方式转化 用于处理传入字符串以0开头，作为8进制转换问题 --gengrong
 */
if(typeof nativeParseInt == 'undefined'){
	nativeParseInt = parseInt;
	parseInt = function(str,radix){
		if(!radix){
			radix = 10;
		}
		return nativeParseInt(str,radix);
	}
}

/**
 * jQuery JSON plugin 2.4.0
 * 
 * @author Brantley Harris, 2009-2011
 * @author Timo Tijhof, 2011-2012
 * @source This plugin is heavily influenced by MochiKit's serializeJSON, which
 *         is copyrighted 2005 by Bob Ippolito.
 * @source Brantley Harris wrote this plugin. It is based somewhat on the
 *         JSON.org website's http://www.json.org/json2.js, which proclaims: "NO
 *         WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.", a sentiment
 *         that I uphold.
 * @license MIT License <http://www.opensource.org/licenses/mit-license.php>
 */
(function ($) {
	'use strict';

	var escape = /["\\\x00-\x1f\x7f-\x9f]/g,
		meta = {
			'\b': '\\b',
			'\t': '\\t',
			'\n': '\\n',
			'\f': '\\f',
			'\r': '\\r',
			'"' : '\\"',
			'\\': '\\\\'
		},
		hasOwn = Object.prototype.hasOwnProperty;

	/**
	 * jQuery.toJSON Converts the given argument into a JSON representation.
	 * 
	 * @param o
	 *            {Mixed} The json-serializable *thing* to be converted
	 * 
	 * If an object has a toJSON prototype, that will be used to get the
	 * representation. Non-integer/string keys are skipped in the object, as are
	 * keys that point to a function.
	 * 
	 */
	$.toJSON = typeof JSON === 'object' && JSON.stringify ? JSON.stringify : function (o) {
		if (o === null) {
			return 'null';
		}

		var pairs, k, name, val,
			type = $.type(o);

		if (type === 'undefined') {
			return undefined;
		}

		// Also covers instantiated Number and Boolean objects,
		// which are typeof 'object' but thanks to $.type, we
		// catch them here. I don't know whether it is right
		// or wrong that instantiated primitives are not
		// exported to JSON as an {"object":..}.
		// We choose this path because that's what the browsers did.
		if (type === 'number' || type === 'boolean') {
			return String(o);
		}
		if (type === 'string') {
			return $.quoteString(o);
		}
		if (typeof o.toJSON === 'function') {
			return $.toJSON(o.toJSON());
		}
		if (type === 'date') {
			var month = o.getUTCMonth() + 1,
				day = o.getUTCDate(),
				year = o.getUTCFullYear(),
				hours = o.getUTCHours(),
				minutes = o.getUTCMinutes(),
				seconds = o.getUTCSeconds(),
				milli = o.getUTCMilliseconds();

			if (month < 10) {
				month = '0' + month;
			}
			if (day < 10) {
				day = '0' + day;
			}
			if (hours < 10) {
				hours = '0' + hours;
			}
			if (minutes < 10) {
				minutes = '0' + minutes;
			}
			if (seconds < 10) {
				seconds = '0' + seconds;
			}
			if (milli < 100) {
				milli = '0' + milli;
			}
			if (milli < 10) {
				milli = '0' + milli;
			}
			return '"' + year + '-' + month + '-' + day + 'T' +
				hours + ':' + minutes + ':' + seconds +
				'.' + milli + 'Z"';
		}

		pairs = [];

		if ($.isArray(o)) {
			for (k = 0; k < o.length; k++) {
				pairs.push($.toJSON(o[k]) || 'null');
			}
			return '[' + pairs.join(',') + ']';
		}

		// Any other object (plain object, RegExp, ..)
		// Need to do typeof instead of $.type, because we also
		// want to catch non-plain objects.
		if (typeof o === 'object') {
			for (k in o) {
				// Only include own properties,
				// Filter out inherited prototypes
				if (hasOwn.call(o, k)) {
					// Keys must be numerical or string. Skip others
					type = typeof k;
					if (type === 'number') {
						name = '"' + k + '"';
					} else if (type === 'string') {
						name = $.quoteString(k);
					} else {
						continue;
					}
					type = typeof o[k];

					// Invalid values like these return undefined
					// from toJSON, however those object members
					// shouldn't be included in the JSON string at all.
					if (type !== 'function' && type !== 'undefined') {
						val = $.toJSON(o[k]);
						pairs.push(name + ':' + val);
					}
				}
			}
			return '{' + pairs.join(',') + '}';
		}
	};

	/**
	 * jQuery.evalJSON Evaluates a given json string.
	 * 
	 * @param str
	 *            {String}
	 */
	$.evalJSON = typeof JSON === 'object' && JSON.parse ? JSON.parse : function (str) {
		/* jshint evil: true */
		return eval('(' + str + ')');
	};

	/**
	 * jQuery.secureEvalJSON Evals JSON in a way that is *more* secure.
	 * 
	 * @param str
	 *            {String}
	 */
	$.secureEvalJSON = typeof JSON === 'object' && JSON.parse ? JSON.parse : function (str) {
		var filtered =
			str
			.replace(/\\["\\\/bfnrtu]/g, '@')
			.replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']')
			.replace(/(?:^|:|,)(?:\s*\[)+/g, '');

		if (/^[\],:{}\s]*$/.test(filtered)) {
			/* jshint evil: true */
			return eval('(' + str + ')');
		}
		throw new SyntaxError('Error parsing JSON, source is not valid.');
	};

	/**
	 * jQuery.quoteString Returns a string-repr of a string, escaping quotes
	 * intelligently. Mostly a support function for toJSON. Examples: >>>
	 * jQuery.quoteString('apple') "apple"
	 * 
	 * >>> jQuery.quoteString('"Where are we going?", she asked.') "\"Where are
	 * we going?\", she asked."
	 */
	$.quoteString = function (str) {
		if (str.match(escape)) {
			return '"' + str.replace(escape, function (a) {
				var c = meta[a];
				if (typeof c === 'string') {
					return c;
				}
				c = a.charCodeAt();
				return '\\u00' + Math.floor(c / 16).toString(16) + (c % 16).toString(16);
			}) + '"';
		}
		return '"' + str + '"';
	};

}(jQuery));


/**
 * parser - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php
 * 
 */
(function($) {
	$.parser = {
		auto : true,
		onComplete : function(context) {
		},
		plugins : [ 'draggable', 'droppable', 'resizable', 'pagination',
				'tooltip', 'linkbutton', 'menu', 'menubutton', 'splitbutton',
				'progressbar', 'tree', 'combobox', 'combotree', 'combogrid',
				'numberbox', 'validatebox', 'searchbox', 'numberspinner',
				'timespinner', 'calendar', 'datebox', 'datetimebox', 'slider',
				'layout', 'panel', 'datagrid', 'propertygrid', 'treegrid',
				'tabs', 'wizardtabs', 'accordion', 'window', 'dialog', 'commonselect','upload', 
				'editor', 'mueditor','userselect', 'exportbutton','importbutton' ,'checkbox',
				'radio','treegriddialog','griddialog','advanceupload','ntkoeditor','chart','report','echart','checkbox2'],
		parse : function(context) {
			var aa = [];
			for ( var i = 0; i < $.parser.plugins.length; i++) {
				var name = $.parser.plugins[i];
				var r = $('[data-roles="mui-' + name + '"]', context);
				if (r.length) {
					
					render = (function(n,r1){
						return function (){
							r1[n]();
						}
					})(name,r);
					
					if(r[name]){
						if(r[name].finish === false){
							r[name].loading(render);
						}else{
							render();
						}
					}else{
						aa.push({
							name : name,
							jq : r
						});;
					}
				}
			}
			if (aa.length && window.muiloader) {
				var names = [];
				for ( var i = 0; i < aa.length; i++) {
					names.push(aa[i].name);
				}
				muiloader.load(names, function() {
					for ( var i = 0; i < aa.length; i++) {
						var name = aa[i].name;
						var jq = aa[i].jq;
						jq[name]();
					}
					$.parser.onComplete.call($.parser, context);
				});
			} else {
				$.parser.onComplete.call($.parser, context);
			}
		},

		/**
		 * parse options, including standard 'data-options' attribute.
		 * 
		 * calling examples: $.parser.parseOptions(target);
		 * $.parser.parseOptions(target,
		 * ['id','title','width',{fit:'boolean',border:'boolean'},{min:'number'}]);
		 */
		parseOptions : function(target, properties) {
			var t = $(target);
			var options = {};

			var s = $.trim(t.attr('data-options'));
			if (s) {
				// var first = s.substring(0,1);
				// var last = s.substring(s.length-1,1);
				// if (first != '{') s = '{' + s;
				// if (last != '}') s = s + '}';
				if (s.substring(0, 1) != '{') {
					s = '{' + s + '}';
				}
				options = (new Function('return ' + s))();
			}

			if (properties) {
				var opts = {};
				for ( var i = 0; i < properties.length; i++) {
					var pp = properties[i];
					if (typeof pp == 'string') {
						if (pp == 'width' || pp == 'height' || pp == 'left'
								|| pp == 'top') {
								opts[pp] = parseInt(target.style[pp]) || undefined;
						} else {
							opts[pp] = t.attr(pp);
						}
					} else {
						for ( var name in pp) {
							var type = pp[name];
							if (type == 'boolean') {
								opts[name] = t.attr(name) ? (t.attr(name) == 'true')
										: undefined;
							} else if (type == 'number') {

								if(t[0].attributes[name]){
										if(t[0].attributes[name].specified){
											opts[name] =  t.attr(name) == '0' ? 0
													: parseFloat(t.attr(name)) || undefined;
										}
								}else{
									opts[name] =  t.attr(name) == '0' ? 0
											: parseFloat(t.attr(name)) || undefined;
								}
							}
						}
					}
				}
				$.extend(options, opts);
			}
			return options;
		}
	};
	$(function() {
		var d = $(
				'<div style="position:absolute;top:-1000px;width:100px;height:100px;padding:5px"></div>')
				.appendTo('body');
		$._boxModel = parseInt(d.width()) == 100;
		d.remove();

		if (!window.muiloader && $.parser.auto) {
			$.parser.parse();
		}
	});

	/**
	 * extend plugin to set box model width
	 */
	$.fn._outerWidth = function(width) {
		if (width == undefined) {
			if (this[0] == window) {
				return this.width() || document.body.clientWidth;
			}
			return this.outerWidth() || 0;
		}
		return this
				.each(function() {
					if ($._boxModel) {
						$(this).width(
								width
										- ($(this).outerWidth() - $(this)
												.width()));
					} else {
						$(this).width(width);
					}
				});
	};

	/**
	 * extend plugin to set box model height
	 */
	$.fn._outerHeight = function(height) {
		if (height == undefined) {
			if (this[0] == window) {
				return this.height() || document.body.clientHeight;
			}
			return this.outerHeight() || 0;
		}
		return this.each(function() {
			if ($._boxModel) {
				$(this).height(
						height - ($(this).outerHeight() - $(this).height()));
			} else {
				$(this).height(height);
			}
		});
	};

	$.fn._scrollLeft = function(left) {
		if (left == undefined) {
			return this.scrollLeft();
		} else {
			return this.each(function() {
				$(this).scrollLeft(left)
			});
		}
	}

	$.fn._propAttr = $.fn.prop || $.fn.attr;

	/**
	 * set or unset the fit property of parent container, return the width and
	 * height of parent container
	 */
	$.fn._fit = function(fit) {
		fit = fit == undefined ? true : fit;
		var t = this[0];
		var p = (t.tagName == 'BODY' ? t : this.parent()[0]);
		var fcount = p.fcount || 0;
		if (fit) {
			if (!t.fitted) {
				t.fitted = true;
				p.fcount = fcount + 1;
				$(p).addClass('panel-noscroll');
				if (p.tagName == 'BODY') {
					$('html').addClass('panel-fit');
				}
			}
		} else {
			if (t.fitted) {
				t.fitted = false;
				p.fcount = fcount - 1;
				if (p.fcount == 0) {
					$(p).removeClass('panel-noscroll');
					if (p.tagName == 'BODY') {
						$('html').removeClass('panel-fit');
					}
				}
			}
		}
		return {
			width : $(p).width(),
			height : $(p).height()
		}
	}

})(jQuery);

/**
 * support for mobile devices
 */
(function($) {
	var longTouchTimer = null;
	var dblTouchTimer = null;
	var isDblClick = false;

	function onTouchStart(e) {
		if (e.touches.length != 1) {
			return
		}
		if (!isDblClick) {
			isDblClick = true;
			dblClickTimer = setTimeout(function() {
				isDblClick = false;
			}, 500);
		} else {
			clearTimeout(dblClickTimer);
			isDblClick = false;
			fire(e, 'dblclick');
			// e.preventDefault();
		}
		longTouchTimer = setTimeout(function() {
			fire(e, 'contextmenu', 3);
		}, 1000);
		fire(e, 'mousedown');
		if ($.fn.draggable.isDragging || $.fn.resizable.isResizing) {
			e.preventDefault();
		}
	}
	function onTouchMove(e) {
		if (e.touches.length != 1) {
			return
		}
		if (longTouchTimer) {
			clearTimeout(longTouchTimer);
		}
		fire(e, 'mousemove');
		if ($.fn.draggable.isDragging || $.fn.resizable.isResizing) {
			e.preventDefault();
		}
	}
	function onTouchEnd(e) {
		// if (e.touches.length > 0){return}
		if (longTouchTimer) {
			clearTimeout(longTouchTimer);
		}
		fire(e, 'mouseup');
		if ($.fn.draggable.isDragging || $.fn.resizable.isResizing) {
			e.preventDefault();
		}
	}

	function fire(e, name, which) {
		var event = new $.Event(name);
		event.pageX = e.changedTouches[0].pageX;
		event.pageY = e.changedTouches[0].pageY;
		event.which = which || 1;
		$(e.target).trigger(event);
	}

	if (document.addEventListener) {
		document.addEventListener("touchstart", onTouchStart, true);
		document.addEventListener("touchmove", onTouchMove, true);
		document.addEventListener("touchend", onTouchEnd, true);
	}
})(jQuery);

/**
 * 当window窗口改变时候，修改其中被设置为百分比的下拉框，日期框等
 */
(function($){
	$(window).bind('resize',function(){
		$(window.document).find('.combo-f').each(function(index){
			try{
				var opts = $.data(this, 'combo').options;
				if(opts.percentWidth&&opts.percentWidth!=''){
					var t = $(this);
					var combo = $.data(this,'combo').combo;
					combo.hide();
					t.show().css('width',opts.percentWidth);
					var width = t.width();
					t.hide();
					combo.show().width(width);
					combo.find('input:first').width(width-21);
					//如果下拉面板打开，则调整下拉面板的大小
					var panel = $.data(this, 'combo').panel;
					if ($.fn.window){
						if(panel.is('ul')){
							panel  = panel.parent();
						}
					}
					if(!panel.panel('options').closed){
						panel.panel('resize',{width:(opts.panelWidth ? opts.panelWidth : combo.outerWidth())})
					}
				}
			} catch(err){}
		})
		
			$(window.document).find('.spinner-f').each(function(index){
				try {
					var opts = $.data(this, 'spinner').options; 
					if(opts.percentWidth&&opts.percentWidth!=''){
						$(this).spinner('resize',opts.percentWidth);
					}
				} catch(err){}
		});
	})
})(jQuery);
/**
 * draggable - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php
 */
(function($){
// var isDragging = false;
	function drag(e){
		var state = $.data(e.data.target, 'draggable');
		var opts = state.options;
		var proxy = state.proxy;
		
		var dragData = e.data;
		var left = dragData.startLeft + e.pageX - dragData.startX;
		var top = dragData.startTop + e.pageY - dragData.startY;
		
		if (proxy){
			if (proxy.parent()[0] == document.body){
				if (opts.deltaX != null && opts.deltaX != undefined){
					left = e.pageX + opts.deltaX;
				} else {
					left = e.pageX - e.data.offsetWidth;
				}
				if (opts.deltaY != null && opts.deltaY != undefined){
					top = e.pageY + opts.deltaY;
				} else {
					top = e.pageY - e.data.offsetHeight;
				}
			} else {
				if (opts.deltaX != null && opts.deltaX != undefined){
					left += e.data.offsetWidth + opts.deltaX;
				}
				if (opts.deltaY != null && opts.deltaY != undefined){
					top += e.data.offsetHeight + opts.deltaY;
				}
			}
		}
		
// if (opts.deltaX != null && opts.deltaX != undefined){
// left = e.pageX + opts.deltaX;
// }
// if (opts.deltaY != null && opts.deltaY != undefined){
// top = e.pageY + opts.deltaY;
// }
		
		if (e.data.parent != document.body) {
			left += $(e.data.parent).scrollLeft();
			top += $(e.data.parent).scrollTop();
		}
		
		if (opts.axis == 'h') {
			dragData.left = left;
		} else if (opts.axis == 'v') {
			dragData.top = top;
		} else {
			dragData.left = left;
			dragData.top = top;
		}
	}
	
	function applyDrag(e){
		var state = $.data(e.data.target, 'draggable');
		var opts = state.options;
		var proxy = state.proxy;
		if (!proxy){
			proxy = $(e.data.target);
		}
// if (proxy){
// proxy.css('cursor', opts.cursor);
// } else {
// proxy = $(e.data.target);
// $.data(e.data.target, 'draggable').handle.css('cursor', opts.cursor);
// }
		//2015-03-21 冯超，添加proxy.css('top')，如果e.data.top为0，取元素的top样式
		
		proxy.css({
			left:e.data.left,
			top:e.data.top
		});
		$('body').css('cursor', opts.cursor);
	}
	
	function doDown(e){
// isDragging = true;
		$.fn.draggable.isDragging = true;
		var state = $.data(e.data.target, 'draggable');
		var opts = state.options;
		var droppables = $('.droppable').filter(function(){
			return e.data.target != this;
		}).filter(function(){
				var accept = $.data(this, 'droppable').options.accept;
				if (accept){
					return $(accept).filter(function(){
						return this == e.data.target;
					}).length > 0;
				} else {
					return true;
				}
		});
		state.droppables = droppables;
		
		var proxy = state.proxy;
		if (!proxy){
			if (opts.proxy){
				if (opts.proxy == 'clone'){
					proxy = $(e.data.target).clone().insertAfter(e.data.target);
				} else {
					proxy = opts.proxy.call(e.data.target, e.data.target);
				}
				state.proxy = proxy;
			} else {
				proxy = $(e.data.target);
			}
		}
		
		proxy.css('position', 'absolute');
		drag(e);
		applyDrag(e);
		
		opts.onStartDrag.call(e.data.target, e);
		return false;
	}
	
	function doMove(e){
		var state = $.data(e.data.target, 'draggable');
		drag(e);
		if (state.options.onDrag.call(e.data.target, e) != false){
			applyDrag(e);
		}
		
		var source = e.data.target;
		state.droppables.each(function(){
			var dropObj = $(this);
			if (dropObj.droppable('options').disabled){return;}
			
			var p2 = dropObj.offset();
			if (e.pageX > p2.left && e.pageX < p2.left + dropObj.outerWidth()
					&& e.pageY > p2.top && e.pageY < p2.top + dropObj.outerHeight()){
				if (!this.entered){
					$(this).trigger('_dragenter', [source]);
					this.entered = true;
				}
				$(this).trigger('_dragover', [source]);
			} else {
				if (this.entered){
					$(this).trigger('_dragleave', [source]);
					this.entered = false;
				}
			}
		});
		
		return false;
	}
	
	function doUp(e){
// isDragging = false;
		$.fn.draggable.isDragging = false;
// drag(e);
		doMove(e);
		
		var state = $.data(e.data.target, 'draggable');
		var proxy = state.proxy;
		var opts = state.options;
		if (opts.revert){
			if (checkDrop() == true){
				$(e.data.target).css({
					position:e.data.startPosition,
					left:e.data.startLeft,
					top:e.data.startTop
				});
			} else {
				if (proxy){
					var left, top;
					if (proxy.parent()[0] == document.body){
						left = e.data.startX - e.data.offsetWidth;
						top = e.data.startY - e.data.offsetHeight;
					} else {
						left = e.data.startLeft;
						top = e.data.startTop;
					}
					proxy.animate({
						left: left,
						top: top
					}, function(){
						removeProxy();
					});
				} else {
					$(e.data.target).animate({
						left:e.data.startLeft,
						top:e.data.startTop
					}, function(){
						$(e.data.target).css('position', e.data.startPosition);
					});
				}
			}
		} else {
			$(e.data.target).css({
				position:'absolute',
				left:e.data.left,
				top:e.data.top
			});
			checkDrop();
		}
		
		opts.onStopDrag.call(e.data.target, e);
		
		$(document).unbind('.draggable');
		setTimeout(function(){
			$('body').css('cursor','');
		},100);
		
		function removeProxy(){
			if (proxy){
				proxy.remove();
			}
			state.proxy = null;
		}
		
		function checkDrop(){
			var dropped = false;
			state.droppables.each(function(){
				var dropObj = $(this);
				if (dropObj.droppable('options').disabled){return;}
				var p2 = dropObj.offset();
				if (e.pageX > p2.left && e.pageX < p2.left + dropObj.outerWidth()
						&& e.pageY > p2.top && e.pageY < p2.top + dropObj.outerHeight()){
					if (opts.revert){
						$(e.data.target).css({
							position:e.data.startPosition,
							left:e.data.startLeft,
							top:e.data.startTop
						});
					}
					$(this).trigger('_drop', [e.data.target]);
					removeProxy();
					dropped = true;
					this.entered = false;
					return false;
				}
			});
			if (!dropped && !opts.revert){
				removeProxy();
			}
			return dropped;
		}
		
		return false;
	}
	
	$.fn.draggable = function(options, param){
		if (typeof options == 'string'){
			return $.fn.draggable.methods[options](this, param);
		}
		
		return this.each(function(){
			var opts;
			var state = $.data(this, 'draggable');
			if (state) {
				state.handle.unbind('.draggable');
				opts = $.extend(state.options, options);
			} else {
				opts = $.extend({}, $.fn.draggable.defaults, $.fn.draggable.parseOptions(this), options || {});
			}
			var handle = opts.handle ? (typeof opts.handle=='string' ? $(opts.handle, this) : opts.handle) : $(this);
			
			$.data(this, 'draggable', {
				options: opts,
				handle: handle
			});
			
			if (opts.disabled) {
				$(this).css('cursor', '');
				return;
			}
			
			handle.unbind('.draggable').bind('mousemove.draggable', {target:this}, function(e){
// if (isDragging) return;
				if ($.fn.draggable.isDragging){return}
				var opts = $.data(e.data.target, 'draggable').options;
				if (checkArea(e)){
					$(this).css('cursor', opts.cursor);
				} else {
					$(this).css('cursor', '');
				}
			}).bind('mouseleave.draggable', {target:this}, function(e){
				$(this).css('cursor', '');
			}).bind('mousedown.draggable', {target:this}, function(e){
				if (checkArea(e) == false) return;
				$(this).css('cursor', '');

				var position = $(e.data.target).position();
				var offset = $(e.data.target).offset();
				var data = {
					startPosition: $(e.data.target).css('position'),
					startLeft: position.left,
					startTop: position.top,
					left: position.left,
					top: position.top,
					startX: e.pageX,
					startY: e.pageY,
					offsetWidth: (e.pageX - offset.left),
					offsetHeight: (e.pageY - offset.top),
					target: e.data.target,
					parent: $(e.data.target).parent()[0]
				};
				
				$.extend(e.data, data);
				var opts = $.data(e.data.target, 'draggable').options;
				if (opts.onBeforeDrag.call(e.data.target, e) == false) return;
				
				$(document).bind('mousedown.draggable', e.data, doDown);
				$(document).bind('mousemove.draggable', e.data, doMove);
				$(document).bind('mouseup.draggable', e.data, doUp);
// $('body').css('cursor', opts.cursor);
			});
			
			// check if the handle can be dragged
			function checkArea(e) {
				var state = $.data(e.data.target, 'draggable');
				var handle = state.handle;
				var offset = $(handle).offset();
				var width = $(handle).outerWidth();
				var height = $(handle).outerHeight();
				var t = e.pageY - offset.top;
				var r = offset.left + width - e.pageX;
				var b = offset.top + height - e.pageY;
				var l = e.pageX - offset.left;
				
				return Math.min(t,r,b,l) > state.options.edge;
			}
			
		});
	};
	
	$.fn.draggable.methods = {
		options: function(jq){
			return $.data(jq[0], 'draggable').options;
		},
		proxy: function(jq){
			return $.data(jq[0], 'draggable').proxy;
		},
		enable: function(jq){
			return jq.each(function(){
				$(this).draggable({disabled:false});
			});
		},
		disable: function(jq){
			return jq.each(function(){
				$(this).draggable({disabled:true});
			});
		}
	};
	
	$.fn.draggable.parseOptions = function(target){
		var t = $(target);
		return $.extend({}, 
				$.parser.parseOptions(target, ['cursor','handle','axis',
				       {'revert':'boolean','deltaX':'number','deltaY':'number','edge':'number'}]), {
			disabled: (t.attr('disabled') ? true : undefined)
		});
	};
	
	$.fn.draggable.defaults = {
		proxy:null,	// 'clone' or a function that will create the proxy object,
					// the function has the source parameter that indicate the
					// source object dragged.
		revert:false,
		cursor:'move',
		deltaX:null,
		deltaY:null,
		handle: null,
		disabled: false,
		edge:0,
		axis:null,	// v or h
		
		onBeforeDrag: function(e){},
		onStartDrag: function(e){},
		onDrag: function(e){},
		onStopDrag: function(e){}
	};
	
	$.fn.draggable.isDragging = false;
	
// $(function(){
// function touchHandler(e) {
// var touches = e.changedTouches, first = touches[0], type = "";
//
// switch(e.type) {
// case "touchstart": type = "mousedown"; break;
// case "touchmove": type = "mousemove"; break;
// case "touchend": type = "mouseup"; break;
// default: return;
// }
// var simulatedEvent = document.createEvent("MouseEvent");
// simulatedEvent.initMouseEvent(type, true, true, window, 1,
// first.screenX, first.screenY,
// first.clientX, first.clientY, false,
// false, false, false, 0/*left*/, null);
//
// first.target.dispatchEvent(simulatedEvent);
// if (isDragging){
// e.preventDefault();
// }
// }
//		
// if (document.addEventListener){
// document.addEventListener("touchstart", touchHandler, true);
// document.addEventListener("touchmove", touchHandler, true);
// document.addEventListener("touchend", touchHandler, true);
// document.addEventListener("touchcancel", touchHandler, true);
// }
// });
})(jQuery);
/**
 * droppable - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php
 */
(function($){
	function init(target){
		$(target).addClass('droppable');
		$(target).bind('_dragenter', function(e, source){
			$.data(target, 'droppable').options.onDragEnter.apply(target, [e, source]);
		});
		$(target).bind('_dragleave', function(e, source){
			$.data(target, 'droppable').options.onDragLeave.apply(target, [e, source]);
		});
		$(target).bind('_dragover', function(e, source){
			$.data(target, 'droppable').options.onDragOver.apply(target, [e, source]);
		});
		$(target).bind('_drop', function(e, source){
			$.data(target, 'droppable').options.onDrop.apply(target, [e, source]);
		});
	}
	
	$.fn.droppable = function(options, param){
		if (typeof options == 'string'){
			return $.fn.droppable.methods[options](this, param);
		}
		
		options = options || {};
		return this.each(function(){
			var state = $.data(this, 'droppable');
			if (state){
				$.extend(state.options, options);
			} else {
				init(this);
				$.data(this, 'droppable', {
					options: $.extend({}, $.fn.droppable.defaults, $.fn.droppable.parseOptions(this), options)
				});
			}
		});
	};
	
	$.fn.droppable.methods = {
		options: function(jq){
			return $.data(jq[0], 'droppable').options;
		},
		enable: function(jq){
			return jq.each(function(){
				$(this).droppable({disabled:false});
			});
		},
		disable: function(jq){
			return jq.each(function(){
				$(this).droppable({disabled:true});
			});
		}
	};
	
	$.fn.droppable.parseOptions = function(target){
		var t = $(target);
		return $.extend({},	$.parser.parseOptions(target, ['accept']), {
			disabled: (t.attr('disabled') ? true : undefined)
		});
	};
	
	$.fn.droppable.defaults = {
		accept:null,
		disabled:false,
		onDragEnter:function(e, source){},
		onDragOver:function(e, source){},
		onDragLeave:function(e, source){},
		onDrop:function(e, source){}
	};
})(jQuery);
/**
 * resizable - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php
 */
(function($){
// var isResizing = false;
	$.fn.resizable = function(options, param){
		if (typeof options == 'string'){
			return $.fn.resizable.methods[options](this, param);
		}
		
		function resize(e){
			var resizeData = e.data;
			var options = $.data(resizeData.target, 'resizable').options;
			if (resizeData.dir.indexOf('e') != -1) {
				var width = resizeData.startWidth + e.pageX - resizeData.startX;
				width = Math.min(
							Math.max(width, options.minWidth),
							options.maxWidth
						);
				resizeData.width = width;
			}
			if (resizeData.dir.indexOf('s') != -1) {
				var height = resizeData.startHeight + e.pageY - resizeData.startY;
				height = Math.min(
						Math.max(height, options.minHeight),
						options.maxHeight
				);
				resizeData.height = height;
			}
			if (resizeData.dir.indexOf('w') != -1) {
				var width = resizeData.startWidth - e.pageX + resizeData.startX;
				width = Math.min(
							Math.max(width, options.minWidth),
							options.maxWidth
						);
				resizeData.width = width;
				resizeData.left = resizeData.startLeft + resizeData.startWidth - resizeData.width;
				
// resizeData.width = resizeData.startWidth - e.pageX + resizeData.startX;
// if (resizeData.width >= options.minWidth && resizeData.width <=
// options.maxWidth) {
// resizeData.left = resizeData.startLeft + e.pageX - resizeData.startX;
// }
			}
			if (resizeData.dir.indexOf('n') != -1) {
				var height = resizeData.startHeight - e.pageY + resizeData.startY;
				height = Math.min(
							Math.max(height, options.minHeight),
							options.maxHeight
						);
				resizeData.height = height;
				resizeData.top = resizeData.startTop + resizeData.startHeight - resizeData.height;
				
// resizeData.height = resizeData.startHeight - e.pageY + resizeData.startY;
// if (resizeData.height >= options.minHeight && resizeData.height <=
// options.maxHeight) {
// resizeData.top = resizeData.startTop + e.pageY - resizeData.startY;
// }
			}
		}
		
		function applySize(e){
			var resizeData = e.data;
			var t = $(resizeData.target);
			t.css({
				left: resizeData.left,
				top: resizeData.top
			});
			if (t.outerWidth() != resizeData.width){t._outerWidth(resizeData.width)}
			if (t.outerHeight() != resizeData.height){t._outerHeight(resizeData.height)}
// t._outerWidth(resizeData.width)._outerHeight(resizeData.height);
		}
		
		function doDown(e){
// isResizing = true;
			$.fn.resizable.isResizing = true;
			$.data(e.data.target, 'resizable').options.onStartResize.call(e.data.target, e);
			return false;
		}
		
		function doMove(e){
			resize(e);
			if ($.data(e.data.target, 'resizable').options.onResize.call(e.data.target, e) != false){
				applySize(e)
			}
			return false;
		}
		
		function doUp(e){
// isResizing = false;
			$.fn.resizable.isResizing = false;
			resize(e, true);
			applySize(e);
			$.data(e.data.target, 'resizable').options.onStopResize.call(e.data.target, e);
			$(document).unbind('.resizable');
			$('body').css('cursor','');
// $('body').css('cursor','auto');
			return false;
		}
		
		return this.each(function(){
			var opts = null;
			var state = $.data(this, 'resizable');
			if (state) {
				$(this).unbind('.resizable');
				opts = $.extend(state.options, options || {});
			} else {
				opts = $.extend({}, $.fn.resizable.defaults, $.fn.resizable.parseOptions(this), options || {});
				$.data(this, 'resizable', {
					options:opts
				});
			}
			
			if (opts.disabled == true) {
				return;
			}
			
			// bind mouse event using namespace resizable
			$(this).bind('mousemove.resizable', {target:this}, function(e){
// if (isResizing) return;
				if ($.fn.resizable.isResizing){return}
				var dir = getDirection(e);
				if (dir == '') {
					$(e.data.target).css('cursor', '');
				} else {
					$(e.data.target).css('cursor', dir + '-resize');
				}
			}).bind('mouseleave.resizable', {target:this}, function(e){
				$(e.data.target).css('cursor', '');
			}).bind('mousedown.resizable', {target:this}, function(e){
				var dir = getDirection(e);
				if (dir == '') return;
				
				function getCssValue(css) {
					var val = parseInt($(e.data.target).css(css));
					if (isNaN(val)) {
						return 0;
					} else {
						return val;
					}
				}
				
				var data = {
					target: e.data.target,
					dir: dir,
					startLeft: getCssValue('left'),
					startTop: getCssValue('top'),
					left: getCssValue('left'),
					top: getCssValue('top'),
					startX: e.pageX,
					startY: e.pageY,
					startWidth: $(e.data.target).outerWidth(),
					startHeight: $(e.data.target).outerHeight(),
					width: $(e.data.target).outerWidth(),
					height: $(e.data.target).outerHeight(),
					deltaWidth: $(e.data.target).outerWidth() - $(e.data.target).width(),
					deltaHeight: $(e.data.target).outerHeight() - $(e.data.target).height()
				};
				$(document).bind('mousedown.resizable', data, doDown);
				$(document).bind('mousemove.resizable', data, doMove);
				$(document).bind('mouseup.resizable', data, doUp);
				$('body').css('cursor', dir+'-resize');
			});
			
			// get the resize direction
			function getDirection(e) {
				var tt = $(e.data.target);
				var dir = '';
				var offset = tt.offset();
				var width = tt.outerWidth();
				var height = tt.outerHeight();
				var edge = opts.edge;
				if (e.pageY > offset.top && e.pageY < offset.top + edge) {
					dir += 'n';
				} else if (e.pageY < offset.top + height && e.pageY > offset.top + height - edge) {
					dir += 's';
				}
				if (e.pageX > offset.left && e.pageX < offset.left + edge) {
					dir += 'w';
				} else if (e.pageX < offset.left + width && e.pageX > offset.left + width - edge) {
					dir += 'e';
				}
				
				var handles = opts.handles.split(',');
				for(var i=0; i<handles.length; i++) {
					var handle = handles[i].replace(/(^\s*)|(\s*$)/g, '');
					if (handle == 'all' || handle == dir) {
						return dir;
					}
				}
				return '';
			}
			
			
		});
	};
	
	$.fn.resizable.methods = {
		options: function(jq){
			return $.data(jq[0], 'resizable').options;
		},
		enable: function(jq){
			return jq.each(function(){
				$(this).resizable({disabled:false});
			});
		},
		disable: function(jq){
			return jq.each(function(){
				$(this).resizable({disabled:true});
			});
		}
	};
	
	$.fn.resizable.parseOptions = function(target){
		var t = $(target);
		return $.extend({},
				$.parser.parseOptions(target, [
					'handles',{minWidth:'number',minHeight:'number',maxWidth:'number',maxHeight:'number',edge:'number'}
				]), {
			disabled: (t.attr('disabled') ? true : undefined)
		})
	};
	
	$.fn.resizable.defaults = {
		disabled:false,
		handles:'n, e, s, w, ne, se, sw, nw, all',
		minWidth: 10,
		minHeight: 10,
		maxWidth: 10000,// $(document).width(),
		maxHeight: 10000,// $(document).height(),
		edge:5,
		onStartResize: function(e){},
		onResize: function(e){},
		onStopResize: function(e){}
	};
	
	$.fn.resizable.isResizing = false;
	
})(jQuery);
/**
 * linkbutton - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php
 */
(function($){
	
	function createButton(target) {
		var opts = $.data(target, 'linkbutton').options;
		var t = $(target);
		
		t.addClass('l-btn').removeClass('l-btn-plain l-btn-selected l-btn-plain-selected');
		if (opts.plain){t.addClass('l-btn-plain')}
		if (opts.selected){
			t.addClass(opts.plain ? 'l-btn-selected l-btn-plain-selected' : 'l-btn-selected');
		}
		t.attr('group', opts.group || '');
		t.attr('id', opts.id || '');
		t.html(
			'<span class="l-btn-left">' +
				'<span class="l-btn-text"></span>' +
			'</span>'
		);
		if (opts.text){
			t.find('.l-btn-text').html(opts.text);
			if (opts.iconCls){
				t.find('.l-btn-text').addClass(opts.iconCls).addClass(opts.iconAlign=='left' ? 'l-btn-icon-left' : 'l-btn-icon-right');
			}
		} else {
			t.find('.l-btn-text').html('<span class="l-btn-empty">&nbsp;</span>');
			if (opts.iconCls){
				t.find('.l-btn-empty').addClass(opts.iconCls);
			}
		}
		
		t.unbind('.linkbutton').bind('focus.linkbutton',function(){
			if (!opts.disabled){
				$(this).find('.l-btn-text').addClass('l-btn-focus');
			}
		}).bind('blur.linkbutton',function(){
			$(this).find('.l-btn-text').removeClass('l-btn-focus');
		});
		if (opts.toggle && !opts.disabled){
			t.bind('click.linkbutton', function(){
				if (opts.selected){
					$(this).linkbutton('unselect');
				} else {
					$(this).linkbutton('select');
				}
			});
		}
		
		setSelected(target, opts.selected)
		setDisabled(target, opts.disabled);
	}
	
	function setSelected(target, selected){
		var opts = $.data(target, 'linkbutton').options;
		if (selected){
			if (opts.group){
				$('a.l-btn[group="'+opts.group+'"]').each(function(){
					var o = $(this).linkbutton('options');
					if (o.toggle){
						$(this).removeClass('l-btn-selected l-btn-plain-selected');
						o.selected = false;
					}
				});
			}
			$(target).addClass(opts.plain ? 'l-btn-selected l-btn-plain-selected' : 'l-btn-selected');
			opts.selected = true;
		} else {
			if (!opts.group){
				$(target).removeClass('l-btn-selected l-btn-plain-selected');
				opts.selected = false;
			}
		}
	}
	
	function setDisabled(domElem, disabled){
		var data = $.data(domElem, "linkbutton");   // 获取对象的数据
		$(domElem).removeClass('l-btn-disabled l-btn-plain-disabled');
	    if (disabled) {                                             // 禁用按钮
	        data.options.disabled = true;
	        var href = $(domElem).attr("href");                     // 获取超级连接
	        if (href) {
	            data.href = href;                                   // 保存原来的超级链接
	            $(domElem).attr("href", "javascript:void(0)");      // 重新设置
	        }
	        if (domElem.onclick) {                                  // 是否有点击事件处理
	            data.onclick = domElem.onclick;
	            domElem.onclick = null;                             // 取消掉
	        }
	        var eventData = $(domElem).data("events") || $._data(domElem, 'events');
	        if (eventData && eventData["click"]) {
	            var clickHandlerObjects = eventData["click"];
	            data.savedHandlers = [];
	            for (var i = 0; i < clickHandlerObjects.length; i++) {
	                if (clickHandlerObjects[i].namespace != "menu") {
	                    var handler = clickHandlerObjects[i]["handler"];
	                    $(domElem).unbind('click', handler);
	                    data.savedHandlers.push(handler);
	                }
	            }
	        }
	        data.options.plain ? $(domElem).addClass('l-btn-disabled l-btn-plain-disabled') : $(domElem).addClass('l-btn-disabled');                  // 使用样式
	    } else {
	        data.options.disabled = false;                          // 启用按钮
	        if (data.href) {                                        // 恢复原来的超级链接
	            $(domElem).attr("href", data.href);
	        }
	        if (data.onclick) {                                     // 恢复原来的点击事件处理
	            domElem.onclick = data.onclick;
	        }
	        if (data.savedHandlers) {
	            for (var i = 0; i < data.savedHandlers.length; i++) {
	                $(domElem).click(data.savedHandlers[i]);
	            }
	        }
	        data.savedHandlers = [];
	    }
	}
	
	$.fn.linkbutton = function(options, param){
		if (typeof options == 'string'){
			return $.fn.linkbutton.methods[options](this, param);
		}
		
		options = options || {};
		return this.each(function(){
			var state = $.data(this, 'linkbutton');
			if (state){
				$.extend(state.options, options);
			} else {
				$.data(this, 'linkbutton', {
					options: $.extend({}, $.fn.linkbutton.defaults, $.fn.linkbutton.parseOptions(this), options)
				});
				$(this).removeAttr('disabled');
			}
			
			createButton(this);
		});
	};
	
	$.fn.linkbutton.methods = {
		options: function(jq){
			return $.data(jq[0], 'linkbutton').options;
		},
		enable: function(jq){
			return jq.each(function(){
				setDisabled(this, false);
			});
		},
		disable: function(jq){
			return jq.each(function(){
				setDisabled(this, true);
			});
		},
		select: function(jq){
			return jq.each(function(){
				setSelected(this, true);
			});
		},
		unselect: function(jq){
			return jq.each(function(){
				setSelected(this, false);
			});
		}
	};
	
	$.fn.linkbutton.parseOptions = function(target){
		var t = $(target);
		return $.extend({}, $.parser.parseOptions(target, 
			['id','iconCls','iconAlign','group',{plain:'boolean',toggle:'boolean',selected:'boolean'}]
		), {
			disabled: (t.attr('disabled') ? true : undefined),
			text: $.trim(t.html()),
			iconCls: (t.attr('icon') || t.attr('iconCls'))
		});
	};
	
	$.fn.linkbutton.defaults = {
		id: null,
		disabled: false,
		toggle: false,
		selected: false,
		group: null,
		plain: false,
		text: '',
		iconCls: null,
		iconAlign: 'left'
	};
	
})(jQuery);
/**
 * pagination - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php
 * 
 * Dependencies: linkbutton
 * 
 */
(function($){
	function buildToolbar(target){
		var state = $.data(target, 'pagination');
		var opts = state.options;
		var bb = state.bb = {};	// the buttons;
		
		var pager = $(target).addClass('pagination').html('<table cellspacing="0" cellpadding="0" border="0"><tr></tr></table>');
		var tr = pager.find('tr');
		
		function createButton(name){
			var btn = opts.nav[name];
			var a = $('<a href="javascript:void(0)"></a>').appendTo(tr);
			a.wrap('<td></td>');
			a.linkbutton({
				iconCls: btn.iconCls,
				plain: true
			}).unbind('.pagination').bind('click.pagination', function(){
				btn.handler.call(target);
			});
			return a;
		}

		if (opts.showPageList){
			var ps = $('<select class="pagination-page-list"></select>');
			ps.bind('change', function(){
				opts.pageSize = parseInt($(this).val());
				opts.onChangePageSize.call(target, opts.pageSize);
				selectPage(target, opts.pageNumber);
			});
			for(var i=0; i<opts.pageList.length; i++) {
				$('<option></option>').text(opts.pageList[i]).appendTo(ps);
			}
			$('<td></td>').html('<span>'+opts.selectPageText+'</span>').append(ps).appendTo(tr);
			$('<td></td>').html('<span>'+opts.selectUnit+'</span>').appendTo(tr);
			$('<td><div class="pagination-btn-separator"></div></td>').appendTo(tr);
		}
		
		bb.first = createButton('first');
		bb.prev = createButton('prev');
		$('<td><div class="pagination-btn-separator"></div></td>').appendTo(tr);
		
		$('<span style="padding-left:6px;"></span>').html(opts.beforePageText).appendTo(tr).wrap('<td></td>');
		bb.num = $('<input class="pagination-num" type="text" value="1" size="2">').appendTo(tr).wrap('<td></td>');
		bb.num.unbind('.pagination').bind('keydown.pagination', function(e){
			if (e.keyCode == 13){
				var pageNumber = parseInt($(this).val()) || 1;
				selectPage(target, pageNumber);
				return false;
			}
		});
		bb.after = $('<span style="padding-right:6px;"></span>').appendTo(tr).wrap('<td></td>');
		$('<td><div class="pagination-btn-separator"></div></td>').appendTo(tr);
		bb.next = createButton('next');
		bb.last = createButton('last');
		if (opts.showRefresh){
			$('<td><div class="pagination-btn-separator"></div></td>').appendTo(tr);
			bb.refresh = createButton('refresh');
		}
		if (opts.buttons){
			$('<td><div class="pagination-btn-separator"></div></td>').appendTo(tr);
			if ($.isArray(opts.buttons)){
				for(var i=0; i<opts.buttons.length; i++){
					var btn = opts.buttons[i];
					if (btn == '-') {
						$('<td><div class="pagination-btn-separator"></div></td>').appendTo(tr);
					} else {
						var td = $('<td></td>').appendTo(tr);
						var a = $('<a href="javascript:void(0)"></a>').appendTo(td);
						a[0].onclick = eval(btn.handler || function(){});
						a.linkbutton($.extend({}, btn, {
							plain:true
						}));
					}
				}
			} else {
				var td = $('<td></td>').appendTo(tr);
				$(opts.buttons).appendTo(td).show();
			}
		}
		$('<div class="pagination-info"></div>').appendTo(pager);
		$('<div style="clear:both;"></div>').appendTo(pager);
	}
	
	function selectPage(target, page){
		var opts = $.data(target, 'pagination').options;
		refreshData(target, {pageNumber:page});
		opts.onSelectPage.call(target, opts.pageNumber, opts.pageSize);
	}
	
	function refreshData(target, param){
		var state = $.data(target, 'pagination');
		var opts = state.options;
		var bb = state.bb;
		
		$.extend(opts, param||{});
		
		var ps = $(target).find('select.pagination-page-list');
		if (ps.length){
			ps.val(opts.pageSize+'');
			opts.pageSize = parseInt(ps.val());
		}
		
		var pageCount = Math.ceil(opts.total/opts.pageSize) || 1;
		if (opts.pageNumber < 1){opts.pageNumber = 1;}
		if (opts.pageNumber > pageCount){opts.pageNumber = pageCount}
		bb.num.val(opts.pageNumber);
		bb.after.html(opts.afterPageText.replace(/{pages}/, pageCount));
		
		var pinfo = opts.displayMsg;
		pinfo = pinfo.replace(/{from}/, opts.total==0 ? 0 : opts.pageSize*(opts.pageNumber-1)+1);
		pinfo = pinfo.replace(/{to}/, Math.min(opts.pageSize*(opts.pageNumber), opts.total));
		pinfo = pinfo.replace(/{total}/, opts.total);
		
		if(opts.total == 0){
			pinfo = opts.noData;
		}
		
		$(target).find('div.pagination-info').html(pinfo);
		
		bb.first.add(bb.prev).linkbutton({disabled: (opts.pageNumber == 1)});
		bb.next.add(bb.last).linkbutton({disabled: (opts.pageNumber == pageCount)});
		
		setLoadStatus(target, opts.loading);
	}
	
	function setLoadStatus(target, loading){
		var state = $.data(target, 'pagination');
		var opts = state.options;
		var bb = state.bb;
		opts.loading = loading;
		if (opts.showRefresh){
			state.bb.refresh.linkbutton({
				iconCls:(opts.loading ? 'pagination-loading' : 'pagination-load')
			});
		}
	}
	
	$.fn.pagination = function(options, param) {
		if (typeof options == 'string'){
			return $.fn.pagination.methods[options](this, param);
		}
		
		options = options || {};
		return this.each(function(){
			var opts;
			var state = $.data(this, 'pagination');
			if (state) {
				opts = $.extend(state.options, options);
			} else {
				opts = $.extend({}, $.fn.pagination.defaults, $.fn.pagination.parseOptions(this), options);
				$.data(this, 'pagination', {
					options: opts
				});
			}
			
			buildToolbar(this);
			refreshData(this);
			
		});
	};
	
	$.fn.pagination.methods = {
		options: function(jq){
			return $.data(jq[0], 'pagination').options;
		},
		loading: function(jq){
			return jq.each(function(){
				setLoadStatus(this, true);
			});
		},
		loaded: function(jq){
			return jq.each(function(){
				setLoadStatus(this, false);
			});
		},
		refresh: function(jq, options){
			return jq.each(function(){
				refreshData(this, options);
			});
		},
		select: function(jq, page){
			return jq.each(function(){
				selectPage(this, page);
			});
		}
	};
	
	$.fn.pagination.parseOptions = function(target){
		var t = $(target);
		return $.extend({},
				$.parser.parseOptions(target, [
					{total:'number',pageSize:'number',pageNumber:'number'},
					{loading:'boolean',showPageList:'boolean',showRefresh:'boolean'}
				]), {
			pageList: (t.attr('pageList') ? eval(t.attr('pageList')) : undefined)
		});
	};
	
	$.fn.pagination.defaults = {
		total: 1,
		pageSize: 10,
		pageNumber: 1,
		pageList: [10,20,30,50],
		loading: false,
		buttons: null,
		showPageList: true,
		showRefresh: true,
		
		onSelectPage: function(pageNumber, pageSize){},
		onBeforeRefresh: function(pageNumber, pageSize){},
		onRefresh: function(pageNumber, pageSize){},
		onChangePageSize: function(pageSize){},
		
		selectPageText: 'Please Select',
		beforePageText: 'Page',
		afterPageText: 'of {pages}',
		displayMsg: 'Displaying {from} to {to} of {total} items',
		noData: 'noData to display',
		selectUnit: 'num',
		
		nav: {
			first: {
				iconCls: 'pagination-first',
				handler: function(){
					var opts = $(this).pagination('options');
					if (opts.pageNumber > 1){$(this).pagination('select', 1)}
				}
			},
			prev: {
				iconCls: 'pagination-prev',
				handler: function(){
					var opts = $(this).pagination('options');
					if (opts.pageNumber > 1){$(this).pagination('select', opts.pageNumber - 1)}
				}
			},
			next: {
				iconCls: 'pagination-next',
				handler: function(){
					var opts = $(this).pagination('options');
					var pageCount = Math.ceil(opts.total/opts.pageSize);
					if (opts.pageNumber < pageCount){$(this).pagination('select', opts.pageNumber + 1)}
				}
			},
			last: {
				iconCls: 'pagination-last',
				handler: function(){
					var opts = $(this).pagination('options');
					var pageCount = Math.ceil(opts.total/opts.pageSize);
					if (opts.pageNumber < pageCount){$(this).pagination('select', pageCount)}
				}
			},
			refresh: {
				iconCls: 'pagination-refresh',
				handler: function(){
					var opts = $(this).pagination('options');
					if (opts.onBeforeRefresh.call(this, opts.pageNumber, opts.pageSize) != false){
						$(this).pagination('select', opts.pageNumber);
						opts.onRefresh.call(this, opts.pageNumber, opts.pageSize);
					}
				}
			}
		}
	};
})(jQuery);
/**
 * tree - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php
 * 
 * Dependencies: draggable droppable
 * 
 * Node is a javascript object which contains following properties: 1 id: An
 * identity value bind to the node. 2 text: Text to be showed. 3 checked:
 * Indicate whether the node is checked selected. 3 attributes: Custom
 * attributes bind to the node. 4 target: Target DOM object.
 */
(function($){
	/**
	 * wrap the
	 * <ul>
	 * tag as a tree and then return it.
	 */
	function wrapTree(target){
		var tree = $(target);
		tree.addClass('tree');
		return tree;
	}
	
	function parseTreeData(target){
		var data = [];
		
		getData(data, $(target));
		
		function getData(aa, tree){
			tree.children('li').each(function(){
				var node = $(this);
				var item = $.extend({}, $.parser.parseOptions(this, ['id','iconCls','state']), {
					checked: (node.attr('checked') ? true : undefined)
				});
				
				item.text = node.children('span').html();
				if (!item.text){
					item.text = node.html();
				}
				
				var subTree = node.children('ul');
				if (subTree.length){
					item.children = [];
					getData(item.children, subTree);
				}
				aa.push(item);
			});
		}
		return data;
	}
	
	function bindTreeEvents(target){
		var opts = $.data(target, 'tree').options;
		$(target).unbind().bind('mouseover', function(e){
			var tt = $(e.target);
			var node = tt.closest('div.tree-node');
			if (!node.length){return;}
			node.addClass('tree-node-hover');
			if (tt.hasClass('tree-hit')){
				if (tt.hasClass('tree-expanded')){
					tt.addClass('tree-expanded-hover');
				} else {
					tt.addClass('tree-collapsed-hover');
				}
			}
			e.stopPropagation();
		}).bind('mouseout', function(e){
			var tt = $(e.target);
			var node = tt.closest('div.tree-node');
			if (!node.length){return;}
			node.removeClass('tree-node-hover');
			if (tt.hasClass('tree-hit')){
				if (tt.hasClass('tree-expanded')){
					tt.removeClass('tree-expanded-hover');
				} else {
					tt.removeClass('tree-collapsed-hover');
				}
			}
			e.stopPropagation();
		}).bind('click', function(e){
			var tt = $(e.target);
			var node = tt.closest('div.tree-node');
			if (!node.length){return;}
			if (tt.hasClass('tree-hit')){
				toggleNode(target, node[0]);
				return false;
			} else if (tt.hasClass('tree-checkbox')){
				checkNode(target, node[0], !tt.hasClass('tree-checkbox1'));
				return false;
			} else {
				selectNode(target, node[0]);
				opts.onClick.call(target, getNode(target, node[0]));
			}
			e.stopPropagation();
		}).bind('dblclick', function(e){
			var node = $(e.target).closest('div.tree-node');
			if (!node.length){return;}
			selectNode(target, node[0]);
			opts.onDblClick.call(target, getNode(target, node[0]));
			e.stopPropagation();
		}).bind('contextmenu', function(e){
			var node = $(e.target).closest('div.tree-node');
			if (!node.length){return;}
			opts.onContextMenu.call(target, e, getNode(target, node[0]));
			e.stopPropagation();
		});
	}
	
	function disableDnd(target){
		var nodes = $(target).find('div.tree-node');
		nodes.draggable('disable');
		nodes.css('cursor', 'pointer');
	}
	
	function enableDnd(target){
		var state = $.data(target, 'tree');
		var opts = state.options;
		var tree = state.tree;
		state.disabledNodes = [];
		
		tree.find('div.tree-node').draggable({
			disabled: false,
			revert: true,
			cursor: 'pointer',
			proxy: function(source){
				var p = $('<div class="tree-node-proxy"></div>').appendTo('body');
// var p = $('<div class="tree-node-proxy
// tree-dnd-no"></div>').appendTo('body');
				p.html('<span class="tree-dnd-icon tree-dnd-no">&nbsp;</span>'+$(source).find('.tree-title').html());
				p.hide();
				return p;
			},
			deltaX: 15,
			deltaY: 15,
			onBeforeDrag: function(e){
				if (opts.onBeforeDrag.call(target, getNode(target, this)) == false){return false}
				if ($(e.target).hasClass('tree-hit') || $(e.target).hasClass('tree-checkbox')){return false;}
				if (e.which != 1){return false;}
				$(this).next('ul').find('div.tree-node').droppable({accept:'no-accept'});	// the
																							// child
																							// node
																							// can't
																							// be
																							// dropped
				var indent = $(this).find('span.tree-indent');
				if (indent.length){
					e.data.offsetWidth -= indent.length*indent.width();
				}
			},
			onStartDrag: function(){
				$(this).draggable('proxy').css({
					left:-10000,
					top:-10000
				});
				opts.onStartDrag.call(target, getNode(target, this));
				var node = getNode(target, this);
				if (node.id == undefined){
					node.id = 'easyui_tree_node_id_temp';
					updateNode(target, node);
				}
				state.draggingNodeId = node.id;	// store the dragging node id
			},
			onDrag: function(e){
				var x1=e.pageX,y1=e.pageY,x2=e.data.startX,y2=e.data.startY;
				var d = Math.sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));
				if (d>3){	// when drag a little distance, show the proxy
							// object
					$(this).draggable('proxy').show();
				}
				this.pageY = e.pageY;
			},
			onStopDrag: function(){
				$(this).next('ul').find('div.tree-node').droppable({accept:'div.tree-node'}); // restore
																								// the
																								// accept
																								// property
																								// of
																								// child
																								// nodes
				for(var i=0; i<state.disabledNodes.length; i++){
					$(state.disabledNodes[i]).droppable('enable');
				}
				state.disabledNodes = [];
				// get the source node
				var node = findNode(target, state.draggingNodeId);
				if (node && node.id == 'easyui_tree_node_id_temp'){
					node.id = '';
					updateNode(target, node);
				}
				opts.onStopDrag.call(target, node);
			}
		}).droppable({
			accept:'div.tree-node',
			onDragEnter: function(e, source){
				if (opts.onDragEnter.call(target, this, getNode(target, source)) == false){
					allowDrop(source, false);
// $(source).draggable('proxy').removeClass('tree-dnd-yes').addClass('tree-dnd-no');
					$(this).removeClass('tree-node-append tree-node-top tree-node-bottom');
					$(this).droppable('disable');
					state.disabledNodes.push(this);
				}
			},
			onDragOver: function(e, source){
				if ($(this).droppable('options').disabled){return}
				var pageY = source.pageY;
				var top = $(this).offset().top;
				var bottom = top + $(this).outerHeight();
				
				allowDrop(source, true);
// $(source).draggable('proxy').removeClass('tree-dnd-no').addClass('tree-dnd-yes');
				$(this).removeClass('tree-node-append tree-node-top tree-node-bottom');
				if (pageY > top + (bottom - top) / 2){
					if (bottom - pageY < 5){
						$(this).addClass('tree-node-bottom');
					} else {
						$(this).addClass('tree-node-append');
					}
				} else {
					if (pageY - top < 5){
						$(this).addClass('tree-node-top');
					} else {
						$(this).addClass('tree-node-append');
					}
				}
				if (opts.onDragOver.call(target, this, getNode(target, source)) == false){
					allowDrop(source, false);
// $(source).draggable('proxy').removeClass('tree-dnd-yes').addClass('tree-dnd-no');
					$(this).removeClass('tree-node-append tree-node-top tree-node-bottom');
					$(this).droppable('disable');
					state.disabledNodes.push(this);
				}
			},
			onDragLeave: function(e, source){
				allowDrop(source, false);
// $(source).draggable('proxy').removeClass('tree-dnd-yes').addClass('tree-dnd-no');
				$(this).removeClass('tree-node-append tree-node-top tree-node-bottom');
				opts.onDragLeave.call(target, this, getNode(target, source));
			},
			onDrop: function(e, source){
				var dest = this;
				var action, point;
				if ($(this).hasClass('tree-node-append')){
					action = append;
					point = 'append';
				} else {
					action = insert;
					point = $(this).hasClass('tree-node-top') ? 'top' : 'bottom';
				}
				
// setTimeout(function(){
// }, 0);
				if (opts.onBeforeDrop.call(target, dest, getData(target, source), point) == false){
					$(this).removeClass('tree-node-append tree-node-top tree-node-bottom');
					return;
				}
				action(source, dest, point);
				$(this).removeClass('tree-node-append tree-node-top tree-node-bottom');
			}
		});
		
		function allowDrop(source, allowed){
			var icon = $(source).draggable('proxy').find('span.tree-dnd-icon');
			icon.removeClass('tree-dnd-yes tree-dnd-no').addClass(allowed ? 'tree-dnd-yes' : 'tree-dnd-no');
		}
		
		function append(source, dest){
			if (getNode(target, dest).state == 'closed'){
				expandNode(target, dest, function(){
					doAppend();
				});
			} else {
				doAppend();
			}
			
			function doAppend(){
				var node = $(target).tree('pop', source);
				$(target).tree('append', {
					parent: dest,
					data: [node]
				});
				opts.onDrop.call(target, dest, node, 'append');
			}
		}
		
		function insert(source, dest, point){
			var param = {};
			if (point == 'top'){
				param.before = dest;
			} else {
				param.after = dest;
			}
			
			var node = $(target).tree('pop', source);
			param.data = node;
			$(target).tree('insert', param);
			opts.onDrop.call(target, dest, node, point);
		}
	}
	
	function checkNode(target, nodeEl, checked){
		var opts = $.data(target, 'tree').options;
		if (!opts.checkbox) {return;}
		
		var nodedata = getNode(target, nodeEl);
		if (opts.onBeforeCheck.call(target, nodedata, checked) == false){return;}
		
		var node = $(nodeEl);
		var ck = node.find('.tree-checkbox');
		ck.removeClass('tree-checkbox0 tree-checkbox1 tree-checkbox2');
		if (checked){
			ck.addClass('tree-checkbox1');
		} else {
			ck.addClass('tree-checkbox0');
		}
// if (opts.cascadeCheck){
// setParentCheckbox(node);
// setChildCheckbox(node);
// }
	
		// gengrong
		
		if (opts.cascadeCheck){
			if(opts.parentCascade){
				setParentCheckbox(node);
			}
			if(opts.childCascade){
				setChildCheckbox(node);
			}
		}
		opts.onCheck.call(target, nodedata, checked);
		
		function setChildCheckbox(node){
			var childck = node.next().find('.tree-checkbox');
			childck.removeClass('tree-checkbox0 tree-checkbox1 tree-checkbox2');
			if (node.find('.tree-checkbox').hasClass('tree-checkbox1')){
				childck.addClass('tree-checkbox1');
			} else {
				childck.addClass('tree-checkbox0');
			}
		}
		
		function setParentCheckbox(node){
			var pnode = getParentNode(target, node[0]);
			if (pnode){
				var ck = $(pnode.target).find('.tree-checkbox');
				ck.removeClass('tree-checkbox0 tree-checkbox1 tree-checkbox2');
				if (isAllSelected(node)){
					ck.addClass('tree-checkbox1');
				} else if (isAllNull(node)){
					ck.addClass('tree-checkbox0');
				} else {
					ck.addClass('tree-checkbox2');
				}
				setParentCheckbox($(pnode.target));
			}
			
			function isAllSelected(n){
				var ck = n.find('.tree-checkbox');
				if (ck.hasClass('tree-checkbox0') || ck.hasClass('tree-checkbox2')) return false;
				var b = true;
				n.parent().siblings().each(function(){
					if (!$(this).children('div.tree-node').children('.tree-checkbox').hasClass('tree-checkbox1')){
						b = false;
					}
				});
				return b;
			}
			function isAllNull(n){
				var ck = n.find('.tree-checkbox');
				if (ck.hasClass('tree-checkbox1') || ck.hasClass('tree-checkbox2')) return false;
				var b = true;
				n.parent().siblings().each(function(){
					if (!$(this).children('div.tree-node').children('.tree-checkbox').hasClass('tree-checkbox0')){
						b = false;
					}
				});
				return b;
			}
		}
	}
	
	/**
	 * when append or remove node, adjust its parent node check status.
	 */
	function adjustCheck(target, nodeEl){
		var opts = $.data(target, 'tree').options;
		var node = $(nodeEl);
		if (isLeaf(target, nodeEl)){
			var ck = node.find('.tree-checkbox');
			if (ck.length){
				if (ck.hasClass('tree-checkbox1')){
					checkNode(target, nodeEl, true);
				} else {
					checkNode(target, nodeEl, false);
				}
			} else if (opts.onlyLeafCheck){
				$('<span class="tree-checkbox tree-checkbox0"></span>').insertBefore(node.find('.tree-title'));
// bindTreeEvents(target);
			}
		} else {
			var ck = node.find('.tree-checkbox');
			if (opts.onlyLeafCheck){
				ck.remove();
			} else {
				if (ck.hasClass('tree-checkbox1')){
					checkNode(target, nodeEl, true);
				} else if (ck.hasClass('tree-checkbox2')){
					var allchecked = true;
					var allunchecked = true;
					var children = getChildren(target, nodeEl);
					for(var i=0; i<children.length; i++){
						if (children[i].checked){
							allunchecked = false;
						} else {
							allchecked = false;
						}
					}
					if (allchecked){
						checkNode(target, nodeEl, true);
					}
					if (allunchecked){
						checkNode(target, nodeEl, false);
					}
				}
			}
		}
	}
	
	/**
	 * load tree data to
	 * <ul>
	 * tag ul: the
	 * <ul>
	 * dom element data: array, the tree node data append: defines if to append
	 * data
	 */
	function loadData(target, ul, data, append){
		if(!$.data(target, 'tree')){return false;}
		var opts = $.data(target, 'tree').options;
		data = opts.loadFilter.call(target, data, $(ul).prev('div.tree-node')[0]);
		
		if (!append){
			$(ul).empty();
		}
		
		var uncheckedNodes = [];
		var checkedNodes = [];
		var depth = $(ul).prev('div.tree-node').find('span.tree-indent, span.tree-hit').length;
		appendNodes(ul, data, depth);
		//更改根节点的图标
		$(target).children().each(function(index){
		    var li = $(this);
		    li.find('div.tree-node span.tree-icon:first').addClass('tree-root');
		})
		if (opts.dnd){
			enableDnd(target);
		} else {
			disableDnd(target);
		}
		
		if (uncheckedNodes.length){
			checkNode(target, uncheckedNodes[0], false);
		}
		for(var i=0; i<checkedNodes.length; i++){
			checkNode(target, checkedNodes[i], true);
		}
		
		setTimeout(function(){
			showLines(target, target);
		}, 0);
		
		var nodedata = null;
		if (target != ul){
			var node = $(ul).prev();
			nodedata = getNode(target, node[0]);
		}
		opts.onLoadSuccess.call(target, nodedata, data);
		
		function appendNodes(ul, children, depth){
			for(var i=0; i<children.length; i++){
				var li = $('<li></li>').appendTo(ul);
				var item = children[i];
				
				// the node state has only 'open' or 'closed' attribute
				if (item.state != 'open' && item.state != 'closed'){
					item.state = 'open';
				}
				
				var node = $('<div class="tree-node"></div>').appendTo(li);
				node.attr('node-id', item.id);
				
				// store node attributes
				$.data(node[0], 'tree-node', {
					id: item.id,
					text: item.text,
					iconCls: item.iconCls,
					attributes: item.attributes
				});
				
				$('<span class="tree-title"></span>').html(opts.formatter.call(target, item)).appendTo(node);
// $('<span class="tree-title"></span>').html(item.text).appendTo(node);
				
				if (opts.checkbox){
					if (opts.onlyLeafCheck){
						if (item.state == 'open' && (!item.children || !item.children.length)){
							if (item.checked){
								$('<span class="tree-checkbox tree-checkbox1"></span>').prependTo(node);
							} else {
								$('<span class="tree-checkbox tree-checkbox0"></span>').prependTo(node);
							}
						}
					} else {
						if (item.checked){
							$('<span class="tree-checkbox tree-checkbox1"></span>').prependTo(node);
							checkedNodes.push(node[0]);
						} else {
							$('<span class="tree-checkbox tree-checkbox0"></span>').prependTo(node);
							if (children == data){
								uncheckedNodes.push(node[0]);
							}
						}
					}
				}
				
				if (item.children && item.children.length){
					var subul = $('<ul></ul>').appendTo(li);
					if (item.state == 'open'){
						$('<span class="tree-icon tree-folder tree-folder-open"></span>').addClass(item.iconCls).prependTo(node);
						$('<span class="tree-hit tree-expanded"></span>').prependTo(node);
					} else {
						$('<span class="tree-icon tree-folder"></span>').addClass(item.iconCls).prependTo(node);
						$('<span class="tree-hit tree-collapsed"></span>').prependTo(node);
						subul.css('display','none');
					}
					appendNodes(subul, item.children, depth+1);
				} else {
					if (item.state == 'closed'){
						$('<span class="tree-icon tree-folder tree-last-close"></span>').addClass(item.iconCls).prependTo(node);
						$('<span class="tree-hit tree-collapsed"></span>').prependTo(node);
					} else {
						$('<span class="tree-icon tree-file"></span>').addClass(item.iconCls).prependTo(node);
						$('<span class="tree-indent"></span>').prependTo(node);
					}
				}
				for(var j=0; j<depth; j++){
					$('<span class="tree-indent"></span>').prependTo(node);
				}
			}
		}
	}
	
	/**
	 * draw tree lines
	 */
	function showLines(target, ul, called){
		var opts = $.data(target, 'tree').options;
		if (!opts.lines) return;
		
		if (!called){
			called = true;
			$(target).find('span.tree-indent').removeClass('tree-line tree-join tree-joinbottom');
			$(target).find('div.tree-node').removeClass('tree-node-last tree-root-first tree-root-one');
			var roots = $(target).tree('getRoots');
			if (roots.length > 1){
				$(roots[0].target).addClass('tree-root-first');
			} else if (roots.length == 1){
				$(roots[0].target).addClass('tree-root-one');
			}
		}
		$(ul).children('li').each(function(){
			var node = $(this).children('div.tree-node');
			var ul = node.next('ul');
			if (ul.length){
				if ($(this).next().length){
					_line(node);
				}
				showLines(target, ul, called);
			} else {
				_join(node);
			}
		});
		var lastNode = $(ul).children('li:last').children('div.tree-node').addClass('tree-node-last');
		lastNode.children('span.tree-join').removeClass('tree-join').addClass('tree-joinbottom');
		
		function _join(node, hasNext){
			var icon = node.find('span.tree-icon');
			icon.prev('span.tree-indent').addClass('tree-join');
		}
		
		function _line(node){
			var depth = node.find('span.tree-indent, span.tree-hit').length;
			node.next().find('div.tree-node').each(function(){
				$(this).children('span:eq('+(depth-1)+')').addClass('tree-line');
			});
		}
	}
	
	/**
	 * request remote data and then load nodes in the
	 * <ul>
	 * tag. ul: the
	 * <ul>
	 * dom element param: request parameter
	 */
	function request(target, ul, param, callback){
		var opts = $.data(target, 'tree').options;
		
		param = param || {};
		
		var nodedata = null;
		if (target != ul){
			var node = $(ul).prev();
			nodedata = getNode(target, node[0]);
		}

		if (opts.onBeforeLoad.call(target, nodedata, param) == false) return;
		
		var folder = $(ul).prev().children('span.tree-folder');
		folder.addClass('tree-loading');
		var result = opts.loader.call(target, param, function(data){
			folder.removeClass('tree-loading');
			loadData(target, ul, data);
			if (callback){
				callback();
			}
		}, function(){
			folder.removeClass('tree-loading');
			opts.onLoadError.apply(target, arguments);
			if (callback){
				callback();
			}
		});
		if (result == false){
			folder.removeClass('tree-loading');
		}
	}
	
	function expandNode(target, nodeEl, callback){
		var opts = $.data(target, 'tree').options;
		
		var hit = $(nodeEl).children('span.tree-hit');
		if (hit.length == 0) return;	// is a leaf node
		if (hit.hasClass('tree-expanded')) return;	// has expanded
		
		var node = getNode(target, nodeEl);
		if (opts.onBeforeExpand.call(target, node) == false) return;
		
		hit.removeClass('tree-collapsed tree-collapsed-hover').addClass('tree-expanded');
		hit.next().addClass('tree-folder-open');
		var ul = $(nodeEl).next();
		if (ul.length){
			if (opts.animate){
				ul.slideDown('normal', function(){
					opts.onExpand.call(target, node);
					if (callback) callback();
				});
			} else {
				ul.css('display','block');
				opts.onExpand.call(target, node);
				if (callback) callback();
			}
		} else {
			var subul = $('<ul style="display:none"></ul>').insertAfter(nodeEl);
			// request children nodes data
			request(target, subul[0], {id:node.id}, function(){
				if (subul.is(':empty')){
					subul.remove();	// if load children data fail, remove the
									// children node container
					//添加末级的样式
					hit.next().addClass('tree-last-open').removeClass('tree-last-close');
				}else{
					hit.next().removeClass('tree-last-open').removeClass('tree-last-close');
				}
				if (opts.animate){
					subul.slideDown('normal', function(){
						opts.onExpand.call(target, node);
						if (callback) callback();
					});
				} else {
					subul.css('display','block');
					opts.onExpand.call(target, node);
					if (callback) callback();
				}
			});
		}
	}
	
	function collapseNode(target, nodeEl){
		var opts = $.data(target, 'tree').options;
		
		var hit = $(nodeEl).children('span.tree-hit');
		if (hit.length == 0) return;	// is a leaf node
		if (hit.hasClass('tree-collapsed')) return;	// has collapsed
		
		var node = getNode(target, nodeEl);
		if (opts.onBeforeCollapse.call(target, node) == false) return;
		
		hit.removeClass('tree-expanded tree-expanded-hover').addClass('tree-collapsed');
		hit.next().removeClass('tree-folder-open tree-last-open');
		var ul = $(nodeEl).next();
		if(!ul.length){
			//如果末级没有子节点，则添加末级样式
			hit.next().addClass('tree-last-close');
		}
		if (opts.animate){
			ul.slideUp('normal', function(){
				opts.onCollapse.call(target, node);
			});
		} else {
			ul.css('display','none');
			opts.onCollapse.call(target, node);
		}
	}
	
	function toggleNode(target, nodeEl){
		var hit = $(nodeEl).children('span.tree-hit');
		if (hit.length == 0) return;	// is a leaf node
		
		if (hit.hasClass('tree-expanded')){
			collapseNode(target, nodeEl);
		} else {
			expandNode(target, nodeEl);
		}
	}
	
	function expandAllNode(target, nodeEl){
		var nodes = getChildren(target, nodeEl);
		if (nodeEl){
			nodes.unshift(getNode(target, nodeEl));
		}
		for(var i=0; i<nodes.length; i++){
			expandNode(target, nodes[i].target);
		}
	}
	
	function expandToNode(target, nodeEl){
		var nodes = [];
		var p = getParentNode(target, nodeEl);
		while(p){
			nodes.unshift(p);
			p = getParentNode(target, p.target);
		}
		for(var i=0; i<nodes.length; i++){
			expandNode(target, nodes[i].target);
		}
	}
	
	function scrollToNode(target, nodeEl){
		var c = $(target).parent();
		while(c[0].tagName != 'BODY' && c.css('overflow-y') != 'auto'){
			c = c.parent();
		}
		var n = $(nodeEl);
		var ntop = n.offset().top;
		if (c[0].tagName != 'BODY'){
			var ctop = c.offset().top;
			if (ntop < ctop){
				c.scrollTop(c.scrollTop() + ntop - ctop);
			} else if (ntop + n.outerHeight() > ctop + c.outerHeight() - 18){
				c.scrollTop(c.scrollTop() + ntop + n.outerHeight() - ctop - c.outerHeight() + 18);
			}
		} else {
			c.scrollTop(ntop);
		}
	}
	
	function collapseAllNode(target, nodeEl){
		var nodes = getChildren(target, nodeEl);
		if (nodeEl){
			nodes.unshift(getNode(target, nodeEl));
		}
		for(var i=0; i<nodes.length; i++){
			collapseNode(target, nodes[i].target);
		}
	}
	
	/**
	 * get the first root node, if no root node exists, return null.
	 */
	function getRootNode(target){
		var roots = getRootNodes(target);
		if (roots.length){
			return roots[0];
		} else {
			return null;
		}
	}
	
	/**
	 * get the root nodes.
	 */
	function getRootNodes(target){
		var roots = [];
		$(target).children('li').each(function(){
			var node = $(this).children('div.tree-node');
			roots.push(getNode(target, node[0]));
		});
		return roots;
	}
	
	/**
	 * get all child nodes corresponding to specified node nodeEl: the node DOM
	 * element
	 */
	function getChildren(target, nodeEl){
		var nodes = [];
		if (nodeEl){
			getNodes($(nodeEl));
		} else {
			var roots = getRootNodes(target);
			for(var i=0; i<roots.length; i++){
				nodes.push(roots[i]);
				getNodes($(roots[i].target));
			}
		}
		function getNodes(node){
			node.next().find('div.tree-node').each(function(){
				nodes.push(getNode(target, this));
			});
		}
		return nodes;
	}
	
	/**
	 * get the parent node nodeEl: DOM object, from which to search it's parent
	 * node
	 */
	function getParentNode(target, nodeEl){
		var ul = $(nodeEl).parent().parent();
		if (ul[0] == target){
			return null;
		} else {
			return getNode(target, ul.prev()[0]);
		}
	}
	
	/**
	 * get the specified state nodes the state available values are:
	 * 'checked','unchecked','indeterminate', default is 'checked'.
	 */
	function getCheckedNode(target, state){
		state = state || 'checked';
		if (!$.isArray(state)){state = [state]}
		
		var selectors = [];
		for(var i=0; i<state.length; i++){
			var s = state[i];
			if (s == 'checked'){
				selectors.push('span.tree-checkbox1');
			} else if (s == 'unchecked'){
				selectors.push('span.tree-checkbox0');
			} else if (s == 'indeterminate'){
				selectors.push('span.tree-checkbox2');
			}
		}
// var selector = '';
// if (state == 'checked') {
// selector = 'span.tree-checkbox1';
// } else if (state == 'unchecked'){
// selector = 'span.tree-checkbox0';
// } else if (state == 'indeterminate'){
// selector = 'span.tree-checkbox2';
// }
		
		var nodes = [];
		$(target).find(selectors.join(',')).each(function(){
			var node = $(this).parent();
			nodes.push(getNode(target, node[0]));
		});
		return nodes;
	}
	
	/**
	 * Get the selected node data which contains following properties:
	 * id,text,attributes,target
	 */
	function getSelectedNode(target){
		var node = $(target).find('div.tree-node-selected');
		if (node.length){
			return getNode(target, node[0]);
		} else {
			return null;
		}
	}
	
	/**
	 * Append nodes to tree. The param parameter has two properties: 1 parent:
	 * DOM object, the parent node to append to. 2 data: array, the nodes data.
	 */
	function appendNodes(target, param){
		var node = $(param.parent);
		var data = param.data;
		if (!data){return}
		data = $.isArray(data) ? data : [data];
		if (!data.length){return}
		
		var ul;
		if (node.length == 0){
			ul = $(target);
			//在追加数据的时候，如果追加的parent是末级，则去掉末级的样式
			ul.prev().find('span.tree-icon').removeClass('tree-last-close tree-last-open');
		} else {
			// ensure the node is a folder node
			//在追加数据的时候，如果追加的parent是末级，则去掉末级的样式
			var nodeIcon = node.find('span.tree-icon');
			nodeIcon.removeClass('tree-last-close tree-last-open');
			if (isLeaf(target, node[0])){
				nodeIcon.removeClass('tree-file').addClass('tree-folder tree-folder-open');
				var hit = $('<span class="tree-hit tree-expanded"></span>').insertBefore(nodeIcon);
				if (hit.prev().length){
					hit.prev().remove();
				}
			}
			
			ul = node.next();
			if (!ul.length){
				ul = $('<ul></ul>').insertAfter(node);
			}
		}
		
		loadData(target, ul[0], data, true);
		
		adjustCheck(target, ul.prev());
	}
	
	/**
	 * insert node to before or after specified node param has the following
	 * properties: before: DOM object, the node to insert before after: DOM
	 * object, the node to insert after data: object, the node data
	 */
	function insertNode(target, param){
		var ref = param.before || param.after;
		var pnode = getParentNode(target, ref);
		var data = param.data;
		if (!data){return}
		data = $.isArray(data) ? data : [data];
		if (!data.length){return}
		
		appendNodes(target, {
			parent: (pnode ? pnode.target : null),
			data: data
		});
		
		var li = $();
		var last = pnode ? $(pnode.target).next().children('li:last') : $(target).children('li:last');
		for(var i=0; i<data.length; i++){
			li = last.add(li);
			last = last.prev();
		}
		
		if (param.before){
			li.insertBefore($(ref).parent());
		} else {
			li.insertAfter($(ref).parent());
		}
	}
	
	/**
	 * Remove node from tree. param: DOM object, indicate the node to be
	 * removed.
	 */
	function removeNode(target, nodeEl){
		var parent = getParentNode(target, nodeEl);
		var node = $(nodeEl);
		var li = node.parent();
		var ul = li.parent();
		li.remove();
		if (ul.children('li').length == 0){
			var node = ul.prev();
			node.find('.tree-icon').removeClass('tree-folder').addClass('tree-file');
			node.find('.tree-hit').remove();
			$('<span class="tree-indent"></span>').prependTo(node);
			if (ul[0] != target){
				ul.remove();
			}
		}
		if (parent){
			adjustCheck(target, parent.target);
		}
		
		showLines(target, target);
	}
	
	/**
	 * get specified node data, include its children data
	 */
	function getData(target, nodeEl){
		/**
		 * retrieve all children data which is stored in specified array
		 */
		function retrieveChildData(aa, ul){
			ul.children('li').each(function(){
				var node = $(this).children('div.tree-node');
				var nodedata = getNode(target, node[0]);
				var sub = $(this).children('ul');
				if (sub.length){
					nodedata.children = [];
// getData(nodedata.children, sub);
					retrieveChildData(nodedata.children, sub);
				}
				aa.push(nodedata);
			});
		}
		
		if (nodeEl){
			var nodedata = getNode(target, nodeEl);
			nodedata.children = [];
			retrieveChildData(nodedata.children, $(nodeEl).next());
			return nodedata;
		} else {
			return null;
		}
	}
	
	function updateNode(target, param){
		var opts = $.data(target, 'tree').options;
		var node = $(param.target);
		var oldData = getNode(target, param.target);
		if (oldData.iconCls){
			node.find('.tree-icon').removeClass(oldData.iconCls);
		}
		var data = $.extend({}, oldData, param);
		$.data(param.target, 'tree-node', data);
		
		node.attr('node-id', data.id);
		node.find('.tree-title').html(opts.formatter.call(target, data));
		if (data.iconCls){
			node.find('.tree-icon').addClass(data.iconCls);
		}
		if (oldData.checked != data.checked){
			checkNode(target, param.target, data.checked);
		}
	}
	
	/**
	 * get the specified node
	 */
	function getNode(target, nodeEl){
		var node = $.extend({}, $.data(nodeEl, 'tree-node'), {
			target: nodeEl,
			checked: $(nodeEl).find('.tree-checkbox').hasClass('tree-checkbox1')
		});
		if (!isLeaf(target, nodeEl)){
			node.state = $(nodeEl).find('.tree-hit').hasClass('tree-expanded') ? 'open' : 'closed';
		}
		return node;
	}
	
	function findNode(target, id){
		var node = $(target).find('div.tree-node[node-id="' + id + '"]');
		if (node.length){
			return getNode(target, node[0]);
		} else {
			return null;
		}
	}
	
	/**
	 * select the specified node. nodeEl: DOM object, indicate the node to be
	 * selected.
	 */
	function selectNode(target, nodeEl){
		var opts = $.data(target, 'tree').options;
		var node = getNode(target, nodeEl);
		
		if (opts.onBeforeSelect.call(target, node) == false) return;
		
		$('div.tree-node-selected', target).removeClass('tree-node-selected');
		$(nodeEl).addClass('tree-node-selected');
		opts.onSelect.call(target, node);
	}
	
	/**
	 * 取消选中树节点 2014-10-31冯超加
	 */
	function unselectNode(target,nodeE1){
		var opts = $.data(target, 'tree').options;
		var node = getNode(target, nodeE1);
		$('div.tree-node-selected', target).removeClass('tree-node-selected');
	}
	/**
	 * Check if the specified node is leaf. nodeEl: DOM object, indicate the
	 * node to be checked.
	 */
	function isLeaf(target, nodeEl){
		var node = $(nodeEl);
		var hit = node.children('span.tree-hit');
		return hit.length == 0;
	}
	
	function beginEdit(target, nodeEl){
		var opts = $.data(target, 'tree').options;
		var node = getNode(target, nodeEl);
		
		if (opts.onBeforeEdit.call(target, node) == false) return;
		
		$(nodeEl).css('position', 'relative');
		var nt = $(nodeEl).find('.tree-title');
		var width = nt.outerWidth();
		nt.empty();
		var editor = $('<input class="tree-editor">').appendTo(nt);
		editor.val(node.text).focus();
		editor.width(width + 20);
		editor.height(document.compatMode=='CSS1Compat' ? (18-(editor.outerHeight()-editor.height())) : 18);
		editor.bind('click', function(e){
			return false;
		}).bind('mousedown', function(e){
			e.stopPropagation();
		}).bind('mousemove', function(e){
			e.stopPropagation();
		}).bind('keydown', function(e){
			if (e.keyCode == 13){	// enter
				endEdit(target, nodeEl);
				return false;
			} else if (e.keyCode == 27){	// esc
				cancelEdit(target, nodeEl);
				return false;
			}
		}).bind('blur', function(e){
			e.stopPropagation();
			endEdit(target, nodeEl);
		});
	}
	
	function endEdit(target, nodeEl){
		var opts = $.data(target, 'tree').options;
		$(nodeEl).css('position', '');
		var editor = $(nodeEl).find('input.tree-editor');
		var val = editor.val();
		editor.remove();
		var node = getNode(target, nodeEl);
		node.text = val;
		updateNode(target, node);
		opts.onAfterEdit.call(target, node);
	}
	
	function cancelEdit(target, nodeEl){
		var opts = $.data(target, 'tree').options;
		$(nodeEl).css('position', '');
		$(nodeEl).find('input.tree-editor').remove();
		var node = getNode(target, nodeEl);
		updateNode(target, node);
		opts.onCancelEdit.call(target, node);
	}
	
	$.fn.tree = function(options, param){
		if (typeof options == 'string'){
			return $.fn.tree.methods[options](this, param);
		}
		
		var options = options || {};
		return this.each(function(){
			var state = $.data(this, 'tree');
			var opts;
			if (state){
				opts = $.extend(state.options, options);
				state.options = opts;
			} else {
				opts = $.extend({}, $.fn.tree.defaults, $.fn.tree.parseOptions(this), options);
				$.data(this, 'tree', {
					options: opts,
					tree: wrapTree(this)
				});
				var data = parseTreeData(this);
				if (data.length && !opts.data){
					opts.data = data
				}
// loadData(this, this, data);
			}
			bindTreeEvents(this);
			
			if (opts.lines){
				$(this).addClass('tree-lines');
			}
			
			if (opts.data){
				loadData(this, this, opts.data);
			} else {
				if (opts.dnd){
					enableDnd(this);
				} else {
					disableDnd(this);
				}
			}
// if (opts.url){
// }
			request(this, this);
		});
	};
	
	$.fn.tree.methods = {
		options: function(jq){
			return $.data(jq[0], 'tree').options;
		},
		loadData: function(jq, data){
			return jq.each(function(){
				loadData(this, this, data);
			});
		},
		getNode: function(jq, nodeEl){	// get the single node
			return getNode(jq[0], nodeEl);
		},
		getData: function(jq, nodeEl){	// get the specified node data, include
										// its children
			return getData(jq[0], nodeEl);
		},
		reload: function(jq, nodeEl){
			return jq.each(function(){
				if (nodeEl){
					var node = $(nodeEl);
					var hit = node.children('span.tree-hit');
					hit.removeClass('tree-expanded tree-expanded-hover').addClass('tree-collapsed');
					node.next().remove();
					expandNode(this, nodeEl);
				} else {
					$(this).empty();
					request(this, this);
				}
			});
		},
		getRoot: function(jq){
			return getRootNode(jq[0]);
		},
		getRoots: function(jq){
			return getRootNodes(jq[0]);
		},
		getParent: function(jq, nodeEl){
			return getParentNode(jq[0], nodeEl);
		},
		getChildren: function(jq, nodeEl){
			return getChildren(jq[0], nodeEl);
		},
		getChecked: function(jq, state){	// the state available values are:
											// 'checked','unchecked','indeterminate',
											// default is 'checked'.
			return getCheckedNode(jq[0], state);
		},
		getSelected: function(jq){
			return getSelectedNode(jq[0]);
		},
		isLeaf: function(jq, nodeEl){
			return isLeaf(jq[0], nodeEl);
		},
		find: function(jq, id){
			return findNode(jq[0], id);
		},
		select: function(jq, nodeEl){
			return jq.each(function(){
				selectNode(this, nodeEl);
			});
		},
		unselect:function(jq,nodeE1){
			return jq.each(function(){
				unselectNode(this,nodeE1);
			});
		},
		check: function(jq, nodeEl){
			return jq.each(function(){
				checkNode(this, nodeEl, true);
			});
		},
		uncheck: function(jq, nodeEl){
			return jq.each(function(){
				checkNode(this, nodeEl, false);
			});
		},
		collapse: function(jq, nodeEl){
			return jq.each(function(){
				collapseNode(this, nodeEl);
			});
		},
		expand: function(jq, nodeEl){
			return jq.each(function(){
				expandNode(this, nodeEl);
			});
		},
		collapseAll: function(jq, nodeEl){
			return jq.each(function(){
				collapseAllNode(this, nodeEl);
			});
		},
		expandAll: function(jq, nodeEl){
			return jq.each(function(){
				expandAllNode(this, nodeEl);
			});
		},
		expandTo: function(jq, nodeEl){
			return jq.each(function(){
				expandToNode(this, nodeEl);
			});
		},
		scrollTo: function(jq, nodeEl){
			return jq.each(function(){
				scrollToNode(this, nodeEl);
			});
		},
		toggle: function(jq, nodeEl){
			return jq.each(function(){
				toggleNode(this, nodeEl);
			});
		},
		append: function(jq, param){
			return jq.each(function(){
				appendNodes(this, param);
			});
		},
		insert: function(jq, param){
			return jq.each(function(){
				insertNode(this, param);
			});
		},
		remove: function(jq, nodeEl){
			return jq.each(function(){
				removeNode(this, nodeEl);
			});
		},
		pop: function(jq, nodeEl){
			var node = jq.tree('getData', nodeEl);
			jq.tree('remove', nodeEl);
			return node;
		},
		update: function(jq, param){
			return jq.each(function(){
				updateNode(this, param);
			});
		},
		enableDnd: function(jq){
			return jq.each(function(){
				enableDnd(this);
			});
		},
		disableDnd: function(jq){
			return jq.each(function(){
				disableDnd(this);
			});
		},
		beginEdit: function(jq, nodeEl){
			return jq.each(function(){
				beginEdit(this, nodeEl);
			});
		},
		endEdit: function(jq, nodeEl){
			return jq.each(function(){
				endEdit(this, nodeEl);
			});
		},
		cancelEdit: function(jq, nodeEl){
			return jq.each(function(){
				cancelEdit(this, nodeEl);
			});
		}
	};
	
	$.fn.tree.parseOptions = function(target){
		var t = $(target);
		return $.extend({}, $.parser.parseOptions(target, [
			'url','method',
			{checkbox:'boolean',cascadeCheck:'boolean',onlyLeafCheck:'boolean',
				parentCascade:'boolean',childCascade:'boolean'},
			{animate:'boolean',lines:'boolean',dnd:'boolean'}
		]));
	};
	
	$.fn.tree.defaults = {
		url: null,
		method: 'post',
		animate: false,
		checkbox: false,
		cascadeCheck: true,
		parentCascade:true,
		childCascade:true,
		onlyLeafCheck: false,
		lines: false,
		dnd: false,
		data: null,
		formatter: function(node){
			return node.text;
		},
		loader: function(param, success, error){
			var opts = $(this).tree('options');
			if (!opts.url) return false;
			$.ajax({
				type: opts.method,
				url: opts.url,
				data: param,
				dataType: 'json',
				success: function(data){
					success(data);
				},
				error: function(){
					error.apply(this, arguments);
				}
			});
		},
		loadFilter: function(data, parent){
			return data;
		},
		onBeforeLoad: function(node, param){},
		onLoadSuccess: function(node, data){},
		onLoadError: function(){},
		onClick: function(node){},	// node: id,text,checked,attributes,target
		onDblClick: function(node){},	// node:
										// id,text,checked,attributes,target
		onBeforeExpand: function(node){},
		onExpand: function(node){},
		onBeforeCollapse: function(node){},
		onCollapse: function(node){},
		onBeforeCheck: function(node, checked){},
		onCheck: function(node, checked){},
		onBeforeSelect: function(node){},
		onSelect: function(node){},
		onContextMenu: function(e, node){},
		onBeforeDrag: function(node){},	// return false to deny drag
		onStartDrag: function(node){},
		onStopDrag: function(node){},
		onDragEnter: function(target, source){},	// return false to deny drop
		onDragOver: function(target, source){},	// return false to deny drop
		onDragLeave: function(target, source){},
		onBeforeDrop: function(target, source, point){},
		onDrop: function(target, source, point){},	// point:'append','top','bottom'
		onBeforeEdit: function(node){},
		onAfterEdit: function(node){},
		onCancelEdit: function(node){}
	};
})(jQuery);
/**
 * progressbar - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php
 * 
 * Dependencies: none
 * 
 */
(function($){
	function init(target){
		$(target).addClass('progressbar');
		$(target).html('<div class="progressbar-text"></div><div class="progressbar-value"><div class="progressbar-text"></div></div>');
		return $(target);
	}
	
	function setSize(target,width){
		var opts = $.data(target, 'progressbar').options;
		var bar = $.data(target, 'progressbar').bar;
		if (width) opts.width = width;
		bar._outerWidth(opts.width)._outerHeight(opts.height);
		
		bar.find('div.progressbar-text').width(bar.width());
		bar.find('div.progressbar-text,div.progressbar-value').css({
			height: bar.height()+'px',
			lineHeight: bar.height()+'px'
		});
	}
	
	$.fn.progressbar = function(options, param){
		if (typeof options == 'string'){
			var method = $.fn.progressbar.methods[options];
			if (method){
				return method(this, param);
			}
		}
		
		options = options || {};
		return this.each(function(){
			var state = $.data(this, 'progressbar');
			if (state){
				$.extend(state.options, options);
			} else {
				state = $.data(this, 'progressbar', {
					options: $.extend({}, $.fn.progressbar.defaults, $.fn.progressbar.parseOptions(this), options),
					bar: init(this)
				});
			}
			$(this).progressbar('setValue', state.options.value);
			setSize(this);
		});
	};
	
	$.fn.progressbar.methods = {
		options: function(jq){
			return $.data(jq[0], 'progressbar').options;
		},
		resize: function(jq, width){
			return jq.each(function(){
				setSize(this, width);
			});
		},
		getValue: function(jq){
			return $.data(jq[0], 'progressbar').options.value;
		},
		setValue: function(jq, value){
			if (value < 0) value = 0;
			if (value > 100) value = 100;
			return jq.each(function(){
				var opts = $.data(this, 'progressbar').options;
				var text = opts.text.replace(/{value}/, value);
				var oldValue = opts.value;
				opts.value = value;
				$(this).find('div.progressbar-value').width(value+'%');
				$(this).find('div.progressbar-text').html(text);
				if (oldValue != value){
					opts.onChange.call(this, value, oldValue);
				}
			});
		}
	};
	
	$.fn.progressbar.parseOptions = function(target){
		return $.extend({}, $.parser.parseOptions(target, ['width','height','text',{value:'number'}]));
	};
	
	$.fn.progressbar.defaults = {
		width: 'auto',
		height: 22,
		value: 0,	// percentage value
		text: '{value}%',
		onChange:function(newValue,oldValue){}
	};
})(jQuery);
/**
 * tooltip - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php
 * 
 */
(function($){
	function init(target){
		$(target).addClass('tooltip-f');
	}
	
	function bindEvents(target){
		var opts = $.data(target, 'tooltip').options;
		$(target).unbind('.tooltip').bind(opts.showEvent+'.tooltip', function(e){
			showTip(target, e);
		}).bind(opts.hideEvent+'.tooltip', function(e){
			hideTip(target, e);
		}).bind('mousemove.tooltip', function(e){
			if (opts.trackMouse){
				opts.trackMouseX = e.pageX;
				opts.trackMouseY = e.pageY;
				reposition(target);
			}
		});
	}
	
	function clearTimeouts(target){
		var state = $.data(target, 'tooltip');
		if (state.showTimer){
			clearTimeout(state.showTimer);
			state.showTimer = null;
		}
		if (state.hideTimer){
			clearTimeout(state.hideTimer);
			state.hideTimer = null;
		}
	}
	
	function reposition(target){
		var state = $.data(target, 'tooltip');
		if (!state || !state.tip){return}
		var opts = state.options;
		var tip = state.tip;
		
		if (opts.trackMouse){
			t = $();
			var left = opts.trackMouseX + opts.deltaX;
			var top = opts.trackMouseY + opts.deltaY;
		} else {
			var t = $(target);
			var left = t.offset().left + opts.deltaX;
			var top = t.offset().top + opts.deltaY;
		}
		switch(opts.position){
		case 'right':
			left += t._outerWidth() + 12 + (opts.trackMouse?12:0);
			top -= (tip._outerHeight() - t._outerHeight()) / 2;
			break;
		case 'left':
			left -= tip._outerWidth() + 12 + (opts.trackMouse?12:0);
			top -= (tip._outerHeight() - t._outerHeight()) / 2;
			break;
		case 'top':
			left -= (tip._outerWidth() - t._outerWidth()) / 2;
			top -= tip._outerHeight() + 12 + (opts.trackMouse?12:0);
			break;
		case 'bottom':
			left -= (tip._outerWidth() - t._outerWidth()) / 2;
			top += t._outerHeight() + 12 + (opts.trackMouse?12:0);
			break;
		}
		tip.css({
			left: left,
			top: top,
			zIndex: (opts.zIndex!=undefined ? opts.zIndex : ($.fn.window ? $.fn.window.defaults.zIndex++ : ''))
		});
		opts.onPosition.call(target, left, top);
	}
	
	function showTip(target, e){
		var state = $.data(target, 'tooltip');
		var opts = state.options;
		var tip = state.tip;
		if (!tip){
			tip = $(
				'<div tabindex="-1" class="tooltip">' +
					'<div class="tooltip-content"></div>' +
					'<div class="tooltip-arrow-outer"></div>' +
					'<div class="tooltip-arrow"></div>' +
				'</div>'
			).appendTo('body');
			state.tip = tip;
			updateTip(target);
		}
		tip.removeClass('tooltip-top tooltip-bottom tooltip-left tooltip-right').addClass('tooltip-'+opts.position);
		
		clearTimeouts(target);
		
		state.showTimer = setTimeout(function(){
			reposition(target);
			tip.show();
			opts.onShow.call(target, e);
			
			var arrowOuter = tip.children('.tooltip-arrow-outer');
			var arrow = tip.children('.tooltip-arrow');
			var bc = 'border-'+opts.position+'-color';
			arrowOuter.add(arrow).css({
				borderTopColor:'',
				borderBottomColor:'',
				borderLeftColor:'',
				borderRightColor:''
			});
			arrowOuter.css(bc, tip.css(bc));
			arrow.css(bc, tip.css('backgroundColor'));
		}, opts.showDelay);
	}
	
	function hideTip(target, e){
		var state = $.data(target, 'tooltip');
		if (state && state.tip){
			clearTimeouts(target);
			state.hideTimer = setTimeout(function(){
				state.tip.hide();
				state.options.onHide.call(target, e);
			}, state.options.hideDelay);
		}
	}
	
	function updateTip(target, content){
		var state = $.data(target, 'tooltip');
		var opts = state.options;
		if (content){opts.content = content;}
		if (!state.tip){return;}
		
		var cc = typeof opts.content == 'function' ? opts.content.call(target) : opts.content;
		state.tip.children('.tooltip-content').html(cc);
		opts.onUpdate.call(target, cc);
	}
	
	function destroyTip(target){
		var state = $.data(target, 'tooltip');
		if (state){
			clearTimeouts(target);
			var opts = state.options;
			if (state.tip){state.tip.remove();}
			if (opts._title){
				$(target).attr('title', opts._title);
			}
			$.removeData(target, 'tooltip');
			$(target).unbind('.tooltip').removeClass('tooltip-f');
			opts.onDestroy.call(target);
		}
	}
	
	$.fn.tooltip = function(options, param){
		if (typeof options == 'string'){
			return $.fn.tooltip.methods[options](this, param);
		}
		options = options || {};
		return this.each(function(){
			var state = $.data(this, 'tooltip');
			if (state){
				$.extend(state.options, options);
			} else {
				$.data(this, 'tooltip', {
					options: $.extend({}, $.fn.tooltip.defaults, $.fn.tooltip.parseOptions(this), options)
				});
				init(this);
			}
			bindEvents(this);
			updateTip(this);
		});
	};
	
	$.fn.tooltip.methods = {
		options: function(jq){
			return $.data(jq[0], 'tooltip').options;
		},
		tip: function(jq){
			return $.data(jq[0], 'tooltip').tip||'';
		},
		arrow: function(jq){
			return jq.tooltip('tip').children('.tooltip-arrow-outer,.tooltip-arrow');
		},
		show: function(jq, e){
			return jq.each(function(){
				showTip(this, e);
			});
		},
		hide: function(jq, e){
			return jq.each(function(){
				hideTip(this, e);
			});
		},
		update: function(jq, content){
			return jq.each(function(){
				updateTip(this, content);
			});
		},
		reposition: function(jq){
			return jq.each(function(){
				reposition(this);
			});
		},
		destroy: function(jq){
			return jq.each(function(){
				destroyTip(this);
			});
		}
	};
	
	$.fn.tooltip.parseOptions = function(target){
		var t = $(target);
		var opts = $.extend({}, $.parser.parseOptions(target, [
			'position','showEvent','hideEvent','content',
			{deltaX:'number',deltaY:'number',showDelay:'number',hideDelay:'number'}
		]), {
			_title: t.attr('title')
		});
		t.attr('title', '');
		if (!opts.content){
			opts.content = opts._title;
		}
		return opts;
	};
	
	$.fn.tooltip.defaults = {
		position: 'bottom',	// possible values are:
							// 'left','right','top','bottom'
		content: null,
		trackMouse: false,
		deltaX: 0,
		deltaY: 0,
		showEvent: 'mouseenter',
		hideEvent: 'mouseleave',
		showDelay: 200,
		hideDelay: 100,
		
		onShow: function(e){},
		onHide: function(e){},
		onUpdate: function(content){},
		onPosition: function(left,top){},
		onDestroy: function(){}
	};
})(jQuery);


/**
 * panel - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php
 * 
 */
(function($){
	$.fn._remove = function(){
		return this.each(function(){
			$(this).remove();
			try{
				this.outerHTML = '';
			} catch(err){}
		});
	}
// function removeNode(node){
// node.each(function(){
// $(this).remove();
// if ($.browser.msie){
// this.outerHTML = '';
// }
// });
// }
	function removeNode(node){
		node._remove();
	}
	
	function setSize(target, param){
		var opts = $.data(target, 'panel').options;
		var panel = $.data(target, 'panel').panel;
		var pheader = panel.children('div.panel-header');
		var pbody = panel.children('div.panel-body');
		
		if (param){
			if (param.width) opts.width = param.width;
			if (param.height) opts.height = param.height;
			if (param.left != null) opts.left = param.left;
			if (param.top != null) opts.top = param.top;
		}
		
		opts.fit ? $.extend(opts, panel._fit()) : panel._fit(false);
// if (opts.fit == true){
// var p = panel.parent();
// p.addClass('panel-noscroll');
// if (p[0].tagName == 'BODY') $('html').addClass('panel-fit');
// opts.width = p.width();
// opts.height = p.height();
// }
		panel.css({
			left: opts.left,
			top: opts.top
		});
		
		if (!isNaN(opts.width)){
			panel._outerWidth(opts.width);
		} else {
			panel.width('auto');
		}
		pheader.add(pbody)._outerWidth(panel.width());
		
		if (!isNaN(opts.height)){
			panel._outerHeight(opts.height);
			pbody._outerHeight(panel.height() - pheader._outerHeight());
		} else {
			pbody.height('auto');
		}
		panel.css('height', '');
		
		opts.onResize.apply(target, [opts.width, opts.height]);
		
		panel.find('>div.panel-body>div').triggerHandler('_resize');
		//修改下拉框百分比的宽度
		setTimeout(function(){
			setComboSpinnerSize(panel);
		},100)
	}
	
	function setComboSpinnerSize(panel){
		panel.find('.combo-f').each(function(index){
			var opts = $.data(this, 'combo').options;
			if(opts.percentWidth&&opts.percentWidth!=''){
				var t = $(this);
				var combo = $.data(this,'combo').combo;
				combo.hide();
				t.show().css('width',opts.percentWidth);
				var width = t.width();
				t.hide();
				combo.show().width(width);
				combo.find('input:first').width(width-21);
				//如果下拉面板打开，则调整下拉面板的大小
				var panel = $.data(this, 'combo').panel;
				if ($.fn.window){
					if(panel.is('ul')){
						panel  = panel.parent();
					}
				}
				if(!panel.panel('options').closed){
					panel.panel('resize',{width:(opts.panelWidth ? opts.panelWidth : combo.outerWidth())})
				}
			}
		})
		panel.find('.spinner-f').each(function(index){
			var opts = $.data(this, 'spinner').options; 
			if(opts.percentWidth&&opts.percentWidth!=''){
				$(this).spinner('resize',opts.percentWidth);
			}
		});
	}
	
	function movePanel(target, param){
		var opts = $.data(target, 'panel').options;
		var panel = $.data(target, 'panel').panel;
		if (param){
			if (param.left != null) opts.left = param.left;
			if (param.top != null) opts.top = param.top;
		}
		var width = opts.width;
		var heigth = opts.height;
		
		if(width != 'auto'){
			if(typeof width == 'string'){ //'300' or '300px'
				if(width.indexOf('px') < 0){ //'300'
					width = eval(width);
				}
			}
		}
		if(heigth != 'auto'){
			if(typeof heigth == 'string'){ //'300' or '300px'
				if(heigth.indexOf('px') < 0){ //'300'
					heigth = eval(heigth);
				}
			}
		}
		var clientWidth = document.body.clientWidth;
		var clientHeight = document.body.clientHeight;
		if (param){
			if (param.left != null) opts.left = param.left;
			if (param.top != null) opts.top = param.top;
		}
		//超出上边界
		if( opts.top < 0){
			opts.top = 0;
		}
		//超出左边界
		if(opts.left < 0){
			opts.left = 0;
		}
		
		
		//超出右边界
		if(typeof width != 'string' && width < clientWidth){
			if(width + opts.left >  clientWidth){
				opts.left = clientWidth - width;
			}
		}
		//查处下边界
		if(typeof heigth != 'string' &&  heigth < clientHeight){
			if(heigth + opts.top > clientHeight){
				opts.top = clientHeight - heigth;
			}
		}
		panel.css({
			left: opts.left,
			top: opts.top
		});
		opts.onMove.apply(target, [opts.left, opts.top]);
	}
	
	function wrapPanel(target){
		$(target).addClass('panel-body');
		var panel = $('<div class="panel"></div>').insertBefore(target);
		panel[0].appendChild(target);
// var panel = $(target).addClass('panel-body').wrap('<div
// class="panel"></div>').parent();
		panel.bind('_resize', function(){
			var opts = $.data(target, 'panel').options;
			if (opts.fit == true){
				setSize(target);
			}
			return false;
		});
		
		return panel;
	}
	
	function addHeader(target){
		var opts = $.data(target, 'panel').options;
		var panel = $.data(target, 'panel').panel;
		if (opts.tools && typeof opts.tools == 'string'){
			panel.find('>div.panel-header>div.panel-tool .panel-tool-a').appendTo(opts.tools);
		}
		removeNode(panel.children('div.panel-header'));
		if (opts.title && !opts.noheader){
			var panel_title_width = opts.width;
			if(panel_title_width == "string"){
				panel_title_width = panel_title_width.substring(0,panel_title_width.indexOf('px'));
			}
			var header = $('<div class="panel-header"><div class="panel-title" style="width:'+panel_title_width*0.9+'px">'+opts.title+'</div></div>').prependTo(panel);
			if (opts.iconCls){
				header.find('.panel-title').addClass('panel-with-icon');
				$('<div class="panel-icon"></div>').addClass(opts.iconCls).appendTo(header);
			}
			var tool = $('<div class="panel-tool"></div>').appendTo(header);
			tool.bind('click', function(e){
				e.stopPropagation();
			});
			if (opts.tools){
				if (typeof opts.tools == 'string'){
					$(opts.tools).children().each(function(){
						$(this).addClass($(this).attr('iconCls')).addClass('panel-tool-a').appendTo(tool);
					});
				} else {
					for(var i=0; i<opts.tools.length; i++){
						var t = $('<a href="javascript:void(0)"></a>').addClass(opts.tools[i].iconCls).appendTo(tool);
						if (opts.tools[i].handler){
							t.bind('click', eval(opts.tools[i].handler));
						}
					}
				}
			}
			if (opts.collapsible){
				$('<a class="panel-tool-collapse" href="javascript:void(0)"></a>').appendTo(tool).bind('click', function(){
					if (opts.collapsed == true){
						expandPanel(target, true);
					} else {
						collapsePanel(target, true);
					}
					return false;
				});
			}
			if (opts.minimizable){
				$('<a class="panel-tool-min" href="javascript:void(0)"></a>').appendTo(tool).bind('click', function(){
					minimizePanel(target);
					return false;
				});
			}
			if (opts.maximizable){
				$('<a class="panel-tool-max" href="javascript:void(0)"></a>').appendTo(tool).bind('click', function(){
					if (opts.maximized == true){
						restorePanel(target);
					} else {
						maximizePanel(target);
					}
					return false;
				});
			}
			if (opts.closable){
				$('<a class="panel-tool-close" href="javascript:void(0)"></a>').appendTo(tool).bind('click',function(){
					closePanel(target);
					return false;
				});
			}
			panel.children('div.panel-body').removeClass('panel-body-noheader');
		} else {
			panel.children('div.panel-body').addClass('panel-body-noheader');
		}
	}
	
	/**
	 * load content from remote site if the href attribute is defined
	 */
	function loadData(target){
		var state = $.data(target, 'panel');
		var opts = state.options;
		if (opts.href){
			if (!state.isLoaded || !opts.cache){
				if (opts.onBeforeLoad.call(target) == false){return}
				state.isLoaded = false;
				clearOuter(target);
				if (opts.loadingMessage){
					$(target).html($('<div class="panel-loading"></div>').html(opts.loadingMessage));
				}
				$.ajax({
					url:opts.href,
					cache:false,
					dataType:'html',
					success:function(data){
						_load(opts.extractor.call(target, data));
						opts.onLoad.apply(target, arguments);
						state.isLoaded = true;
					}
				});
			}
		} else if (opts.content){
			if (!state.isLoaded){
				clearOuter(target);
				_load(opts.content);
				state.isLoaded = true;
			}
		}
		function _load(content){
			$(target).html(content);
			if ($.parser){
				$.parser.parse($(target));
			}
		}
	}
	
	/**
	 * clear objects that placed outer of panel
	 */
	function clearOuter(target){
		var t = $(target);
		t.find('.combo-f').each(function(){
			$(this).combo('destroy');
		});
		t.find('.m-btn').each(function(){
			$(this).menubutton('destroy');
		});
		t.find('.s-btn').each(function(){
			$(this).splitbutton('destroy');
		});
		t.find('.tooltip-f').tooltip('destroy');
	}
	
	function doLayout(target){
		$(target).find('div.panel:visible,div.accordion:visible,div.tabs-container:visible,div.layout:visible').each(function(){
			$(this).triggerHandler('_resize', [true]);
		});
	}
	
	function openPanel(target, forceOpen){
		var opts = $.data(target, 'panel').options;
		var panel = $.data(target, 'panel').panel;
		
		if (forceOpen != true){
			if (opts.onBeforeOpen.call(target) == false) return;
		}
		panel.show();
		opts.closed = false;
		opts.minimized = false;
		var tool = panel.children('div.panel-header').find('a.panel-tool-restore');
		if (tool.length){
			opts.maximized = true;
		}
		opts.onOpen.call(target);
		
		if (opts.maximized == true) {
			opts.maximized = false;
			maximizePanel(target);
		}
		if (opts.collapsed == true) {
			opts.collapsed = false;
			collapsePanel(target);
		}
		
		if (!opts.collapsed){
			loadData(target);
			doLayout(target);
		}
	}
	
	function closePanel(target, forceClose){
		var opts = $.data(target, 'panel').options;
		var panel = $.data(target, 'panel').panel;
		
		if (forceClose != true){
			if (opts.onBeforeClose.call(target) == false) return;
		}
		panel._fit(false);
		panel.hide();
		opts.closed = true;
		opts.onClose.call(target);
	}
	
	function destroyPanel(target, forceDestroy){
		var opts = $.data(target, 'panel').options;
		var panel = $.data(target, 'panel').panel;
		
		if (forceDestroy != true){
			if (opts.onBeforeDestroy.call(target) == false) return;
		}
		clearOuter(target);
		removeNode(panel);
		opts.onDestroy.call(target);
	}
	
	function collapsePanel(target, animate){
	//在panel对象隐藏后，combo类型应该隐藏其下拉panel.Start on 2014.12.21
		var t = $(target);
		t.find('.combo-f').each(function(){
			$(this).combo('hidePanel');
		});
		//END 
		var opts = $.data(target, 'panel').options;
		var panel = $.data(target, 'panel').panel;
		var body = panel.children('div.panel-body');
		var tool = panel.children('div.panel-header').find('a.panel-tool-collapse');
		
		if (opts.collapsed == true) return;
		
		body.stop(true, true);	// stop animation
		if (opts.onBeforeCollapse.call(target) == false) return;
		
		tool.addClass('panel-tool-expand');
		if (animate == true){
			body.slideUp('normal', function(){
				opts.collapsed = true;
				opts.onCollapse.call(target);
			});
		} else {
			body.hide();
			opts.collapsed = true;
			opts.onCollapse.call(target);
		}
	}
	
	function expandPanel(target, animate){
		var opts = $.data(target, 'panel').options;
		var panel = $.data(target, 'panel').panel;
		var body = panel.children('div.panel-body');
		var tool = panel.children('div.panel-header').find('a.panel-tool-collapse');
		
		if (opts.collapsed == false) return;
		
		body.stop(true, true);	// stop animation
		if (opts.onBeforeExpand.call(target) == false) return;
		
		tool.removeClass('panel-tool-expand');
		if (animate == true){
			body.slideDown('normal', function(){
				opts.collapsed = false;
				opts.onExpand.call(target);
				loadData(target);
				doLayout(target);
			});
		} else {
			body.show();
			opts.collapsed = false;
			opts.onExpand.call(target);
			loadData(target);
			doLayout(target);
		}
	}
	
	function maximizePanel(target){
		var opts = $.data(target, 'panel').options;
		var panel = $.data(target, 'panel').panel;
		var tool = panel.children('div.panel-header').find('a.panel-tool-max');
		
		if (opts.maximized == true) return;
		
		tool.addClass('panel-tool-restore');
		
		if (!$.data(target, 'panel').original){
			$.data(target, 'panel').original = {
				width: opts.width,
				height: opts.height,
				left: opts.left,
				top: opts.top,
				fit: opts.fit
			};
		}
		opts.left = 0;
		opts.top = 0;
		opts.fit = true;
		setSize(target);
		opts.minimized = false;
		opts.maximized = true;
		opts.onMaximize.call(target);
	}
	
	function minimizePanel(target){
		var opts = $.data(target, 'panel').options;
		var panel = $.data(target, 'panel').panel;
		panel._fit(false);
		panel.hide();
		opts.minimized = true;
		opts.maximized = false;
		opts.onMinimize.call(target);
	}
	
	function restorePanel(target){
		var opts = $.data(target, 'panel').options;
		var panel = $.data(target, 'panel').panel;
		var tool = panel.children('div.panel-header').find('a.panel-tool-max');
		
		if (opts.maximized == false) return;
		
		panel.show();
		tool.removeClass('panel-tool-restore');
		$.extend(opts, $.data(target, 'panel').original);
// var original = $.data(target, 'panel').original;
// opts.width = original.width;
// opts.height = original.height;
// opts.left = original.left;
// opts.top = original.top;
// opts.fit = original.fit;
		setSize(target);
		opts.minimized = false;
		opts.maximized = false;
		$.data(target, 'panel').original = null;
		opts.onRestore.call(target);
	}
	
	function setProperties(target){
		var opts = $.data(target, 'panel').options;
		var panel = $.data(target, 'panel').panel;
		var header = $(target).panel('header');
		var body = $(target).panel('body');
		
		panel.css(opts.style);
		panel.addClass(opts.cls);
		
		if (opts.border){
			header.removeClass('panel-header-noborder');
			body.removeClass('panel-body-noborder');
		} else {
			header.addClass('panel-header-noborder');
			body.addClass('panel-body-noborder');
		}
		header.addClass(opts.headerCls);
		body.addClass(opts.bodyCls);
		
		if (opts.id){
			$(target).attr('id', opts.id);
		} else {
// $(target).removeAttr('id');
			$(target).attr('id', '');
		}
	}
	
	function setTitle(target, title){
		$.data(target, 'panel').options.title = title;
		$(target).panel('header').find('div.panel-title').html(title);
	}
	
	var TO = false;
	var canResize = true;
	$(window).unbind('.panel').bind('resize.panel', function(){
		if (!canResize) return;
		if (TO !== false){
			clearTimeout(TO);
		}
		TO = setTimeout(function(){
			canResize = false;
			var layout = $('body.layout');
			if (layout.length){
				layout.layout('resize');
			} else {
				$('body').children('div.panel,div.accordion,div.tabs-container,div.layout').triggerHandler('_resize');
			}
			canResize = true;
			TO = false;
		}, 200);
	});
	
	$.fn.panel = function(options, param){
		if (typeof options == 'string'){
			return $.fn.panel.methods[options](this, param);
		}
		
		options = options || {};
		return this.each(function(){
			var state = $.data(this, 'panel');
			var opts;
			if (state){
				opts = $.extend(state.options, options);
				state.isLoaded = false;
			} else {
				opts = $.extend({}, $.fn.panel.defaults, $.fn.panel.parseOptions(this), options);
				$(this).attr('title', '');
				state = $.data(this, 'panel', {
					options: opts,
					panel: wrapPanel(this),
					isLoaded: false
				});
			}
			
// if (opts.content){
// $(this).html(opts.content);
// if ($.parser){
// $.parser.parse(this);
// }
// }
			
			addHeader(this);
			setProperties(this);
			
			if (opts.doSize == true){
				state.panel.css('display','block');
				setSize(this);
			}
			if (opts.closed == true || opts.minimized == true){
				state.panel.hide();
			} else {
				openPanel(this);
			}
		});
	};
	
	$.fn.panel.methods = {
		options: function(jq){
			return $.data(jq[0], 'panel').options;
		},
		panel: function(jq){
			return $.data(jq[0], 'panel').panel;
		},
		header: function(jq){
			return $.data(jq[0], 'panel').panel.find('>div.panel-header');
		},
		body: function(jq){
			return $.data(jq[0], 'panel').panel.find('>div.panel-body');
		},
		setTitle: function(jq, title){
			return jq.each(function(){
				setTitle(this, title);
			});
		},
		open: function(jq, forceOpen){
			return jq.each(function(){
				openPanel(this, forceOpen);
			});
		},
		close: function(jq, forceClose){
			return jq.each(function(){
				closePanel(this, forceClose);
			});
		},
		destroy: function(jq, forceDestroy){
			return jq.each(function(){
				destroyPanel(this, forceDestroy);
			});
		},
		refresh: function(jq, href){
			return jq.each(function(){
				$.data(this, 'panel').isLoaded = false;
				if (href){
					$.data(this, 'panel').options.href = href;
				}
				loadData(this);
			});
		},
		resize: function(jq, param){
			return jq.each(function(){
				setSize(this, param);
			});
		},
		move: function(jq, param){
			return jq.each(function(){
				movePanel(this, param);
			});
		},
		maximize: function(jq){
			return jq.each(function(){
				maximizePanel(this);
			});
		},
		minimize: function(jq){
			return jq.each(function(){
				minimizePanel(this);
			});
		},
		restore: function(jq){
			return jq.each(function(){
				restorePanel(this);
			});
		},
		collapse: function(jq, animate){
			return jq.each(function(){
				collapsePanel(this, animate);
			});
		},
		expand: function(jq, animate){
			return jq.each(function(){
				expandPanel(this, animate);
			});
		}
	};
	
	$.fn.panel.parseOptions = function(target){
		var t = $(target);
		return $.extend({}, $.parser.parseOptions(target, ['id','width','height','left','top',
		        'title','iconCls','cls','headerCls','bodyCls','tools','href',
		        {cache:'boolean',fit:'boolean',border:'boolean',noheader:'boolean'},
		        {collapsible:'boolean',minimizable:'boolean',maximizable:'boolean'},
		        {closable:'boolean',collapsed:'boolean',minimized:'boolean',maximized:'boolean',closed:'boolean'}
		]), {
			loadingMessage: (t.attr('loadingMessage')!=undefined ? t.attr('loadingMessage') : undefined)
		});
// return {
// id: t.attr('id'),
// width: (parseInt(target.style.width) || undefined),
// height: (parseInt(target.style.height) || undefined),
// left: (parseInt(target.style.left) || undefined),
// top: (parseInt(target.style.top) || undefined),
// title: (t.attr('title') || undefined),
// iconCls: (t.attr('iconCls') || t.attr('icon')),
// cls: t.attr('cls'),
// headerCls: t.attr('headerCls'),
// bodyCls: t.attr('bodyCls'),
// tools: t.attr('tools'),
// href: t.attr('href'),
// loadingMessage: (t.attr('loadingMessage')!=undefined ?
// t.attr('loadingMessage') : undefined),
// cache: (t.attr('cache') ? t.attr('cache') == 'true' : undefined),
// fit: (t.attr('fit') ? t.attr('fit') == 'true' : undefined),
// border: (t.attr('border') ? t.attr('border') == 'true' : undefined),
// noheader: (t.attr('noheader') ? t.attr('noheader') == 'true' : undefined),
// collapsible: (t.attr('collapsible') ? t.attr('collapsible') == 'true' :
// undefined),
// minimizable: (t.attr('minimizable') ? t.attr('minimizable') == 'true' :
// undefined),
// maximizable: (t.attr('maximizable') ? t.attr('maximizable') == 'true' :
// undefined),
// closable: (t.attr('closable') ? t.attr('closable') == 'true' : undefined),
// collapsed: (t.attr('collapsed') ? t.attr('collapsed') == 'true' : undefined),
// minimized: (t.attr('minimized') ? t.attr('minimized') == 'true' : undefined),
// maximized: (t.attr('maximized') ? t.attr('maximized') == 'true' : undefined),
// closed: (t.attr('closed') ? t.attr('closed') == 'true' : undefined)
// }
	};
	
	$.fn.panel.defaults = {
		id: null,
		title: null,
		iconCls: null,
		width: 'auto',
		height: 'auto',
		left: null,
		top: null,
		cls: null,
		headerCls: null,
		bodyCls: null,
		style: {},
		href: null,
		cache: true,
		fit: false,
		border: true,
		doSize: true,	// true to set size and do layout
		noheader: false,
		content: null,	// the body content if specified
		
		collapsible: false,
		minimizable: false,
		maximizable: false,
		closable: false,
		collapsed: false,
		minimized: false,
		maximized: false,
		closed: false,
		
		// custom tools, every tool can contain two properties: iconCls and
		// handler
		// iconCls is a icon CSS class
		// handler is a function, which will be run when tool button is clicked
		tools: null,	
		
		href: null,
		loadingMessage: 'Loading...',
		extractor: function(data){	// define how to extract the content from
									// ajax response, return extracted data
			var pattern = /<body[^>]*>((.|[\n\r])*)<\/body>/im;
			var matches = pattern.exec(data);
			if (matches){
				return matches[1];	// only extract body content
			} else {
				return data;
			}
		},
		
		onBeforeLoad: function(){},
		onLoad: function(){},
		onBeforeOpen: function(){},
		onOpen: function(){},
		onBeforeClose: function(){},
		onClose: function(){},
		onBeforeDestroy: function(){},
		onDestroy: function(){},
		onResize: function(width,height){},
		onMove: function(left,top){},
		onMaximize: function(){},
		onRestore: function(){},
		onMinimize: function(){},
		onBeforeCollapse: function(){},
		onBeforeExpand: function(){},
		onCollapse: function(){},
		onExpand: function(){}
	};
})(jQuery);
/**
 * window - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php
 * 
 * Dependencies: panel draggable resizable
 * 
 */
(function($){
	function setSize(target, param){
		var opts = $.data(target, 'window').options;
		if (param){
			if (param.width) opts.width = param.width;
			if (param.height) opts.height = param.height;
			if (param.left != null) opts.left = param.left;
			if (param.top != null) opts.top = param.top;
		}
		$(target).panel('resize', opts);
	}
	
	function moveWindow(target, param){
		var state = $.data(target, 'window');
		if (param){
			if (param.left != null) state.options.left = param.left;
			if (param.top != null) state.options.top = param.top;
		}
		$(target).panel('move', state.options);
		if (state.shadow){
			state.shadow.css({
				left: state.options.left,
				top: state.options.top
			});
		}
	}
	
	/**
	 * center the window only horizontally
	 */
	function hcenter(target, tomove){
		var state = $.data(target, 'window');
		var opts = state.options;
		var width = opts.width;
		if (isNaN(width)){
			width = state.window._outerWidth();
		}
		if (opts.inline){
			var parent = state.window.parent();
			opts.left = (parent.width() - width) / 2 + parent.scrollLeft();
		} else {
			opts.left = ($(window)._outerWidth() - width) / 2 + $(document).scrollLeft();
		}
		if (tomove){moveWindow(target);}
	}
	
	/**
	 * center the window only vertically
	 */
	function vcenter(target, tomove){
		var state = $.data(target, 'window');
		var opts = state.options;
		var height = opts.height;
		if (isNaN(height)){
			height = state.window._outerHeight();
		}
		if (opts.inline){
			var parent = state.window.parent();
			opts.top = (parent.height() - height) / 2 + parent.scrollTop();
		} else {
			opts.top = ($(window)._outerHeight() - height) / 2 + $(document).scrollTop();
		}
		if (tomove){moveWindow(target);}
	}
	
	function create(target){
		var state = $.data(target, 'window');
		var win = $(target).panel($.extend({}, state.options, {
			border: false,
			doSize: true,	// size the panel, the property undefined in window
							// component
			closed: true,	// close the panel
			cls: 'window',
			headerCls: 'window-header',
			bodyCls: 'window-body ' + (state.options.noheader ? 'window-body-noheader' : ''),
			
			onBeforeDestroy: function(){
				if (state.options.onBeforeDestroy.call(target) == false) return false;
				if (state.shadow) state.shadow.remove();
				if (state.mask) state.mask.remove();
			},
			onClose: function(){
				if (state.shadow) state.shadow.hide();
				if (state.mask) state.mask.hide();
				
				state.options.onClose.call(target);
			},
			onOpen: function(){
				if (state.mask){
					state.mask.css({
						display:'block',
						zIndex: $.fn.window.defaults.zIndex++
					});
				}
				if (state.shadow){
					state.shadow.css({
						display:'block',
						zIndex: $.fn.window.defaults.zIndex++,
						left: state.options.left,
						top: state.options.top,
						width: state.window._outerWidth(),
						height: state.window._outerHeight()
					});
				}
				state.window.css('z-index', $.fn.window.defaults.zIndex++);
				
				state.options.onOpen.call(target);
			},
			onResize: function(width, height){
				var opts = $(this).panel('options');
				$.extend(state.options, {
					width: opts.width,
					height: opts.height,
					left: opts.left,
					top: opts.top
				});
				if (state.shadow){
					state.shadow.css({
						left: state.options.left,
						top: state.options.top,
						width: state.window._outerWidth(),
						height: state.window._outerHeight()
					});
				}
				
				state.options.onResize.call(target, width, height);
			},
			onMinimize: function(){
				if (state.shadow) state.shadow.hide();
				if (state.mask) state.mask.hide();
				
				state.options.onMinimize.call(target);
			},
			onBeforeCollapse: function(){
				if (state.options.onBeforeCollapse.call(target) == false) return false;
				if (state.shadow) state.shadow.hide();
			},
			onExpand: function(){
				if (state.shadow) state.shadow.show();
				state.options.onExpand.call(target);
			}
		}));
		
		state.window = win.panel('panel');
		
		// create mask
		if (state.mask) state.mask.remove();
		if (state.options.modal == true){
			state.mask = $('<div class="window-mask"></div>').insertAfter(state.window);
			state.mask.css({
				width: (state.options.inline ? state.mask.parent().width() : getPageArea().width),
				height: (state.options.inline ? state.mask.parent().height() : getPageArea().height),
				display: 'none'
			});
		}
		
		// create shadow
		if (state.shadow) state.shadow.remove();
		if (state.options.shadow == true){
			state.shadow = $('<div class="window-shadow"></div>').insertAfter(state.window);
			state.shadow.css({
				display: 'none'
			});
		}
		
		// if require center the window
		if (state.options.left == null){hcenter(target);}
		if (state.options.top == null){vcenter(target);}
		moveWindow(target);
		
		if (state.options.closed == false){
			win.window('open');	// open the window
		}
	}
	
	
	/**
	 * set window drag and resize property
	 */
	function setProperties(target){
		var state = $.data(target, 'window');
		
		state.window.draggable({
			handle: '>div.panel-header>div.panel-title',
			disabled: state.options.draggable == false,
			onStartDrag: function(e){
				if (state.mask) state.mask.css('z-index', $.fn.window.defaults.zIndex++);
				if (state.shadow) state.shadow.css('z-index', $.fn.window.defaults.zIndex++);
				state.window.css('z-index', $.fn.window.defaults.zIndex++);
				
				if (!state.proxy){
					state.proxy = $('<div class="window-proxy"></div>').insertAfter(state.window);
				}
				state.proxy.css({
					display:'none',
					zIndex: $.fn.window.defaults.zIndex++,
					left: e.data.left,
					top: e.data.top
				});
				state.proxy._outerWidth(state.window._outerWidth());
				state.proxy._outerHeight(state.window._outerHeight());
				setTimeout(function(){
					if (state.proxy) state.proxy.show();
				}, 500);
			},
			onDrag: function(e){
				state.proxy.css({
					display:'block',
					left: e.data.left,
					top: e.data.top
				});
				return false;
			},
			onStopDrag: function(e){
				state.options.left = e.data.left;
				state.options.top = e.data.top;
				$(target).window('move');
				state.proxy.remove();
				state.proxy = null;
			}
		});
		
		state.window.resizable({
			disabled: state.options.resizable == false,
			onStartResize:function(e){
				state.pmask = $('<div class="window-proxy-mask"></div>').insertAfter(state.window);
				state.pmask.css({
					zIndex: $.fn.window.defaults.zIndex++,
					left: e.data.left,
					top: e.data.top,
					width: state.window._outerWidth(),
					height: state.window._outerHeight()
				});
				if (!state.proxy){
					state.proxy = $('<div class="window-proxy"></div>').insertAfter(state.window);
				}
				state.proxy.css({
					zIndex: $.fn.window.defaults.zIndex++,
					left: e.data.left,
					top: e.data.top
				});
				state.proxy._outerWidth(e.data.width);
				state.proxy._outerHeight(e.data.height);
			},
			onResize: function(e){
				state.proxy.css({
					left: e.data.left,
					top: e.data.top
				});
				state.proxy._outerWidth(e.data.width);
				state.proxy._outerHeight(e.data.height);
				return false;
			},
			onStopResize: function(e){
				$.extend(state.options, {
					left: e.data.left,
					top: e.data.top,
					width: e.data.width,
					height: e.data.height
				});
				setSize(target);
				state.pmask.remove();
				state.pmask = null;
				state.proxy.remove();
				state.proxy = null;
			}
		});
	}
	
	function getPageArea() {
		if (document.compatMode == 'BackCompat') {
			return {
				width: Math.max(document.body.scrollWidth, document.body.clientWidth),
				height: Math.max(document.body.scrollHeight, document.body.clientHeight)
			}
		} else {
			return {
				width: Math.max(document.documentElement.scrollWidth, document.documentElement.clientWidth),
				height: Math.max(document.documentElement.scrollHeight, document.documentElement.clientHeight)
			}
		}
	}
	
	// when window resize, reset the width and height of the window's mask
	$(window).resize(function(){
		$('body>div.window-mask').css({
			width: $(window)._outerWidth(),
			height: $(window)._outerHeight()
		});
		setTimeout(function(){
			$('body>div.window-mask').css({
				width: getPageArea().width,
				height: getPageArea().height
			});
		}, 50);
	});
	
	$.fn.window = function(options, param){
		if (typeof options == 'string'){
			var method = $.fn.window.methods[options];
			if (method){
				return method(this, param);
			} else {
				return this.panel(options, param);
			}
		}
		
		options = options || {};
		return this.each(function(){
			var state = $.data(this, 'window');
			if (state){
				$.extend(state.options, options);
			} else {
				state = $.data(this, 'window', {
					options: $.extend({}, $.fn.window.defaults, $.fn.window.parseOptions(this), options)
				});
				if (!state.options.inline){
// $(this).appendTo('body');
					document.body.appendChild(this);
				}
			}
			create(this);
			setProperties(this);
		});
	};
	
	$.fn.window.methods = {
		options: function(jq){
			var popts = jq.panel('options');
			var wopts = $.data(jq[0], 'window').options;
			return $.extend(wopts, {
				closed: popts.closed,
				collapsed: popts.collapsed,
				minimized: popts.minimized,
				maximized: popts.maximized
			});
		},
		window: function(jq){
			return $.data(jq[0], 'window').window;
		},
		resize: function(jq, param){
			return jq.each(function(){
				setSize(this, param);
			});
		},
		move: function(jq, param){
			return jq.each(function(){
				moveWindow(this, param);
			});
		},
		hcenter: function(jq){
			return jq.each(function(){
				hcenter(this, true);
			});
		},
		vcenter: function(jq){
			return jq.each(function(){
				vcenter(this, true);
			});
		},
		center: function(jq){
			return jq.each(function(){
				hcenter(this);
				vcenter(this);
				moveWindow(this);
			});
		},
		open: function(jq){
			var opts = $.data(jq[0], 'window').options;
			if(opts.initOffset){
				if(!opts.offset){
					opts.offset = {
						left:opts.left,
						top:opts.top
					}
				}
				jq.window('move',opts.offset);
			}
			return jq.panel('open')
		}
	};
	
	$.fn.window.parseOptions = function(target){
		return $.extend({}, $.fn.panel.parseOptions(target), $.parser.parseOptions(target, [
			{draggable:'boolean',resizable:'boolean',shadow:'boolean',modal:'boolean',inline:'boolean'}
		]));
	};
	
	// Inherited from $.fn.panel.defaults
	$.fn.window.defaults = $.extend({}, $.fn.panel.defaults, {
		zIndex: 9000,
		initOffset: true,
		draggable: true,
		resizable: true,
		shadow: true,
		modal: false,
		inline: false,	// true to stay inside its parent, false to go on top of
						// all elements
		
		// window's property which difference from panel
		title: 'New Window',
		collapsible: true,
		minimizable: true,
		maximizable: true,
		closable: true,
		closed: false
	});
})(jQuery);
/**
 * dialog - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php
 * 
 * Dependencies: window linkbutton
 * 
 */
(function($){
	/**
	 * wrap dialog and return content panel.
	 */
	function wrapDialog(target){
		var cp = document.createElement('div');
		while(target.firstChild){
			cp.appendChild(target.firstChild);
		}
		target.appendChild(cp);
		
		var contentPanel = $(cp);
		contentPanel.attr('style', $(target).attr('style'));
		$(target).removeAttr('style').css('overflow', 'hidden');
		contentPanel.panel({
			border:false,
			doSize:false,
			bodyCls:'dialog-content'
		});
		return contentPanel;
	}
	
	/**
	 * build the dialog
	 */
	function buildDialog(target){
		var opts = $.data(target, 'dialog').options;
		var contentPanel = $.data(target, 'dialog').contentPanel;
		
		if (opts.toolbar){
			if ($.isArray(opts.toolbar)){
				$(target).find('div.dialog-toolbar').remove();
				var toolbar = $('<div class="dialog-toolbar"><table cellspacing="0" cellpadding="0"><tr></tr></table></div>').prependTo(target);
				var tr = toolbar.find('tr');
				for(var i=0; i<opts.toolbar.length; i++){
					var btn = opts.toolbar[i];
					if (btn == '-'){
						$('<td><div class="dialog-tool-separator"></div></td>').appendTo(tr);
					} else {
						var td = $('<td></td>').appendTo(tr);
						var tool = $('<a href="javascript:void(0)"></a>').appendTo(td);
						tool[0].onclick = eval(btn.handler || function(){});
						tool.linkbutton($.extend({}, btn, {
							plain:true
						}));
					}
				}
			} else {
				$(opts.toolbar).addClass('dialog-toolbar').prependTo(target);
				$(opts.toolbar).show();
			}
		} else {
			$(target).find('div.dialog-toolbar').remove();
		}
		
		if (opts.buttons){
			if ($.isArray(opts.buttons)){
				$(target).find('div.dialog-button').remove();
				var buttons = $('<div class="dialog-button"></div>').appendTo(target);
				for(var i=0; i<opts.buttons.length; i++){
					var p = opts.buttons[i];
					var button = $('<a href="javascript:void(0)"></a>').appendTo(buttons);
					if (p.handler) button[0].onclick = p.handler;
					button.linkbutton(p);
				}
			} else {
				$(opts.buttons).addClass('dialog-button').appendTo(target);
				$(opts.buttons).show();
			}
		} else {
			$(target).find('div.dialog-button').remove();
		}
		
		var tmpHref = opts.href;
		var tmpContent = opts.content;
		opts.href = null;
		opts.content = null;
		
		contentPanel.panel({
			closed: opts.closed,
			cache: opts.cache,
			href: tmpHref,
			content: tmpContent,
			onLoad: function(){
				if (opts.height == 'auto'){
					$(target).window('resize');
				}
				opts.onLoad.apply(target, arguments);
			}
		});
		
		$(target).window($.extend({}, opts, {
			onOpen:function(){
				if (contentPanel.panel('options').closed){
					contentPanel.panel('open');
				}
				if (opts.onOpen) opts.onOpen.call(target);
			},
			onResize:function(width, height){
				var wbody = $(target);
				contentPanel.panel('panel').show();
				contentPanel.panel('resize', {
					width: wbody.width(),
					height: (height=='auto') ? 'auto' :
						wbody.height()
						- wbody.children('div.dialog-toolbar')._outerHeight()
						- wbody.children('div.dialog-button')._outerHeight()
				});
				
				if (opts.onResize) opts.onResize.call(target, width, height);
			}
		}));
		
		opts.href = tmpHref;
		opts.content = tmpContent;
	}
	
	function refresh(target, href){
		var contentPanel = $.data(target, 'dialog').contentPanel;
		contentPanel.panel('refresh', href);
	}
	
	$.fn.dialog = function(options, param){
		if (typeof options == 'string'){
			var method = $.fn.dialog.methods[options];
			if (method){
				return method(this, param);
			} else {
				return this.window(options, param);
			}
		}
		
		options = options || {};
		return this.each(function(){
			var state = $.data(this, 'dialog');
			if (state){
				$.extend(state.options, options);
			} else {
				$.data(this, 'dialog', {
					options: $.extend({}, $.fn.dialog.defaults, $.fn.dialog.parseOptions(this), options),
					contentPanel: wrapDialog(this)
				});
			}
			buildDialog(this);
		});
	};
	
	$.fn.dialog.methods = {
		options: function(jq){
			var dopts = $.data(jq[0], 'dialog').options;
			var popts = jq.panel('options');
			$.extend(dopts, {
				closed: popts.closed,
				collapsed: popts.collapsed,
				minimized: popts.minimized,
				maximized: popts.maximized
			});
			var contentPanel = $.data(jq[0], 'dialog').contentPanel;
			
			return dopts;
		},
		dialog: function(jq){
			return jq.window('window');
		},
		refresh: function(jq, href){
			return jq.each(function(){
				refresh(this, href);
			});
		}
	};
	
	$.fn.dialog.parseOptions = function(target){
		return $.extend({}, $.fn.window.parseOptions(target), $.parser.parseOptions(target,['toolbar','buttons']));
	};
	
	// Inherited from $.fn.window.defaults.
	$.fn.dialog.defaults = $.extend({}, $.fn.window.defaults, {
		title: 'New Dialog',
		collapsible: false,
		minimizable: false,
		maximizable: false,
		resizable: false,
		
		toolbar:null,
		buttons:null
	});
})(jQuery);
/**
 * messager - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php
 * 
 * Dependencies: linkbutton window progressbar
 */
(function($){
	
	/**
	 * show window with animate, after sometime close the window
	 */
	function show(el, type, speed, timeout){
		var win = $(el).window('window');
		if (!win) return;
		
		switch(type){
		case null:
			win.show();
			break;
		case 'slide':
			win.slideDown(speed);
			break;
		case 'fade':
			win.fadeIn(speed);
			break;
		case 'show':
			win.show(speed);
			break;
		}
		
		var timer = null;
		if (timeout > 0){
			timer = setTimeout(function(){
				hide(el, type, speed);
			}, timeout);
		}
		win.hover(
				function(){
					if (timer){
						clearTimeout(timer);
					}
				},
				function(){
					if (timeout > 0){
						timer = setTimeout(function(){
							hide(el, type, speed);
						}, timeout);
					}
				}
		)
		
	}
	
	/**
	 * hide window with animate
	 */
	function hide(el, type, speed){
		if (el.locked == true) return;
		el.locked = true;
		
		var win = $(el).window('window');
		if (!win) return;
		
		switch(type){
		case null:
			win.hide();
			break;
		case 'slide':
			win.slideUp(speed);
			break;
		case 'fade':
			win.fadeOut(speed);
			break;
		case 'show':
			win.hide(speed);
			break;
		}
		
		setTimeout(function(){
			$(el).window('destroy');
		}, speed);
	}
	
	/**
	 * create the message window
	 */
	function createWindow(options){
		var opts = $.extend({}, $.fn.window.defaults, {
			collapsible: false,
			minimizable: false,
			maximizable: false,
			shadow: false,
			draggable: false,
			resizable: false,
			closed: true,
			left:'',
			top:'',
			// set the message window to the right bottom position
			style:{
				left: null,
				top: null,
				right: 0,
				zIndex: $.fn.window.defaults.zIndex++,
				bottom: -document.body.scrollTop-document.documentElement.scrollTop
			},
			onBeforeOpen: function(){
				show(this, opts.showType, opts.showSpeed, opts.timeout);
				return false;
			},
			onBeforeClose: function(){
				hide(this, opts.showType, opts.showSpeed);
				return false;
			}
		}, {
			title: '',
			width: 250,
			height: 100,
// width: 'auto',/*update 2014.3.23; 250 update auto*/
// height: 100,
			showType: 'slide',
			showSpeed: 600,
			msg: '',
			timeout: 4000
		}, options);
		opts.style.zIndex = $.fn.window.defaults.zIndex++;
		
		var win = $('<div class="messager-body"></div>').html(opts.msg).appendTo('body');
		win.window(opts);
		win.window('window').css(opts.style);
		win.window('open');
		return win;
	}
	
	/**
	 * create a dialog, when dialog is closed destroy it
	 */
	function createDialog(title, content, buttons){
		var win = $('<div class="messager-body"></div>').appendTo('body');
		win.append(content);
		if (buttons){
			var tb = $('<div class="messager-button"></div>').appendTo(win);
			for(var label in buttons){
				$('<a></a>').attr('href', 'javascript:void(0)').text(label)
							.css('margin-left', 10)
							.bind('click', eval(buttons[label]))
							.appendTo(tb).linkbutton();
			}
		}
		win.window({
			title: title,
			noheader: (title?false:true),
			width: 300,
			height: 'auto',
// width: 'auto',/*update 2014.3.23; 300 update auto*/
// height: 'auto',
			modal: true,
			collapsible: false,
			minimizable: false,
			maximizable: false,
			resizable: false,
			onClose: function(){
				//setTimeout(function(){
					win.window('destroy');
				//}, 100);
			}
		});
		win.window('window').addClass('messager-window');
		win.children('div.messager-button').children('a:first').focus();
		return win;
	}
	
	$.messager = {
		show: function(options){
			return createWindow(options);
		},
		
		alert: function(title, msg, icon, fn) {
			var content = '<div>' + msg + '</div>';
			switch(icon) {
				case 'error':
					content = '<div class="messager-icon messager-error"></div>' + content;
					break;
				case 'info':
					content = '<div class="messager-icon messager-info"></div>' + content;
					break;
				case 'question':
					content = '<div class="messager-icon messager-question"></div>' + content;
					break;
				case 'warning':
					content = '<div class="messager-icon messager-warning"></div>' + content;
					break;
			}
			content += '<div style="clear:both;"/>';
			
			var buttons = {};
			buttons[$.messager.defaults.ok] = function(){
				win.window('close');
				if (fn){
					fn();
					return false;
				}
			};
			var win = createDialog(title,content,buttons);
			return win;
		},
		
		confirm: function(title, msg, fn) {
			var content = '<div class="messager-icon messager-question"></div>'
					+ '<div>' + msg + '</div>'
					+ '<div style="clear:both;"/>';
			var buttons = {};
			buttons[$.messager.defaults.ok] = function(){
				win.window('close');
				if (fn){
					fn(true);
					return false;
				}
			};
			buttons[$.messager.defaults.cancel] = function(){
				win.window('close');
				if (fn){
					fn(false);
					return false;
				}
			};
			var win = createDialog(title,content,buttons);
			return win;
		},
		
		prompt: function(title, msg, fn) {
			//2014-11-04冯超，添加prompt支持combobox,numberbox,validatebox,datebox,datetimebox
			var showmsg = msg;
			var isobject = typeof msg =='object';
			if(msg!=null&&isobject){
				showmsg = msg.msg;
			}
			var content = '<div class="messager-icon messager-question"></div>'
						+ '<div>' + showmsg + '</div>'
						+ '<br/>'
						+ '<div style="clear:both;"/>'
						+ '<div style="text-align:center;"><form><input class="messager-input" name="_msg" type="text" style="width:220px;"/></form></div>';
			var buttons = {};
			buttons[$.messager.defaults.ok] = function(){
				if(msg.options&&msg.options.required){
					if(!$('form', win).form('validate')){
						return false;
					}
				}
				win.window('close');
				if (fn){
					var value = $('.messager-input', win).val();
					if(isobject){
						if(msg.roles&&$.inArray(msg.roles,['combobox','datebox','datetimebox'])!=-1){
							value = $('.messager-input', win).combo('getValue');
						}
						if(msg.roles&&msg.roles=='numberbox'){
							value = $('.messager-input', win).numberbox('getValue');
						}
					}
					fn(value);
					return false;
				}
			};
			buttons[$.messager.defaults.cancel] = function(){
				win.window('close');
				if (fn){
					fn();
					return false;
				}
			};
			var win = createDialog(title,content,buttons);
			if(msg!=null&&isobject){
				if(msg.roles){
					var options = {};
					if(msg.options){
						options = msg.options;
					}
					if($.inArray(msg.roles,['validatebox','combobox','numberbox','datetimebox','datebox'])!=-1){
						win.find('input.messager-input')[msg.roles](options);
					}
				}
			}
			win.children('input.messager-input').focus();
			return win;
		},
		
		progress: function(options){
			var methods = {
				bar: function(){	// get the progress bar object
					return $('body>div.messager-window').find('div.messager-p-bar');
				},
				close: function(){	// close the progress window
					var win = $('body>div.messager-window>div.messager-body:has(div.messager-progress)');
					if (win.length){
						win.window('close');
					}
				}
			};
			
			if (typeof options == 'string'){
				var method = methods[options];
				return method();
			}
			
			var opts = $.extend({
				title: '',
				msg: '',	// The message box body text
				text: undefined,	// The text to display in the progress bar
				interval: 300	// The length of time in milliseconds between
								// each progress update
			}, options||{});
			
			var content = '<div class="messager-progress"><div class="messager-p-msg"></div><div class="messager-p-bar"></div></div>';
			var win = createDialog(opts.title, content, null);
			win.find('div.messager-p-msg').html(opts.msg);
			var bar = win.find('div.messager-p-bar');
			bar.progressbar({
				text: opts.text
			});
			win.window({
				closable:false,
				onClose:function(){
					if (this.timer){
						clearInterval(this.timer);
					}
					$(this).window('destroy');
				}
			});
			
			if (opts.interval){
				win[0].timer = setInterval(function(){
					var v = bar.progressbar('getValue');
					v += 10;
					if (v > 100) v = 0;
					bar.progressbar('setValue', v);
				}, opts.interval);
			}
			return win;
		}
	};
	
	$.messager.defaults = {
		ok: 'Ok',
		cancel: 'Cancel'
	};
	
})(jQuery);
/**
 * accordion - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php
 * 
 * Dependencies: panel
 * 
 */
(function($){
	
	function setSize(container){
		var state = $.data(container, 'accordion');
		var opts = state.options;
		var panels = state.panels;
		
		var cc = $(container);
		opts.fit ? $.extend(opts, cc._fit()) : cc._fit(false);
		
		if (opts.width > 0){
			cc._outerWidth(opts.width);
		}
		var panelHeight = 'auto';
		if (opts.height > 0){
			cc._outerHeight(opts.height);
			// get the first panel's header height as all the header height
			var headerHeight = panels.length ? panels[0].panel('header').css('height', '')._outerHeight() : 'auto';
			var panelHeight = cc.height() - (panels.length-1)*headerHeight;
		}
		for(var i=0; i<panels.length; i++){
			var panel = panels[i];
			panel.panel('header')._outerHeight(headerHeight);
			panel.panel('resize', {
				width: cc.width(),
				height: panelHeight
			});
		}
	}
	
	/**
	 * get the current panel
	 */
	function getCurrent(container){
		var panels = $.data(container, 'accordion').panels;
		for(var i=0; i<panels.length; i++){
			var panel = panels[i];
			if (panel.panel('options').collapsed == false){
				return panel;
			}
		}
		return null;
	}
	
	/**
	 * get panel index, start with 0
	 */
	function getPanelIndex(container, panel){
		var panels = $.data(container, 'accordion').panels;
		for(var i=0; i<panels.length; i++){
			if (panels[i][0] == $(panel)[0]){
				return i;
			}
		}
		return -1;
	}
	
	/**
	 * get the specified panel, remove it from panel array if removeit setted to
	 * true.
	 */
	function getPanel(container, which, removeit){
		var panels = $.data(container, 'accordion').panels;
		if (typeof which == 'number'){
			if (which < 0 || which >= panels.length){
				return null;
			} else {
				var panel = panels[which];
				if (removeit){
					panels.splice(which,1);
				}
				return panel;
			}
		}
		for(var i=0; i<panels.length; i++){
			var panel = panels[i];
			if (panel.panel('options').title == which){
				if (removeit){
					panels.splice(i, 1);
				}
				return panel;
			}
		}
		return null;
	}
	
	function setProperties(container){
		var opts = $.data(container, 'accordion').options;
		var cc = $(container);
		if (opts.border){
			cc.removeClass('accordion-noborder');
		} else {
			cc.addClass('accordion-noborder');
		}
	}
	
	function wrapAccordion(container){
		var cc = $(container);
		cc.addClass('accordion');
		
		var panels = [];
		cc.children('div').each(function(){
			var opts = $.extend({}, $.parser.parseOptions(this), {
				selected: ($(this).attr('selected') ? true : undefined)
			});
			var pp = $(this);
			panels.push(pp);
			createPanel(container, pp, opts);
		});
		
		cc.bind('_resize', function(e,force){
			var opts = $.data(container, 'accordion').options;
			if (opts.fit == true || force){
				setSize(container);
			}
			return false;
		});
		
		return {
			accordion: cc,
			panels: panels
		}
	}
	
	function createPanel(container, pp, options){
		pp.panel($.extend({}, options, {
			collapsible: false,
			minimizable: false,
			maximizable: false,
			closable: false,
			doSize: false,
			collapsed: true,
			headerCls: 'accordion-header',
			bodyCls: 'accordion-body',
			onBeforeExpand: function(){
				if (options.onBeforeExpand){
					if (options.onBeforeExpand.call(this) == false){return false}
				}
				var curr = getCurrent(container);
				if (curr){
					var header = $(curr).panel('header');
					header.removeClass('accordion-header-selected');
					header.find('.accordion-collapse').triggerHandler('click');
				}
				var header = pp.panel('header');
				header.addClass('accordion-header-selected');
				header.find('.accordion-collapse').removeClass('accordion-expand');
			},
			onExpand: function(){
				if (options.onExpand){options.onExpand.call(this)}
				var opts = $.data(container, 'accordion').options;
				opts.onSelect.call(container, pp.panel('options').title, getPanelIndex(container, this));
				var curr = getCurrent(container);
		        if (curr){curr.css('overflow','auto');}
			},
			onBeforeCollapse: function(){
				if (options.onBeforeCollapse){
					if (options.onBeforeCollapse.call(this) == false){return false}
				}
				var header = pp.panel('header');
				header.removeClass('accordion-header-selected');
				header.find('.accordion-collapse').addClass('accordion-expand');
			}
		}));
		
		var header = pp.panel('header');
		var t = $('<a class="accordion-collapse accordion-expand" href="javascript:void(0)"></a>').appendTo(header.children('div.panel-tool'));
		t.bind('click', function(e){
			var animate = $.data(container, 'accordion').options.animate;
			stopAnimate(container);
			if (pp.panel('options').collapsed){
				pp.panel('expand', animate);
			} else {
				pp.panel('collapse', animate);
			}
			return false;
		});
		
		header.click(function(){
			$(this).find('.accordion-collapse').triggerHandler('click');
			return false;
		});
	}
	
	/**
	 * select and set the specified panel active
	 */
	function select(container, which){
		var panel = getPanel(container, which);
		if (!panel) return;
		
		var curr = getCurrent(container);
		if (curr && curr[0] == panel[0]){
			return;
		}
		
		panel.panel('header').triggerHandler('click');
	}
	
	function doFirstSelect(container){
		var panels = $.data(container, 'accordion').panels;
		for(var i=0; i<panels.length; i++){
			if (panels[i].panel('options').selected){
				_select(i);
				return;
			}
		}
		if (panels.length){
			_select(0);
		}
		
		function _select(index){
			var opts = $.data(container, 'accordion').options;
			var animate = opts.animate;
			opts.animate = false;
			select(container, index);
			opts.animate = animate;
		}
	}
	
	/**
	 * stop the animation of all panels
	 */
	function stopAnimate(container){
		var panels = $.data(container, 'accordion').panels;
		for(var i=0; i<panels.length; i++){
			panels[i].stop(true,true);
		}
	}
	
	function add(container, options){
		var state = $.data(container, 'accordion');
		var opts = state.options;
		var panels = state.panels;
		if (options.selected == undefined) options.selected = true;

		stopAnimate(container);
		
		var pp = $('<div></div>').appendTo(container);
		panels.push(pp);
		createPanel(container, pp, options);
		setSize(container);
		
		opts.onAdd.call(container, options.title, panels.length-1);
		
		if (options.selected){
			select(container, panels.length-1);
		}
	}
	
	function remove(container, which){
		var state = $.data(container, 'accordion');
		var opts = state.options;
		var panels = state.panels;
		
		stopAnimate(container);
		
		var panel = getPanel(container, which);
		var title = panel.panel('options').title;
		var index = getPanelIndex(container, panel);
		
		if (opts.onBeforeRemove.call(container, title, index) == false) return;
		
		var panel = getPanel(container, which, true);
		if (panel){
			panel.panel('destroy');
			if (panels.length){
				setSize(container);
				var curr = getCurrent(container);
				if (!curr){
					select(container, 0);
				}
			}
		}
		
		opts.onRemove.call(container, title, index);
	}
	
	function removeAll(container){
		var state = $.data(container, 'accordion');
		var opts = state.options;
		var panels = state.panels;
		stopAnimate(container);
		for ( var i = panels.length; i >= 0; i--) {
			var panel = getPanel(container, i, true);
			if (panel){
				panel.panel('destroy');
				if (panels.length){
					setSize(container);
				}
			}
		}
	}
	
	$.fn.accordion = function(options, param){
		if (typeof options == 'string'){
			return $.fn.accordion.methods[options](this, param);
		}
		
		options = options || {};
		
		return this.each(function(){
			var state = $.data(this, 'accordion');
			var opts;
			if (state){
				opts = $.extend(state.options, options);
				state.opts = opts;
			} else {
				opts = $.extend({}, $.fn.accordion.defaults, $.fn.accordion.parseOptions(this), options);
				var r = wrapAccordion(this);
				$.data(this, 'accordion', {
					options: opts,
					accordion: r.accordion,
					panels: r.panels
				});
			}
			
			setProperties(this);
			setSize(this);
			doFirstSelect(this);
		});
	};
	
	$.fn.accordion.methods = {
		options: function(jq){
			return $.data(jq[0], 'accordion').options;
		},
		panels: function(jq){
			return $.data(jq[0], 'accordion').panels;
		},
		resize: function(jq){
			return jq.each(function(){
				setSize(this);
			});
		},
		getSelected: function(jq){
			return getCurrent(jq[0]);
		},
		getPanel: function(jq, which){
			return getPanel(jq[0], which);
		},
		getPanelIndex: function(jq, panel){
			return getPanelIndex(jq[0], panel);
		},
		select: function(jq, which){
			return jq.each(function(){
				select(this, which);
			});
		},
		add: function(jq, options){
			return jq.each(function(){
				add(this, options);
			});
		},
		remove: function(jq, which){
			return jq.each(function(){
				remove(this, which);
			});
		},
		removeAll: function(jq){
			return jq.each(function(){
				removeAll(this);
			});
		}
	};
	
	$.fn.accordion.parseOptions = function(target){
		var t = $(target);
		return $.extend({}, $.parser.parseOptions(target, [
			'width','height',{fit:'boolean',border:'boolean',animate:'boolean'}
		]));
	};
	
	$.fn.accordion.defaults = {
		width: 'auto',
		height: 'auto',
		fit: false,
		border: true,
		animate: true,
		
		onSelect: function(title, index){},
		onAdd: function(title, index){},
		onBeforeRemove: function(title, index){},
		onRemove: function(title, index){}
	};
})(jQuery);

/**
 * tabs - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php
 * 
 * Dependencies: panel linkbutton
 * 
 */
(function($){
	
	/**
	 * set the tabs scrollers to show or not, dependent on the tabs count and
	 * width
	 */
	function setScrollers(container) {
		var opts = $.data(container, 'tabs').options;
		if (opts.tabPosition == 'left' || opts.tabPosition == 'right'){return}
		
		var header = $(container).children('div.tabs-header');
		var tool = header.children('div.tabs-tool');
		var sLeft = header.children('div.tabs-scroller-left');
		var sRight = header.children('div.tabs-scroller-right');
		var wrap = header.children('div.tabs-wrap');
		
		// set the tool height
		var tHeight = header.outerHeight();
		if (opts.plain){
			tHeight -= tHeight - header.height();
		}
		tool._outerHeight(tHeight);
		
		var tabsWidth = 0;
		$('ul.tabs li', header).each(function(){
			tabsWidth += $(this).outerWidth(true);
		});
		var cWidth = header.width() - tool._outerWidth();
		
		if (tabsWidth > cWidth) {
			sLeft.add(sRight).show()._outerHeight(tHeight);
			if (opts.toolPosition == 'left'){
				tool.css({
					left: sLeft.outerWidth(),
					right: ''
				});
				wrap.css({
					marginLeft: sLeft.outerWidth() + tool._outerWidth(),
					marginRight: sRight._outerWidth(),
					width: cWidth - sLeft.outerWidth() - sRight.outerWidth()
				});
			} else {
				tool.css({
					left: '',
					right: sRight.outerWidth()
				});
				wrap.css({
					marginLeft: sLeft.outerWidth(),
					marginRight: sRight.outerWidth() + tool._outerWidth(),
					width: cWidth - sLeft.outerWidth() - sRight.outerWidth()
				});
			}
		} else {
			sLeft.add(sRight).hide();
			if (opts.toolPosition == 'left'){
				tool.css({
					left: 0,
					right: ''
				});
				wrap.css({
					marginLeft: tool._outerWidth(),
					marginRight: 0,
					width: cWidth
				});
			} else {
				tool.css({
					left: '',
					right: 0
				});
				wrap.css({
					marginLeft: 0,
					marginRight: tool._outerWidth(),
					width: cWidth
				});
			}
		}
	}
	
	function addTools(container){
		var opts = $.data(container, 'tabs').options;
		var header = $(container).children('div.tabs-header');
		if (opts.tools) {
			if (typeof opts.tools == 'string'){
				$(opts.tools).addClass('tabs-tool').appendTo(header);
				$(opts.tools).show();
			} else {
				header.children('div.tabs-tool').remove();
				var tools = $('<div class="tabs-tool"><table cellspacing="0" cellpadding="0" style="height:100%"><tr></tr></table></div>').appendTo(header);
				var tr = tools.find('tr');
				for(var i=0; i<opts.tools.length; i++){
					var td = $('<td></td>').appendTo(tr);
					var tool = $('<a href="javascript:void(0);"></a>').appendTo(td);
					tool[0].onclick = eval(opts.tools[i].handler || function(){});
					tool.linkbutton($.extend({}, opts.tools[i], {
						plain: true
					}));
				}
			}
		} else {
			header.children('div.tabs-tool').remove();
		}
	}
	
	function setSize(container) {
		var state = $.data(container, 'tabs');
		var opts = state.options;
		var cc = $(container);
		
		opts.fit ? $.extend(opts, cc._fit()) : cc._fit(false);
		cc.width(opts.width).height(opts.height);
		
		var header = $(container).children('div.tabs-header');
		var panels = $(container).children('div.tabs-panels');
		var wrap = header.find('div.tabs-wrap');
		var ul = wrap.find('.tabs');
		
		for(var i=0; i<state.tabs.length; i++){
			var p_opts = state.tabs[i].panel('options');
			var p_t = p_opts.tab.find('a.tabs-inner');
			var width = parseInt(p_opts.tabWidth || opts.tabWidth) || undefined;
			if (width){
				p_t._outerWidth(width);
			} else {
				p_t.css('width', '');
			}
			p_t._outerHeight(opts.tabHeight);
			p_t.css('lineHeight', p_t.height()+'px');
		}
		if (opts.tabPosition == 'left' || opts.tabPosition == 'right'){
			header._outerWidth(opts.headerWidth);
			panels._outerWidth(cc.width() - opts.headerWidth);
			header.add(panels)._outerHeight(opts.height);
			wrap._outerWidth(header.width());
			ul._outerWidth(wrap.width()).css('height','');
		} else {
			header._outerWidth(opts.width).css('height','');
			ul._outerHeight(opts.tabHeight).css('width','');
			
			setScrollers(container);
			
			var height = opts.height;
			if (!isNaN(height)) {
				panels._outerHeight(height - header.outerHeight());
			} else {
				panels.height('auto');
			}
			var width = opts.width;
			if (!isNaN(width)){
				panels._outerWidth(width);
			} else {
				panels.width('auto');
			}
		}
	}
	
	/**
	 * set selected tab panel size
	 */
	function setSelectedSize(container){
		var opts = $.data(container, 'tabs').options;
		var tab = getSelectedTab(container);
		if (tab){
			var panels = $(container).children('div.tabs-panels');
			var width = opts.width=='auto' ? 'auto' : panels.width();
			var height = opts.height=='auto' ? 'auto' : panels.height();
			tab.panel('resize', {
				width: width,
				height: height
			});
		}
	}
	
	/**
	 * wrap the tabs header and body
	 */
	function wrapTabs(container) {
		var tabs = $.data(container, 'tabs').tabs;
		var cc = $(container);
		cc.addClass('tabs-container');
		var pp = $('<div class="tabs-panels"></div>').insertBefore(cc);
		cc.children('div').each(function(){
			pp[0].appendChild(this);
		});
		cc[0].appendChild(pp[0]);
// cc.wrapInner('<div class="tabs-panels"/>');
		$('<div class="tabs-header">'
				+ '<div class="tabs-scroller-left"></div>'
				+ '<div class="tabs-scroller-right"></div>'
				+ '<div class="tabs-wrap">'
				+ '<ul class="tabs"></ul>'
				+ '</div>'
				+ '</div>').prependTo(container);
		
		cc.children('div.tabs-panels').children('div').each(function(i){
			var opts = $.extend({}, $.parser.parseOptions(this), {
				selected: ($(this).attr('selected') ? true : undefined)
			});
			var pp = $(this);
			tabs.push(pp);
			createTab(container, pp, opts);
		});
		
		cc.children('div.tabs-header').find('.tabs-scroller-left, .tabs-scroller-right').hover(
				function(){$(this).addClass('tabs-scroller-over');},
				function(){$(this).removeClass('tabs-scroller-over');}
		);
		cc.bind('_resize', function(e,force){
			var opts = $.data(container, 'tabs').options;
			if (opts.fit == true || force){
				setSize(container);
				setSelectedSize(container);
			}
			return false;
		});
	}
	
	function bindEvents(container){
		var opts = $.data(container, 'tabs').options;
		$(container).children('div.tabs-header').unbind().bind('click', function(e){
			if ($(e.target).hasClass('tabs-scroller-left')){
				$(container).tabs('scrollBy', -opts.scrollIncrement);
			} else if ($(e.target).hasClass('tabs-scroller-right')){
				$(container).tabs('scrollBy', opts.scrollIncrement);
			} else {
				var li = $(e.target).closest('li');
				if (li.hasClass('tabs-disabled')){return;}
				var a = $(e.target).closest('a.tabs-close');
				if (a.length){
					closeTab(container, getLiIndex(li));
				} else if (li.length){
					selectTab(container, getLiIndex(li));
				}
			}
		}).bind('contextmenu', function(e){
			var li = $(e.target).closest('li');
			if (li.hasClass('tabs-disabled')){return;}
			if (li.length){
				opts.onContextMenu.call(container, e, li.find('span.tabs-title').html(), getLiIndex(li));
			}
		});
		
		function getLiIndex(li){
			var index = 0;
			li.parent().children('li').each(function(i){
				if (li[0] == this){
					index = i;
					return false;
				}
			});
			return index;
		}
	}
	
	function setProperties(container){
		var opts = $.data(container, 'tabs').options;
		var header = $(container).children('div.tabs-header');
		var panels = $(container).children('div.tabs-panels');
		
		header.removeClass('tabs-header-top tabs-header-bottom tabs-header-left tabs-header-right');
		panels.removeClass('tabs-panels-top tabs-panels-bottom tabs-panels-left tabs-panels-right');
		if (opts.tabPosition == 'top'){
			header.insertBefore(panels);
		} else if (opts.tabPosition == 'bottom'){
			header.insertAfter(panels);
			header.addClass('tabs-header-bottom');
			panels.addClass('tabs-panels-top');
		} else if (opts.tabPosition == 'left'){
			header.addClass('tabs-header-left');
			panels.addClass('tabs-panels-right');
		} else if (opts.tabPosition == 'right'){
			header.addClass('tabs-header-right');
			panels.addClass('tabs-panels-left');
		}
		
		if (opts.plain == true) {
			header.addClass('tabs-header-plain');
		} else {
			header.removeClass('tabs-header-plain');
		}
		if (opts.border == true){
			header.removeClass('tabs-header-noborder');
			panels.removeClass('tabs-panels-noborder');
		} else {
			header.addClass('tabs-header-noborder');
			panels.addClass('tabs-panels-noborder');
		}
	}
	
	function createTab(container, pp, options) {
		var state = $.data(container, 'tabs');
		options = options || {};
		
		// create panel
		pp.panel($.extend({}, options, {
			border: false,
			noheader: true,
			closed: true,
			doSize: false,
			iconCls: (options.icon ? options.icon : undefined),
			onLoad: function(){
				if (options.onLoad){
					options.onLoad.call(this, arguments);
				}
				state.options.onLoad.call(container, $(this));
			}
		}));
		
		var opts = pp.panel('options');
		
		var tabs = $(container).children('div.tabs-header').find('ul.tabs');
		
		opts.tab = $('<li></li>').appendTo(tabs);	// set the tab object in
													// panel options
		opts.tab.append(
				'<a href="javascript:void(0)" class="tabs-inner">' +
				'<span class="tabs-title"></span>' +
				'<span class="tabs-icon"></span>' +
				'</a>'
		);
		
		$(container).tabs('update', {
			tab: pp,
			options: opts
		});
	}
	
	function addTab(container, options) {
		var opts = $.data(container, 'tabs').options;
		var tabs = $.data(container, 'tabs').tabs;
		if (options.selected == undefined) options.selected = true;
		
		var pp = $('<div></div>').appendTo($(container).children('div.tabs-panels'));
		tabs.push(pp);
		createTab(container, pp, options);
		
		opts.onAdd.call(container, options.title, tabs.length-1);
		
// setScrollers(container);
		setSize(container);
		if (options.selected){
			selectTab(container, tabs.length-1);	// select the added tab
													// panel
		}
	}
	
	/**
	 * update tab panel, param has following properties: tab: the tab panel to
	 * be updated options: the tab panel options
	 */
	function updateTab(container, param){
		var selectHis = $.data(container, 'tabs').selectHis;
		var pp = param.tab;	// the tab panel
		var oldTitle = pp.panel('options').title; 
		pp.panel($.extend({}, param.options, {
			iconCls: (param.options.icon ? param.options.icon : undefined)
		}));
		
		var opts = pp.panel('options');	// get the tab panel options
		var tab = opts.tab;
		
		var s_title = tab.find('span.tabs-title');
		var s_icon = tab.find('span.tabs-icon');
		s_title.html(opts.title);
		s_icon.attr('class', 'tabs-icon');
		
		tab.find('a.tabs-close').remove();
		if (opts.closable){
			s_title.addClass('tabs-closable');
			$('<a href="javascript:void(0)" class="tabs-close"></a>').appendTo(tab);
		} else{
			s_title.removeClass('tabs-closable');
		}
		if (opts.iconCls){
			s_title.addClass('tabs-with-icon');
			s_icon.addClass(opts.iconCls);
		} else {
			s_title.removeClass('tabs-with-icon');
		}
		
		if (oldTitle != opts.title){
			for(var i=0; i<selectHis.length; i++){
				if (selectHis[i] == oldTitle){
					selectHis[i] = opts.title;
				}
			}
		}
		
		tab.find('span.tabs-p-tool').remove();
		if (opts.tools){
			var p_tool = $('<span class="tabs-p-tool"></span>').insertAfter(tab.find('a.tabs-inner'));
			if ($.isArray(opts.tools)){
				for(var i=0; i<opts.tools.length; i++){
					var t = $('<a href="javascript:void(0)"></a>').appendTo(p_tool);
					t.addClass(opts.tools[i].iconCls);
					if (opts.tools[i].handler){
						t.bind('click', {handler:opts.tools[i].handler}, function(e){
							if ($(this).parents('li').hasClass('tabs-disabled')){return;}
							e.data.handler.call(this);
						});
					}
				}
			} else {
				$(opts.tools).children().appendTo(p_tool);
			}
			var pr = p_tool.children().length * 12;
			if (opts.closable) {
				pr += 8;
			} else {
				pr -= 3;
				p_tool.css('right','5px');
			}
			s_title.css('padding-right', pr+'px');
		}
		
// setProperties(container);
// setScrollers(container);
		setSize(container);
		
		$.data(container, 'tabs').options.onUpdate.call(container, opts.title, getTabIndex(container, pp));
	}
	
	/**
	 * close a tab with specified index or title
	 */
	function closeTab(container, which) {
		var opts = $.data(container, 'tabs').options;
		var tabs = $.data(container, 'tabs').tabs;
		var selectHis = $.data(container, 'tabs').selectHis;
		
		if (!exists(container, which)) return;
		
		var tab = getTab(container, which);
		var title = tab.panel('options').title;
		var index = getTabIndex(container, tab);
		
		if (opts.onBeforeClose.call(container, title, index) == false) return;
		
		var tab = getTab(container, which, true);
		tab.panel('options').tab.remove();
		tab.panel('destroy');
		
		opts.onClose.call(container, title, index);
		
// setScrollers(container);
		setSize(container);
		
		// remove the select history item
		for(var i=0; i<selectHis.length; i++){
			if (selectHis[i] == title){
				selectHis.splice(i, 1);
				i --;
			}
		}
		
		// select the nearest tab panel
		var hisTitle = selectHis.pop();
		if (hisTitle){
			selectTab(container, hisTitle);
		} else if (tabs.length){
			selectTab(container, 0);
		}
	}
	
	/**
	 * get the specified tab panel
	 */
	function getTab(container, which, removeit){
		var tabs = $.data(container, 'tabs').tabs;
		if (typeof which == 'number'){
			if (which < 0 || which >= tabs.length){
				return null;
			} else {
				var tab = tabs[which];
				if (removeit) {
					tabs.splice(which, 1);
				}
				return tab;
			}
		}
		for(var i=0; i<tabs.length; i++){
			var tab = tabs[i];
			if (tab.panel('options').title == which){
				if (removeit){
					tabs.splice(i, 1);
				}
				return tab;
			}
		}
		return null;
	}
	
	function getTabIndex(container, tab){
		var tabs = $.data(container, 'tabs').tabs;
		for(var i=0; i<tabs.length; i++){
			if (tabs[i][0] == $(tab)[0]){
				return i;
			}
		}
		return -1;
	}
	
	function getSelectedTab(container){
		var tabs = $.data(container, 'tabs').tabs;
		for(var i=0; i<tabs.length; i++){
			var tab = tabs[i];
			if (tab.panel('options').closed == false){
				return tab;
			}
		}
		return null;
	}
	
	/**
	 * do first select action, if no tab is setted the first tab will be
	 * selected.
	 */
	function doFirstSelect(container){
		var tabs = $.data(container, 'tabs').tabs;
		for(var i=0; i<tabs.length; i++){
			if (tabs[i].panel('options').selected){
				selectTab(container, i);
				return;
			}
		}
		if (tabs.length){
			selectTab(container, 0);
		}
	}
	
	function selectTab(container, which){
		var opts = $.data(container, 'tabs').options;
		var tabs = $.data(container, 'tabs').tabs;
		var selectHis = $.data(container, 'tabs').selectHis;
		
		if (tabs.length == 0) return;
		
		var panel = getTab(container, which); // get the panel to be activated
		if (!panel) return;
		
		var selected = getSelectedTab(container);
		if(opts.onBeforeSelect.call(container, title, getTabIndex(container, panel)) == false){
			return false;
		}
		if (selected){
			selected.panel('close');
			selected.panel('options').tab.removeClass('tabs-selected');
		}
		
		panel.panel('open');
		var title = panel.panel('options').title;	// the panel title
		selectHis.push(title);	// push select history
		
		var tab = panel.panel('options').tab;	// get the tab object
		tab.addClass('tabs-selected');
		
		// scroll the tab to center position if required.
		var wrap = $(container).find('>div.tabs-header>div.tabs-wrap');
		var left = tab.position().left;
		var right = left + tab.outerWidth();
		if (left < 0 || right > wrap.width()){
			var deltaX = left - (wrap.width()-tab.width()) / 2;
			$(container).tabs('scrollBy', deltaX);
		} else {
			$(container).tabs('scrollBy', 0);
		}
		
		setSelectedSize(container);
		
		opts.onSelect.call(container, title, getTabIndex(container, panel));
	}
	
	function exists(container, which){
		return getTab(container, which) != null;
	}
	
	
	$.fn.tabs = function(options, param){
		if (typeof options == 'string') {
			return $.fn.tabs.methods[options](this, param);
		}
		
		options = options || {};
		return this.each(function(){
			var state = $.data(this, 'tabs');
			var opts;
			if (state) {
				opts = $.extend(state.options, options);
				state.options = opts;
			} else {
				$.data(this, 'tabs', {
					options: $.extend({},$.fn.tabs.defaults, $.fn.tabs.parseOptions(this), options),
					tabs: [],
					selectHis: []
				});
				wrapTabs(this);
			}
			
			addTools(this);
			setProperties(this);
			setSize(this);
			bindEvents(this);
			
			doFirstSelect(this);
		});
	};
	
	$.fn.tabs.methods = {
		options: function(jq){
			return $.data(jq[0], 'tabs').options;
		},
		tabs: function(jq){
			return $.data(jq[0], 'tabs').tabs;
		},
		resize: function(jq){
			return jq.each(function(){
				setSize(this);
				setSelectedSize(this);
			});
		},
		add: function(jq, options){
			return jq.each(function(){
				addTab(this, options);
			});
		},
		close: function(jq, which){
			return jq.each(function(){
				closeTab(this, which);
			});
		},
		getTab: function(jq, which){
			return getTab(jq[0], which);
		},
		getTabIndex: function(jq, tab){
			return getTabIndex(jq[0], tab);
		},
		getSelected: function(jq){
			return getSelectedTab(jq[0]);
		},
		select: function(jq, which){
			return jq.each(function(){
				selectTab(this, which);
			});
		},
		exists: function(jq, which){
			return exists(jq[0], which);
		},
		update: function(jq, options){
			return jq.each(function(){
				updateTab(this, options);
			});
		},
		enableTab: function(jq, which){
			return jq.each(function(){
				$(this).tabs('getTab', which).panel('options').tab.removeClass('tabs-disabled');
			});
		},
		disableTab: function(jq, which){
			return jq.each(function(){
				$(this).tabs('getTab', which).panel('options').tab.addClass('tabs-disabled');
			});
		},
		scrollBy: function(jq, deltaX){	// scroll the tab header by the
										// specified amount of pixels
			return jq.each(function(){
				var opts = $(this).tabs('options');
				var wrap = $(this).find('>div.tabs-header>div.tabs-wrap');
				var pos = Math.min(wrap._scrollLeft() + deltaX, getMaxScrollWidth());
				wrap.animate({scrollLeft: pos}, opts.scrollDuration);
				
				function getMaxScrollWidth(){
					var w = 0;
					var ul = wrap.children('ul');
					ul.children('li').each(function(){
						w += $(this).outerWidth(true);
					});
					return w - wrap.width() + (ul.outerWidth() - ul.width());
				}
			});
		}
	};
	
	$.fn.tabs.parseOptions = function(target){
		return $.extend({}, $.parser.parseOptions(target, [
			'width','height','tools','toolPosition','tabPosition',
			{fit:'boolean',border:'boolean',plain:'boolean',headerWidth:'number',tabWidth:'number',tabHeight:'number'}
		]));
	};
	
	$.fn.tabs.defaults = {
		width: 'auto',
		height: 'auto',
		headerWidth: 150,	// the tab header width, it is valid only when
							// tabPosition set to 'left' or 'right'
		tabWidth: 'auto',	// the tab width
		tabHeight: 27,		// the tab height
		plain: false,
		fit: false,
		border: true,
		tools: null,
		toolPosition: 'right',	// left,right
		tabPosition: 'top',		// possible values: top,bottom
		scrollIncrement: 100,
		scrollDuration: 400,
		onLoad: function(panel){},
		onBeforeSelect: function(title, index){},
		onSelect: function(title, index){},
		onBeforeClose: function(title, index){},
		onClose: function(title, index){},
		onAdd: function(title, index){},
		onUpdate: function(title, index){},
		onContextMenu: function(e, title, index){}
	};
})(jQuery);
/**
 * wizardtabs - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php
 * 
 * Dependencies: panel linkbutton
 * 
 */
(function($){
	
	/**
	 * set the wizardtabs scrollers to show or not, dependent on the wizardtabs count and
	 * width
	 */
	function setScrollers(container) {
		var opts = $.data(container, 'wizardtabs').options;
		if (opts.tabPosition == 'left' || opts.tabPosition == 'right'){return}
		
		var header = $(container).children('div.wizardtabs-header');
		var tool = header.children('div.wizardtabs-tool');
		var sLeft = header.children('div.wizardtabs-scroller-left');
		var sRight = header.children('div.wizardtabs-scroller-right');
		var wrap = header.children('div.wizardtabs-wrap');
		
		// set the tool height
		var tHeight = header.outerHeight();
		if (opts.plain){
			tHeight -= tHeight - header.height();
		}
		tool._outerHeight(tHeight);
		
		var wizardtabsWidth = 0;
		$('ul.wizardtabs li', header).each(function(){
			wizardtabsWidth += $(this).outerWidth(true);
		});
		var cWidth = header.width() - tool._outerWidth();
		
		if (wizardtabsWidth > cWidth) {
			sLeft.add(sRight).show()._outerHeight(tHeight);
			if (opts.toolPosition == 'left'){
				tool.css({
					left: sLeft.outerWidth(),
					right: ''
				});
				wrap.css({
					marginLeft: sLeft.outerWidth() + tool._outerWidth(),
					marginRight: sRight._outerWidth(),
					width: cWidth - sLeft.outerWidth() - sRight.outerWidth()
				});
			} else {
				tool.css({
					left: '',
					right: sRight.outerWidth()
				});
				wrap.css({
					marginLeft: sLeft.outerWidth(),
					marginRight: sRight.outerWidth() + tool._outerWidth(),
					width: cWidth - sLeft.outerWidth() - sRight.outerWidth()
				});
			}
		} else {
			sLeft.add(sRight).hide();
			if (opts.toolPosition == 'left'){
				tool.css({
					left: 0,
					right: ''
				});
				wrap.css({
					marginLeft: tool._outerWidth(),
					marginRight: 0,
					width: cWidth
				});
			} else {
				tool.css({
					left: '',
					right: 0
				});
				wrap.css({
					marginLeft: 0,
					marginRight: tool._outerWidth(),
					width: cWidth
				});
			}
		}
	}
	
	function addTools(container){
		var opts = $.data(container, 'wizardtabs').options;
		var header = $(container).children('div.wizardtabs-header');
		if (opts.tools) {
			if (typeof opts.tools == 'string'){
				$(opts.tools).addClass('wizardtabs-tool').appendTo(header);
				$(opts.tools).show();
			} else {
				header.children('div.wizardtabs-tool').remove();
				var tools = $('<div class="wizardtabs-tool"><table cellspacing="0" cellpadding="0" style="height:100%"><tr></tr></table></div>').appendTo(header);
				var tr = tools.find('tr');
				for(var i=0; i<opts.tools.length; i++){
					var td = $('<td></td>').appendTo(tr);
					var tool = $('<a href="javascript:void(0);"></a>').appendTo(td);
					tool[0].onclick = eval(opts.tools[i].handler || function(){});
					tool.linkbutton($.extend({}, opts.tools[i], {
						plain: true
					}));
				}
			}
		} else {
			header.children('div.wizardtabs-tool').remove();
		}
	}
	
	function setSize(container) {
		var state = $.data(container, 'wizardtabs');
		var opts = state.options;
		var cc = $(container);
		
		opts.fit ? $.extend(opts, cc._fit()) : cc._fit(false);
		cc.width(opts.width).height(opts.height);
		
		var header = $(container).children('div.wizardtabs-header');
		var panels = $(container).children('div.wizardtabs-panels');
		var wrap = header.find('div.wizardtabs-wrap');
		var ul = wrap.find('.wizardtabs');
		
		for(var i=0; i<state.wizardtabs.length; i++){
			var p_opts = state.wizardtabs[i].panel('options');
			var p_t = p_opts.tab.find('a.wizardtabs-inner');
			var width = parseInt(p_opts.tabWidth || opts.tabWidth) || undefined;
			if (width){
				p_t._outerWidth(width);
			} else {
				p_t.css('width', '');
			}
			p_t._outerHeight(opts.tabHeight);
			p_t.css('lineHeight', p_t.height()+'px');
		}
		if (opts.tabPosition == 'left' || opts.tabPosition == 'right'){
			header._outerWidth(opts.headerWidth);
			panels._outerWidth(cc.width() - opts.headerWidth);
			header.add(panels)._outerHeight(opts.height);
			wrap._outerWidth(header.width());
			ul._outerWidth(wrap.width()).css('height','');
		} else {
			header._outerWidth(opts.width).css('height','');
			ul._outerHeight(opts.tabHeight).css('width','');
			
			setScrollers(container);
			
			var height = opts.height;
			if (!isNaN(height)) {
				panels._outerHeight(height - header.outerHeight());
			} else {
				panels.height('auto');
			}
			var width = opts.width;
			if (!isNaN(width)){
				panels._outerWidth(width);
			} else {
				panels.width('auto');
			}
		}
	}
	
	function setWizardSize(container) {
		var state = $.data(container, 'wizardtabs');
		var opts = state.options;
		if(undefined != opts.fitWizardTab) {
			if(opts.fitWizardTab) {
				for(var i=0; i<state.wizardtabs.length; i++){
					var p_opts = state.wizardtabs[i].panel('options');
					var p_t = p_opts.tab.find('a.wizardtabs-inner');
					var wizardLength = state.wizardtabs.length;
					var innerWidth = Math.floor(($(container).width()-wizardLength*24-4*(wizardLength-1)) / (wizardLength));
					p_t.css('width',innerWidth+'px');
				}
			}
		}
	}
	/**
	 * set selected tab panel size
	 */
	function setSelectedSize(container){
		var opts = $.data(container, 'wizardtabs').options;
		var tab = getSelectedTab(container);
		if (tab){
			var panels = $(container).children('div.wizardtabs-panels');
			var width = opts.width=='auto' ? 'auto' : panels.width();
			var height = opts.height=='auto' ? 'auto' : panels.height();
			tab.panel('resize', {
				width: width,
				height: height
			});
		}
	}
	
	
	/**
	 * wrap the wizardtabs header and body
	 */
	function wrapWizardtabs(container) {
		var wizardtabs = $.data(container, 'wizardtabs').wizardtabs;
		var cc = $(container);
		cc.addClass('wizardtabs-container');
		var pp = $('<div class="wizardtabs-panels"></div>').insertBefore(cc);
		cc.children('div').each(function(){
			pp[0].appendChild(this);
		});
		cc[0].appendChild(pp[0]);
// cc.wrapInner('<div class="wizardtabs-panels"/>');
		$('<div class="wizardtabs-header">'
				+ '<div class="wizardtabs-scroller-left"></div>'
				+ '<div class="wizardtabs-scroller-right"></div>'
				+ '<div class="wizardtabs-wrap">'
				+ '<ul class="wizardtabs"></ul>'
				+ '</div>'
				+ '</div>').prependTo(container);
		
		cc.children('div.wizardtabs-panels').children('div').each(function(i){
			var opts = $.extend({}, $.parser.parseOptions(this), {
				selected: ($(this).attr('selected') ? true : undefined)
			});
			var pp = $(this);
			wizardtabs.push(pp);
			createWizardtabs(container, pp, opts);
		});
		
		cc.children('div.wizardtabs-header').find('.wizardtabs-scroller-left, .wizardtabs-scroller-right').hover(
				function(){$(this).addClass('wizardtabs-scroller-over');},
				function(){$(this).removeClass('wizardtabs-scroller-over');}
		);
		cc.bind('_resize', function(e,force){
			var opts = $.data(container, 'wizardtabs').options;
			if (opts.fit == true || force){
				setSize(container);
				setSelectedSize(container);
			}
			return false;
		});
//		var wizardButtonpadding = $(container).width()-135;
		$(container).after('<div id="wizardButton" style="float:right;"><a id="wizardup" href="#" style="display:none" data-roles="mui-linkbutton" class="l-btn" group=""><span class="l-btn-left"><span class="l-btn-text">上一步</span></span></a>'+
		'&nbsp<a id="wizarddown" href="#" data-roles="mui-linkbutton" class="l-btn" group=""><span class="l-btn-left"><span class="l-btn-text">下一步</span></span></a></div>');
	}
	function bindEvents(container){
		$(container).next('#wizardButton').find('#wizardup').click(function(){
			var tab = getSelectedTab(container);
			var opts = $.data(container, 'wizardtabs').options;
			var title = tab.panel('options').title;
			var index = getTabIndex(container,tab);
			var flag = opts.onWizardUp.call(container,title,index);
			if(flag != undefined){
				if(!flag){
					return;
				}
			}
			if(index == 0) {
				return;
			} else {	
				selectTab(container,index-1);
				$(container).next('#wizardButton').find('#wizarddown').attr("style","");
			}
			if(index-1 == 0) {
				$(container).next('#wizardButton').find('#wizardup').attr("style","display:none");
			}
			if(index + 1 != length-1) {
				$(container).next('#wizardButton').find('#wizardover').remove();
			}
		});
		$(container).next('#wizardButton').find('#wizarddown').click(function(){
			var tab = getSelectedTab(container);
			var opts = $.data(container, 'wizardtabs').options;
			var title = tab.panel('options').title;
			var index = getTabIndex(container,tab);
			var flag = opts.onWizardDown.call(container,title,index);
			if(flag != undefined){
				if(!flag){
					return;
				}
			}
			var length = $.data(container, 'wizardtabs').wizardtabs.length;
			if(index<length-1) {
				selectTab(container,index+1);
				$(container).next('#wizardButton').find('#wizardup').attr("style","");
			} else {
				return;
			}
			if(index + 1 == length-1) {
				$(container).next('#wizardButton').find('#wizarddown').attr("style","display:none");
				$(container).next('#wizardButton').find('#wizarddown').after('<a id="wizardover" href="#" data-roles="mui-linkbutton" class="l-btn" group=""><span class="l-btn-left"><span class="l-btn-text">完成</span></span></a>');
				$(container).next('#wizardButton').find('#wizardover').click(function(){
					opts.onWizardDown.call(container,title,index+1);
				});
			}
		});
//		var opts = $.data(container, 'wizardtabs').options;
//		$(container).children('div.wizardtabs-header').unbind().bind('click', function(e){
//			if ($(e.target).hasClass('wizardtabs-scroller-left')){
//				$(container).wizardtabs('scrollBy', -opts.scrollIncrement);
//			} else if ($(e.target).hasClass('wizardtabs-scroller-right')){
//				$(container).wizardtabs('scrollBy', opts.scrollIncrement);
//			} else {
//				var li = $(e.target).closest('li');
//				if (li.hasClass('wizardtabs-disabled')){return;}
//				var a = $(e.target).closest('a.wizardtabs-close');
//				if (a.length){
//					closeTab(container, getLiIndex(li));
//				} else if (li.length){
//					selectTab(container, getLiIndex(li));
//				}
//			}
//		}).bind('contextmenu', function(e){
//			var li = $(e.target).closest('li');
//			if (li.hasClass('wizardtabs-disabled')){return;}
//			if (li.length){
//				opts.onContextMenu.call(container, e, li.find('span.wizardtabs-title').html(), getLiIndex(li));
//			}
//		});
		function getLiIndex(li){
			var index = 0;
			li.parent().children('li').each(function(i){
				if (li[0] == this){
					index = i;
					return false;
				}
			});
			return index;
		}
	}
	
	//重置向导组件
	function resetWizardTab(container) {
		selectTab(container,0);
		$(container).next('#wizardButton').find('#wizarddown').attr("style","");
		$(container).next('#wizardButton').find('#wizardup').attr("style","display:none");
		if($(container).next('#wizardButton').find('#wizardover')) {
			$(container).next('#wizardButton').find('#wizardover').attr("style","display:none");
		}
	}
	
	function setProperties(container){
		var opts = $.data(container, 'wizardtabs').options;
		var header = $(container).children('div.wizardtabs-header');
		var panels = $(container).children('div.wizardtabs-panels');
		
		header.removeClass('wizardtabs-header-top wizardtabs-header-bottom wizardtabs-header-left wizardtabs-header-right');
		panels.removeClass('wizardtabs-panels-top wizardtabs-panels-bottom wizardtabs-panels-left wizardtabs-panels-right');
		if (opts.tabPosition == 'top'){
			header.insertBefore(panels);
		} else if (opts.tabPosition == 'bottom'){
			header.insertAfter(panels);
			header.addClass('wizardtabs-header-bottom');
			panels.addClass('wizardtabs-panels-top');
		} else if (opts.tabPosition == 'left'){
			header.addClass('wizardtabs-header-left');
			panels.addClass('wizardtabs-panels-right');
		} else if (opts.tabPosition == 'right'){
			header.addClass('wizardtabs-header-right');
			panels.addClass('wizardtabs-panels-left');
		}
		
		if (opts.plain == true) {
			header.addClass('wizardtabs-header-plain');
		} else {
			header.removeClass('wizardtabs-header-plain');
		}
		if (opts.border == true){
			header.removeClass('wizardtabs-header-noborder');
			panels.removeClass('wizardtabs-panels-noborder');
		} else {
			header.addClass('wizardtabs-header-noborder');
			panels.addClass('wizardtabs-panels-noborder');
		}
	}
	
	function createWizardtabs(container, pp, options) {
		var state = $.data(container, 'wizardtabs');
		options = options || {};
		
		// create panel
		pp.panel($.extend({}, options, {
			border: false,
			noheader: true,
			closed: true,
			doSize: false,
			iconCls: (options.icon ? options.icon : undefined),
			onLoad: function(){
				if (options.onLoad){
					options.onLoad.call(this, arguments);
				}
				state.options.onLoad.call(container, $(this));
			}
		}));
		
		var opts = pp.panel('options');
		
		var wizardtabs = $(container).children('div.wizardtabs-header').find('ul.wizardtabs');
		
		opts.tab = $('<li></li>').appendTo(wizardtabs);	// set the tab object in
		// panel options
		opts.tab.append(
				'<a href="javascript:void(0)" class="wizardtabs-inner">' +
				'<span class="wizardtabs-title"></span>' +
				'<span class="wizardtabs-icon"></span>' +
				'</a>'
		);
		
		$(container).wizardtabs('update', {
			tab: pp,
			options: opts
		});
	}
	
	function addTab(container, options) {
		var opts = $.data(container, 'wizardtabs').options;
		var wizardtabs = $.data(container, 'wizardtabs').wizardtabs;
		if (options.selected == undefined) options.selected = true;
		
		var pp = $('<div></div>').appendTo($(container).children('div.wizardtabs-panels'));
		wizardtabs.push(pp);
		createWizardtabs(container, pp, options);
		
		opts.onAdd.call(container, options.title, wizardtabs.length-1);
		
// setScrollers(container);
		setSize(container);
		setWizardSize(container);
		if (options.selected){
			selectTab(container, wizardtabs.length-1);	// select the added tab
			// panel
		}
	}
	
	/**
	 * update tab panel, param has following properties: tab: the tab panel to
	 * be updated options: the tab panel options
	 */
	function updateTab(container, param){
		var selectHis = $.data(container, 'wizardtabs').selectHis;
		var pp = param.tab;	// the tab panel
		var oldTitle = pp.panel('options').title; 
		pp.panel($.extend({}, param.options, {
			iconCls: (param.options.icon ? param.options.icon : undefined)
		}));
		
		var opts = pp.panel('options');	// get the tab panel options
		var tab = opts.tab;
		
		var s_title = tab.find('span.wizardtabs-title');
		var s_icon = tab.find('span.wizardtabs-icon');
		s_title.html(opts.title);
		s_icon.attr('class', 'wizardtabs-icon');
		
		tab.find('a.wizardtabs-close').remove();
		$('<a href="javascript:void(0)" class="wizardtabs-close"></a>').appendTo(tab);
//		if (opts.closable){
//			s_title.addClass('wizardtabs-closable');
//		} else{
//			s_title.removeClass('wizardtabs-closable');
//		}
		if (opts.iconCls){
			s_title.addClass('wizardtabs-with-icon');
			s_icon.addClass(opts.iconCls);
		} else {
			s_title.removeClass('wizardtabs-with-icon');
		}
		
		if (oldTitle != opts.title){
			for(var i=0; i<selectHis.length; i++){
				if (selectHis[i] == oldTitle){
					selectHis[i] = opts.title;
				}
			}
		}
		
		tab.find('span.wizardtabs-p-tool').remove();
		if (opts.tools){
			var p_tool = $('<span class="wizardtabs-p-tool"></span>').insertAfter(tab.find('a.wizardtabs-inner'));
			if ($.isArray(opts.tools)){
				for(var i=0; i<opts.tools.length; i++){
					var t = $('<a href="javascript:void(0)"></a>').appendTo(p_tool);
					t.addClass(opts.tools[i].iconCls);
					if (opts.tools[i].handler){
						t.bind('click', {handler:opts.tools[i].handler}, function(e){
							if ($(this).parents('li').hasClass('wizardtabs-disabled')){return;}
							e.data.handler.call(this);
						});
					}
				}
			} else {
				$(opts.tools).children().appendTo(p_tool);
			}
			var pr = p_tool.children().length * 12;
			if (opts.closable) {
				pr += 8;
			} else {
				pr -= 3;
				p_tool.css('right','5px');
			}
			s_title.css('padding-right', pr+'px');
		}
		
// setProperties(container);
// setScrollers(container);
		setSize(container);
		setWizardSize(container);
		$.data(container, 'wizardtabs').options.onUpdate.call(container, opts.title, getTabIndex(container, pp));
	}
	
	/**
	 * close a tab with specified index or title
	 */
	function closeTab(container, which) {
		var opts = $.data(container, 'wizardtabs').options;
		var wizardtabs = $.data(container, 'wizardtabs').wizardtabs;
		var selectHis = $.data(container, 'wizardtabs').selectHis;
		
		if (!exists(container, which)) return;
		
		var tab = getTab(container, which);
		var title = tab.panel('options').title;
		var index = getTabIndex(container, tab);
		
		if (opts.onBeforeClose.call(container, title, index) == false) return;
		
		var tab = getTab(container, which, true);
		tab.panel('options').tab.remove();
		tab.panel('destroy');
		
		opts.onClose.call(container, title, index);
		
// setScrollers(container);
		setSize(container);
		setWizardSize(container);
		// remove the select history item
		for(var i=0; i<selectHis.length; i++){
			if (selectHis[i] == title){
				selectHis.splice(i, 1);
				i --;
			}
		}
		
		// select the nearest tab panel
		var hisTitle = selectHis.pop();
		if (hisTitle){
			selectTab(container, hisTitle);
		} else if (wizardtabs.length){
			selectTab(container, 0);
		}
	}
	
	/**
	 * get the specified tab panel
	 */
	function getTab(container, which, removeit){
		var wizardtabs = $.data(container, 'wizardtabs').wizardtabs;
		if (typeof which == 'number'){
			if (which < 0 || which >= wizardtabs.length){
				return null;
			} else {
				var tab = wizardtabs[which];
				if (removeit) {
					wizardtabs.splice(which, 1);
				}
				return tab;
			}
		}
		for(var i=0; i<wizardtabs.length; i++){
			var tab = wizardtabs[i];
			if (tab.panel('options').title == which){
				if (removeit){
					wizardtabs.splice(i, 1);
				}
				return tab;
			}
		}
		return null;
	}
	
	function getTabIndex(container, tab){
		var wizardtabs = $.data(container, 'wizardtabs').wizardtabs;
		for(var i=0; i<wizardtabs.length; i++){
			if (wizardtabs[i][0] == $(tab)[0]){
				return i;
			}
		}
		return -1;
	}
	
	function getSelectedTab(container){
		var wizardtabs = $.data(container, 'wizardtabs').wizardtabs;
		for(var i=0; i<wizardtabs.length; i++){
			var tab = wizardtabs[i];
			if (tab.panel('options').closed == false){
				return tab;
			}
		}
		return null;
	}
	
	/**
	 * do first select action, if no tab is setted the first tab will be
	 * selected.
	 */
	function doFirstSelect(container){
		var wizardtabs = $.data(container, 'wizardtabs').wizardtabs;
		for(var i=0; i<wizardtabs.length; i++){
			if (wizardtabs[i].panel('options').selected){
				selectTab(container, i);
				return;
			}
		}
		if (wizardtabs.length){
			selectTab(container, 0);
		}
	}
	
	function selectTab(container, which){
		var opts = $.data(container, 'wizardtabs').options;
		var wizardtabs = $.data(container, 'wizardtabs').wizardtabs;
		var selectHis = $.data(container, 'wizardtabs').selectHis;
		
		if (wizardtabs.length == 0) return;
		
		var panel = getTab(container, which); // get the panel to be activated
		if (!panel) return;
		
		var selected = getSelectedTab(container);
		if(opts.onBeforeSelect.call(container, title, getTabIndex(container, panel)) == false){
			return false;
		}
		if (selected){
			selected.panel('close');
			selected.panel('options').tab.removeClass('wizardtabs-selected');
		}
		
		panel.panel('open');
		var title = panel.panel('options').title;	// the panel title
		selectHis.push(title);	// push select history
		
		var tab = panel.panel('options').tab;	// get the tab object
		tab.addClass('wizardtabs-selected');
		
		// scroll the tab to center position if required.
		var wrap = $(container).find('>div.wizardtabs-header>div.wizardtabs-wrap');
		var left = tab.position().left;
		var right = left + tab.outerWidth();
		if (left < 0 || right > wrap.width()){
			var deltaX = left - (wrap.width()-tab.width()) / 2;
			$(container).wizardtabs('scrollBy', deltaX);
		} else {
			$(container).wizardtabs('scrollBy', 0);
		}
		
		setSelectedSize(container);
		setWizardSize(container);
		opts.onSelect.call(container, title, getTabIndex(container, panel));
	}
	
	function exists(container, which){
		return getTab(container, which) != null;
	}
	
	
	$.fn.wizardtabs = function(options, param){
		if (typeof options == 'string') {
			return $.fn.wizardtabs.methods[options](this, param);
		}
		
		options = options || {};
		return this.each(function(){
			var state = $.data(this, 'wizardtabs');
			var opts;
			if (state) {
				opts = $.extend(state.options, options);
				state.options = opts;
			} else {
				$.data(this, 'wizardtabs', {
					options: $.extend({},$.fn.wizardtabs.defaults, $.fn.wizardtabs.parseOptions(this), options),
					wizardtabs: [],
					selectHis: []
				});
				wrapWizardtabs(this);
			}
			
			addTools(this);
			setProperties(this);
			setSize(this);
			setWizardSize(this);
			bindEvents(this);
			
			doFirstSelect(this);
		});
	};
	
	$.fn.wizardtabs.methods = {
			options: function(jq){
				return $.data(jq[0], 'wizardtabs').options;
			},
			wizardtabs: function(jq){
				return $.data(jq[0], 'wizardtabs').wizardtabs;
			},
			resize: function(jq){
				return jq.each(function(){
					setSize(this);
					setSelectedSize(this);
				});
			},
			add: function(jq, options){
				return jq.each(function(){
					addTab(this, options);
				});
			},
			close: function(jq, which){
				return jq.each(function(){
					closeTab(this, which);
				});
			},
			getTab: function(jq, which){
				return getTab(jq[0], which);
			},
			getTabIndex: function(jq, tab){
				return getTabIndex(jq[0], tab);
			},
			getSelected: function(jq){
				return getSelectedTab(jq[0]);
			},
			resetWizardTab: function(jq) {
				return resetWizardTab(jq[0]);
			},
			select: function(jq, which){
				return jq.each(function(){
					selectTab(this, which);
				});
			},
			exists: function(jq, which){
				return exists(jq[0], which);
			},
			update: function(jq, options){
				return jq.each(function(){
					updateTab(this, options);
				});
			},
			enableTab: function(jq, which){
				return jq.each(function(){
					$(this).wizardtabs('getTab', which).panel('options').tab.removeClass('wizardtabs-disabled');
				});
			},
			disableTab: function(jq, which){
				return jq.each(function(){
					$(this).wizardtabs('getTab', which).panel('options').tab.addClass('wizardtabs-disabled');
				});
			},
			scrollBy: function(jq, deltaX){	// scroll the tab header by the
				// specified amount of pixels
				return jq.each(function(){
					var opts = $(this).wizardtabs('options');
					var wrap = $(this).find('>div.wizardtabs-header>div.wizardtabs-wrap');
					var pos = Math.min(wrap._scrollLeft() + deltaX, getMaxScrollWidth());
					wrap.animate({scrollLeft: pos}, opts.scrollDuration);
					
					function getMaxScrollWidth(){
						var w = 0;
						var ul = wrap.children('ul');
						ul.children('li').each(function(){
							w += $(this).outerWidth(true);
						});
						return w - wrap.width() + (ul.outerWidth() - ul.width());
					}
				});
			}
	};
	
	$.fn.wizardtabs.parseOptions = function(target){
		return $.extend({}, $.parser.parseOptions(target, [
		                                                   'width','height','tools','toolPosition','tabPosition',
		                                                   {fit:'boolean',border:'boolean',plain:'boolean',headerWidth:'number',tabWidth:'number',tabHeight:'number'}
		                                                   ]));
	};
	
	$.fn.wizardtabs.defaults = {
			width: 'auto',
			height: 'auto',
			headerWidth: 150,	// the tab header width, it is valid only when
			// tabPosition set to 'left' or 'right'
			tabWidth: 'auto',	// the tab width
			tabHeight: 27,		// the tab height
			plain: false,
			fit: false,
			border: true,
			tools: null,
			toolPosition: 'right',	// left,right
			tabPosition: 'top',		// possible values: top,bottom
			scrollIncrement: 100,
			scrollDuration: 400,
			onLoad: function(panel){},
			onBeforeSelect: function(title, index){},
			onSelect: function(title, index){},
			onBeforeClose: function(title, index){},
			onClose: function(title, index){},
			onAdd: function(title, index){},
			onUpdate: function(title, index){},
			onContextMenu: function(e, title, index){},
			onWizardDown: function(title, index){},
			onWizardUp: function(title, index){}
	};
})(jQuery);
/**
 * layout - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php
 * 
 * Dependencies: resizable panel
 */
(function($){
	var resizing = false;	// indicate if the region panel is resizing
	
	function setSize(container){
		var state = $.data(container, 'layout');
		var opts = state.options;
		var panels = state.panels;
		
		var cc = $(container);
		if (container.tagName == 'BODY'){
			cc._fit();
		} else {
			opts.fit ? cc.css(cc._fit()) : cc._fit(false);
		}
		
// opts.fit ? cc.css(cc._fit()) : cc._fit(false);
// if (opts.fit == true){
// var p = cc.parent();
// p.addClass('panel-noscroll');
// if (p[0].tagName == 'BODY') $('html').addClass('panel-fit');
// cc.width(p.width());
// cc.height(p.height());
// }
		
		function getPanelHeight(pp){
			var opts = pp.panel('options');
			//高度支持百分比
			var height = opts.dragsplit?opts.height:opts.percentHeight||opts.height;
			if(height && height.toString().indexOf('%')>=0){
				opts.percentHeight = height;
				height = cc.height()*(height.toString().substring(0,height.toString().length-1)/100);
			}
			return Math.min(Math.max(height, opts.minHeight), opts.maxHeight);
		}
		function getPanelWidth(pp){
			var opts = pp.panel('options');
			//宽度支持百分比
			var width = opts.dragsplit?opts.width:opts.percentWidth||opts.width;
			if(width && width.toString().indexOf('%')>=0){
				opts.percentWidth = width;
				width = cc.width()*(width.toString().substring(0,width.toString().length-1)/100);
			}
			return Math.min(Math.max(width, opts.minWidth), opts.maxWidth);
		}
		
		var cpos = {
			top:0,
			left:0,
			width:cc.width(),
			height:cc.height()
		};
		
		// set north panel size
		function setNorthSize(pp){
			if (!pp.length) return;
			var height = getPanelHeight(pp);
			pp.panel('resize', {
				width: cc.width(),
				height: height,
				left: 0,
				top: 0
			});
			cpos.top += height;
			cpos.height -= height;
		}
		if (isVisible(panels.expandNorth)){
			setNorthSize(panels.expandNorth);
		} else {
			setNorthSize(panels.north);
		}
		
		// set south panel size
		function setSouthSize(pp){
			if (!pp.length) return;
			var height = getPanelHeight(pp);
			pp.panel('resize', {
				width: cc.width(),
				height: height,
				left: 0,
				top: cc.height() - height
			});
			cpos.height -= height;
		}
		if (isVisible(panels.expandSouth)){
			setSouthSize(panels.expandSouth);
		} else {
			setSouthSize(panels.south);
		}
		
		// set east panel size
		function setEastSize(pp){
			if (!pp.length) return;
			var width = getPanelWidth(pp);
			pp.panel('resize', {
				width: width,
				height: cpos.height,
				left: cc.width() - width,
				top: cpos.top
			});
			cpos.width -= width;
		}
		if (isVisible(panels.expandEast)){
			setEastSize(panels.expandEast);
		} else {
			setEastSize(panels.east);
		}
		
		// set west panel size
		function setWestSize(pp){
			if (!pp.length) return;
			var width = getPanelWidth(pp);
			pp.panel('resize', {
				width: width,
				height: cpos.height,
				left: 0,
				top: cpos.top
			});
			cpos.left += width;
			cpos.width -= width;
		}
		if (isVisible(panels.expandWest)){
			setWestSize(panels.expandWest);
		} else {
			setWestSize(panels.west);
		}
		
		panels.center.panel('resize', cpos);
	}
	
	/**
	 * initialize and wrap the layout
	 */
	function init(container){
		var cc = $(container);
		
// if (cc[0].tagName == 'BODY'){
// $('html').addClass('panel-fit');
// }
		cc.addClass('layout');
		
		function _add(cc){
			cc.children('div').each(function(){
				var opts = $.fn.layout.parsePanelOptions(this);
				if ('north,south,east,west,center'.indexOf(opts.region) >= 0){
					addPanel(container, opts, this);
				}
			});
		}
		
		cc.children('form').length ? _add(cc.children('form')) : _add(cc);
		
		cc.append('<div class="layout-split-proxy-h"></div><div class="layout-split-proxy-v"></div>');
		
		cc.bind('_resize', function(e,force){
			var opts = $.data(container, 'layout').options;
			//高度宽度支持百分比
			//if (opts.fit == true || force){
				setSize(container);
			//}
			return false;
		});
	}
	
	/**
	 * Add a new region panel on specified element
	 */
	function addPanel(container, param, el){
		param.region = param.region || 'center';
		var panels = $.data(container, 'layout').panels;
		var cc = $(container);
		var dir = param.region;
		
		if (panels[dir].length) return;	// the region panel is already exists
		
		var pp = $(el);
		if (!pp.length){
			pp = $('<div></div>').appendTo(cc);	// the predefined panel isn't
												// exists, create a new panel
												// instead
		}
		
		var popts = $.extend({}, $.fn.layout.paneldefaults, {
			width: (pp.length ? parseInt(pp[0].style.width) || pp.outerWidth() : 'auto'),
			height: (pp.length ? parseInt(pp[0].style.height) || pp.outerHeight() : 'auto'),
			doSize: false,
			collapsible: true,
			cls: ('layout-panel layout-panel-' + dir),
			bodyCls: 'layout-body',
			onOpen: function(){
				var tool = $(this).panel('header').children('div.panel-tool');
				tool.children('a.panel-tool-collapse').hide();	// hide the old
																// collapse
																// button
				
				var buttonDir = {north:'up',south:'down',east:'right',west:'left'};
				if (!buttonDir[dir]) return;
				
				var iconCls = 'layout-button-' + buttonDir[dir];
				// add collapse tool to panel header
				var t = tool.children('a.' + iconCls);
				if (!t.length){
					t = $('<a href="javascript:void(0)"></a>').addClass(iconCls).appendTo(tool);
					t.bind('click', {dir:dir}, function(e){
						collapsePanel(container, e.data.dir);
						return false;
					});
				}
				$(this).panel('options').collapsible ? t.show() : t.hide();
			}
		}, param);
		
		pp.panel(popts);	// create region panel
		panels[dir] = pp;
		
		if (pp.panel('options').split){
			var panel = pp.panel('panel');
			panel.addClass('layout-split-' + dir);
			
			var handles = '';
			if (dir == 'north') handles = 's';
			if (dir == 'south') handles = 'n';
			if (dir == 'east') handles = 'w';
			if (dir == 'west') handles = 'e';
			
			panel.resizable($.extend({}, {
				handles:handles,
				onStartResize: function(e){
					resizing = true;
					
					if (dir == 'north' || dir == 'south'){
						var proxy = $('>div.layout-split-proxy-v', container);
					} else {
						var proxy = $('>div.layout-split-proxy-h', container);
					}
					var top=0,left=0,width=0,height=0;
					var pos = {display: 'block'};
					if (dir == 'north'){
						pos.top = parseInt(panel.css('top')) + panel.outerHeight() - proxy.height();
						pos.left = parseInt(panel.css('left'));
						pos.width = panel.outerWidth();
						pos.height = proxy.height();
					} else if (dir == 'south'){
						pos.top = parseInt(panel.css('top'));
						pos.left = parseInt(panel.css('left'));
						pos.width = panel.outerWidth();
						pos.height = proxy.height();
					} else if (dir == 'east'){
						pos.top = parseInt(panel.css('top')) || 0;
						pos.left = parseInt(panel.css('left')) || 0;
						pos.width = proxy.width();
						pos.height = panel.outerHeight();
					} else if (dir == 'west'){
						pos.top = parseInt(panel.css('top')) || 0;
						pos.left = panel.outerWidth() - proxy.width();
						pos.width = proxy.width();
						pos.height = panel.outerHeight();
					}
					proxy.css(pos);
					
					$('<div class="layout-mask"></div>').css({
						left:0,
						top:0,
						width:cc.width(),
						height:cc.height()
					}).appendTo(cc);
				},
				onResize: function(e){
					if (dir == 'north' || dir == 'south'){
						var proxy = $('>div.layout-split-proxy-v', container);
						proxy.css('top', e.pageY - $(container).offset().top - proxy.height()/2);
					} else {
						var proxy = $('>div.layout-split-proxy-h', container);
						proxy.css('left', e.pageX - $(container).offset().left - proxy.width()/2);
					}
					return false;
				},
				onStopResize: function(e){
// $('>div.layout-split-proxy-v', container).css('display','none');
// $('>div.layout-split-proxy-h', container).css('display','none');
// var opts = pp.panel('options');
// opts.width = panel.outerWidth();
// opts.height = panel.outerHeight();
// opts.left = panel.css('left');
// opts.top = panel.css('top');
// pp.panel('resize');
					
					cc.children('div.layout-split-proxy-v,div.layout-split-proxy-h').hide();
					pp.panel('resize',e.data);
					
					pp.panel('options').dragsplit = true;//高度宽度支持百分比
					setSize(container);
					pp.panel('options').dragsplit = false;//高度宽度支持百分比
					resizing = false;
					
					cc.find('>div.layout-mask').remove();
					var state = $.data(container, 'layout');
					var options = state.options;
					if(options.onStopResize){
						options.onStopResize.call(container,container,pp);
					}
				}
			}, param));
		}
	}
	
	/**
	 * remove a region panel
	 */
	function removePanel(container, region){
		var panels = $.data(container, 'layout').panels;
		if (panels[region].length){
			panels[region].panel('destroy');
			panels[region] = $();
			var expandP = 'expand' + region.substring(0,1).toUpperCase() + region.substring(1);
			if (panels[expandP]){
				panels[expandP].panel('destroy');
				panels[expandP] = undefined;
			}
		}
	}
	
	function collapsePanel(container, region, animateSpeed){
		if (animateSpeed == undefined) animateSpeed = 'normal';
		var panels = $.data(container, 'layout').panels;
		
		var p = panels[region];
		if (p.panel('options').onBeforeCollapse.call(p) == false) return;
		
		// expand panel name: expandNorth, expandSouth, expandWest, expandEast
		var expandP = 'expand' + region.substring(0,1).toUpperCase() + region.substring(1);
		if (!panels[expandP]){
			panels[expandP] = createExpandPanel(region);
			panels[expandP].panel('panel').bind('click', function(){
				var copts = getOption();
				p.panel('expand',false).panel('open').panel('resize', copts.collapse);
				
				p.panel('panel').animate(copts.expand, function(){
					$(this).unbind('.layout').bind('mouseleave.layout', {region:region}, function(e){
						if (resizing == true) return;
						collapsePanel(container, e.data.region);
					});
				});
				
				return false;
			});
		}
		
		var copts = getOption();
		if (!isVisible(panels[expandP])){
			panels.center.panel('resize',copts.resizeC);
		}
		p.panel('panel').animate(copts.collapse, animateSpeed, function(){
			p.panel('collapse',false).panel('close');
			panels[expandP].panel('open').panel('resize',copts.expandP);
			
			$(this).unbind('.layout');
		});
		
		/**
		 * create expand panel
		 */
		function createExpandPanel(dir){
			var icon;
			if (dir == 'east') icon = 'layout-button-left'
			else if (dir == 'west') icon = 'layout-button-right'
			else if (dir == 'north') icon = 'layout-button-down'
			else if (dir == 'south') icon = 'layout-button-up';
			
			var popts = $.extend({}, $.fn.layout.paneldefaults, {
				cls: 'layout-expand',
				title: '&nbsp;',
				closed: true,
				doSize: false,
				tools: [{
					iconCls: icon,
					handler:function(){
						expandPanel(container, region);
						return false;
					}
				}]
			});
			var p = $('<div></div>').appendTo(container).panel(popts);
			p.panel('panel').hover(
				function(){$(this).addClass('layout-expand-over');},
				function(){$(this).removeClass('layout-expand-over');}
			);
			return p;
		}
		
		/**
		 * get collapse option:{ resizeC:{}, expand:{}, expandP:{}, // the
		 * expand holder panel collapse:{} }
		 */
		function getOption(){
			var cc = $(container);
			var copts = panels.center.panel('options');
			
			if (region == 'east'){
				var eopts = panels['east'].panel('options');
				return {
					resizeC:{
						width: copts.width + eopts.width - 28
					},
					expand:{
						left: cc.width() - eopts.width
					},
					expandP:{
						top: copts.top,
						left: cc.width() - 28,
						width: 28,
						height: copts.height
					},
					collapse:{
						left: cc.width(),
						top: copts.top,
						height: copts.height
					}
				};
			} else if (region == 'west'){
				var wopts = panels['west'].panel('options');
				return {
					resizeC:{
						width: copts.width + wopts.width - 28,
						left: 28
					},
					expand:{
						left: 0
					},
					expandP:{
						left: 0,
						top: copts.top,
						width: 28,
						height: copts.height
					},
					collapse:{
						left: -wopts.width,
						top: copts.top,
						height: copts.height
					}
				};
			} else if (region == 'north'){
				var hh = cc.height() - 28;
				if (isVisible(panels.expandSouth)){
					hh -= panels.expandSouth.panel('options').height;
				} else if (isVisible(panels.south)){
					hh -= panels.south.panel('options').height;
				}
				panels.east.panel('resize', {top:28, height:hh});
				panels.west.panel('resize', {top:28, height:hh});
				if (isVisible(panels.expandEast)) panels.expandEast.panel('resize', {top:28, height:hh});
				if (isVisible(panels.expandWest)) panels.expandWest.panel('resize', {top:28, height:hh});
				
				return {
					resizeC:{
						top: 28,
						height: hh
					},
					expand:{
						top:0
					},
					expandP:{
						top: 0,
						left: 0,
						width: cc.width(),
						height: 28
					},
					collapse:{
						top: -panels['north'].panel('options').height,
						width: cc.width()
					}
				};
			} else if (region == 'south'){
				var hh = cc.height() - 28;
				if (isVisible(panels.expandNorth)){
					hh -= panels.expandNorth.panel('options').height;
				} else if (isVisible(panels.north)){
					hh -= panels.north.panel('options').height;
				}
				panels.east.panel('resize', {height:hh});
				panels.west.panel('resize', {height:hh});
				if (isVisible(panels.expandEast)) panels.expandEast.panel('resize', {height:hh});
				if (isVisible(panels.expandWest)) panels.expandWest.panel('resize', {height:hh});
				
				return {
					resizeC:{
						height: hh
					},
					expand:{
						top: cc.height()-panels['south'].panel('options').height
					},
					expandP:{
						top: cc.height() - 28,
						left: 0,
						width: cc.width(),
						height: 28
					},
					collapse:{
						top: cc.height(),
						width: cc.width()
					}
				};
			}
		}
	}
	
	function expandPanel(container, region){
		var panels = $.data(container, 'layout').panels;
		
		var eopts = getOption();
		var p = panels[region];
		if (p.panel('options').onBeforeExpand.call(p) == false) return;
		var expandP = 'expand' + region.substring(0,1).toUpperCase() + region.substring(1);
		panels[expandP].panel('close');
		p.panel('panel').stop(true,true);
		p.panel('expand',false).panel('open').panel('resize', eopts.collapse);
		p.panel('panel').animate(eopts.expand, function(){
			setSize(container);
		});
		
		/**
		 * get expand option: { collapse:{}, expand:{} }
		 */
		function getOption(){
			var cc = $(container);
			var copts = panels.center.panel('options');
			
			if (region == 'east' && panels.expandEast){
				return {
					collapse:{
						left: cc.width(),
						top: copts.top,
						height: copts.height
					},
					expand:{
						left: cc.width() - panels['east'].panel('options').width
					}
				};
			} else if (region == 'west' && panels.expandWest){
				return {
					collapse:{
						left: -panels['west'].panel('options').width,
						top: copts.top,
						height: copts.height
					},
					expand:{
						left: 0
					}
				};
			} else if (region == 'north' && panels.expandNorth){
				return {
					collapse:{
						top: -panels['north'].panel('options').height,
						width: cc.width()
					},
					expand:{
						top: 0
					}
				};
			} else if (region == 'south' && panels.expandSouth){
				return {
					collapse:{
						top: cc.height(),
						width: cc.width()
					},
					expand:{
						top: cc.height()-panels['south'].panel('options').height
					}
				};
			}
		}
	}
	
// function bindEvents(container){
// var panels = $.data(container, 'layout').panels;
// var cc = $(container);
//		
// // bind east panel events
// if (panels.east.length){
// panels.east.panel('panel').bind('mouseover','east',_collapse);
// }
//		
// // bind west panel events
// if (panels.west.length){
// panels.west.panel('panel').bind('mouseover','west',_collapse);
// }
//		
// // bind north panel events
// if (panels.north.length){
// panels.north.panel('panel').bind('mouseover','north',_collapse);
// }
//		
// // bind south panel events
// if (panels.south.length){
// panels.south.panel('panel').bind('mouseover','south',_collapse);
// }
//		
// panels.center.panel('panel').bind('mouseover','center',_collapse);
//		
// function _collapse(e){
// if (resizing == true) return;
//			
// if (e.data != 'east' && isVisible(panels.east) &&
// isVisible(panels.expandEast)){
// collapsePanel(container, 'east');
// }
// if (e.data != 'west' && isVisible(panels.west) &&
// isVisible(panels.expandWest)){
// collapsePanel(container, 'west');
// }
// if (e.data != 'north' && isVisible(panels.north) &&
// isVisible(panels.expandNorth)){
// collapsePanel(container, 'north');
// }
// if (e.data != 'south' && isVisible(panels.south) &&
// isVisible(panels.expandSouth)){
// collapsePanel(container, 'south');
// }
// return false;
// }
// }
	
	function isVisible(pp){
		if (!pp) return false;
		if (pp.length){
			return pp.panel('panel').is(':visible');
		} else {
			return false;
		}
	}
	
	function initCollapse(container){
		var panels = $.data(container, 'layout').panels;
		if (panels.east.length && panels.east.panel('options').collapsed) {
			collapsePanel(container, 'east', 0);
		}
		if (panels.west.length && panels.west.panel('options').collapsed) {
			collapsePanel(container, 'west', 0);
		}
		if (panels.north.length && panels.north.panel('options').collapsed) {
			collapsePanel(container, 'north', 0);
		}
		if (panels.south.length && panels.south.panel('options').collapsed) {
			collapsePanel(container, 'south', 0);
		}
	}
	
	$.fn.layout = function(options, param){
		if (typeof options == 'string'){
			return $.fn.layout.methods[options](this, param);
		}
		
		options = options || {};
		return this.each(function(){
			var state = $.data(this, 'layout');
			if (state){
				$.extend(state.options, options);
			} else {
				var opts = $.extend({}, $.fn.layout.defaults, $.fn.layout.parseOptions(this), options);
				$.data(this, 'layout', {
					options: opts,
					panels: {center:$(), north:$(), south:$(), east:$(), west:$()}
				});
				init(this);
// bindEvents(this);
			}
			setSize(this);
			initCollapse(this);
		});
	};
	
	$.fn.layout.methods = {
		resize: function(jq){
			return jq.each(function(){
				setSize(this);
			});
		},
		panel: function(jq, region){
			return $.data(jq[0], 'layout').panels[region];
		},
		collapse: function(jq, region){
			return jq.each(function(){
				collapsePanel(this, region);
			});
		},
		expand: function(jq, region){
			return jq.each(function(){
				expandPanel(this, region);
			});
		},
		add: function(jq, options){
			return jq.each(function(){
				addPanel(this, options);
				setSize(this);
				if ($(this).layout('panel', options.region).panel('options').collapsed){
					collapsePanel(this, options.region, 0);
				}
			});
		},
		remove: function(jq, region){
			return jq.each(function(){
				removePanel(this, region);
				setSize(this);
			});
		}
	};
	
	$.fn.layout.parseOptions = function(target){
		return $.extend({}, $.parser.parseOptions(target,[{fit:'boolean'}]));
	};
	
	$.fn.layout.defaults = {
		fit: false
	};
	
	$.fn.layout.parsePanelOptions = function(target){
		var t = $(target);
		return $.extend({}, $.fn.panel.parseOptions(target), 
				$.parser.parseOptions(target, [
					'region',{split:'boolean',minWidth:'number',minHeight:'number',maxWidth:'number',maxHeight:'number'}
				]));
	};
	
	$.fn.layout.paneldefaults = $.extend({}, $.fn.panel.defaults, {
		region:null,	// possible values are:
						// 'north','south','east','west','center'
		split:false,
		minWidth:10,
		minHeight:10,
		maxWidth:10000,
		maxHeight:10000
	});
})(jQuery);
/**
 * menu - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php
 */
(function($){
	
	/**
	 * initialize the target menu, the function can be invoked only once
	 */
	function init(target){
		$(target).appendTo('body');
		$(target).addClass('menu-top');	// the top menu
		
		$(document).unbind('.menu').bind('mousedown.menu', function(e){
			var allMenu = $('body>div.menu:visible');
			var m = $(e.target).closest('div.menu', allMenu);
			if (m.length){return}
			$('body>div.menu-top:visible').menu('hide');
		});
		
		var menus = splitMenu($(target));
		for(var i=0; i<menus.length; i++){
			createMenu(menus[i]);
		}
		
		function splitMenu(menu){
			var menus = [];
			menu.addClass('menu');
			menus.push(menu);
			if (!menu.hasClass('menu-content')){
				menu.children('div').each(function(){
					var submenu = $(this).children('div');
					if (submenu.length){
						submenu.insertAfter(target);
						this.submenu = submenu;		// point to the sub menu
						var mm = splitMenu(submenu);
						menus = menus.concat(mm);
					}
				});
			}
			return menus;
		}
		
		function createMenu(menu){
			var width = $.parser.parseOptions(menu[0], ['width']).width;
			if (menu.hasClass('menu-content')){
				menu[0].originalWidth = width || menu._outerWidth();
			} else {
				menu[0].originalWidth = width || 0;
				menu.children('div').each(function(){
					var item = $(this);
					if (item.hasClass('menu-sep')){
// item.html('&nbsp;');
					} else {
						var itemOpts = $.extend({}, $.parser.parseOptions(this,['name','iconCls','href']), {
							disabled: (item.attr('disabled') ? true : undefined)
						});
						item[0].itemName = itemOpts.name || '';
						item[0].itemHref = itemOpts.href || '';
// item.attr('name',itemOpts.name || '').attr('href',itemOpts.href || '');
						
						var text = item.addClass('menu-item').html();
						item.empty().append($('<div class="menu-text"></div>').html(text));
						if (itemOpts.iconCls){
							$('<div class="menu-icon"></div>').addClass(itemOpts.iconCls).appendTo(item);
						}
						if (itemOpts.disabled){
							setDisabled(target, item[0], true);
						}
						if (item[0].submenu){
							$('<div class="menu-rightarrow"></div>').appendTo(item);	// has
																						// sub
																						// menu
						}
						
						bindMenuItemEvent(target, item);
					}
				});
				$('<div class="menu-line"></div>').prependTo(menu);
			}
			setMenuWidth(target, menu);
			menu.hide();
			
			bindMenuEvent(target, menu);
		}
	}
	
	function setMenuWidth(target, menu){
		var opts = $.data(target, 'menu').options;
		var d = menu.css('display');
		menu.css({
			display: 'block',
			left:-10000
		});
		
// menu.find('div.menu-item')._outerHeight(22);
		var width = 0;
		menu.find('div.menu-text').each(function(){
			if (width < $(this)._outerWidth()){
				width = $(this)._outerWidth();
			}
			$(this).closest('div.menu-item')._outerHeight($(this)._outerHeight()+2);
		});
		width += 65;
		menu._outerWidth(Math.max((menu[0].originalWidth || 0), width, opts.minWidth));
		
		menu.css('display', d);
	}
	
	/**
	 * bind menu event
	 */
	function bindMenuEvent(target, menu){
		var state = $.data(target, 'menu');
		menu.unbind('.menu').bind('mouseenter.menu', function(){
			if (state.timer){
				clearTimeout(state.timer);
				state.timer = null;
			}
		}).bind('mouseleave.menu', function(){
			state.timer = setTimeout(function(){
				hideAll(target);
			}, 100);
		});
	}
	
	/**
	 * bind menu item event
	 */
	function bindMenuItemEvent(target, item){
		item.unbind('.menu');
		item.bind('click.menu', function(){
			if ($(this).hasClass('menu-item-disabled')){
				return;
			}
			// only the sub menu clicked can hide all menus
			if (!this.submenu){
				hideAll(target);
				var href = $(this).attr('href');
				if (href){
					location.href = href;
				}
			}
			var item = $(target).menu('getItem', this);
			$.data(target, 'menu').options.onClick.call(target, item);
		}).bind('mouseenter.menu', function(e){
			// hide other menu
			item.siblings().each(function(){
				if (this.submenu){
					hideMenu(this.submenu);
				}
				$(this).removeClass('menu-active');
			});
			// show this menu
			item.addClass('menu-active');
			
			if ($(this).hasClass('menu-item-disabled')){
				item.addClass('menu-active-disabled');
				return;
			}
			
			var submenu = item[0].submenu;
			if (submenu){
				$(target).menu('show', {
					menu: submenu,
					parent: item
				});
			}
		}).bind('mouseleave.menu', function(e){
			item.removeClass('menu-active menu-active-disabled');
			var submenu = item[0].submenu;
			if (submenu){
				if (e.pageX>=parseInt(submenu.css('left'))){
					item.addClass('menu-active');
				} else {
					hideMenu(submenu);
				}
				
			} else {
				item.removeClass('menu-active');
			}
		});
	}
	
	/**
	 * hide top menu and it's all sub menus
	 */
	function hideAll(target){
		var state = $.data(target, 'menu');
		if (state){
			if ($(target).is(':visible')){
				hideMenu($(target));
				state.options.onHide.call(target);
			}
		}
		return false;
	}
	
	/**
	 * show the menu, the 'param' object has one or more properties: left: the
	 * left position to display top: the top position to display menu: the menu
	 * to display, if not defined, the 'target menu' is used parent: the parent
	 * menu item to align to alignTo: the element object to align to
	 */
	function showMenu(target, param){
		var left,top;
		param = param || {};
		var menu = $(param.menu || target);
		if (menu.hasClass('menu-top')){
			var opts = $.data(target, 'menu').options;
			$.extend(opts, param);
			left = opts.left;
			top = opts.top;
			if (opts.alignTo){
				var at = $(opts.alignTo);
				left = at.offset().left;
				top = at.offset().top + at._outerHeight();
			}
// if (param.left != undefined){left = param.left}
// if (param.top != undefined){top = param.top}
			if (left + menu.outerWidth() > $(window)._outerWidth() + $(document)._scrollLeft()){
				left = $(window)._outerWidth() + $(document).scrollLeft() - menu.outerWidth() - 5;
			}
			if (top + menu.outerHeight() > $(window)._outerHeight() + $(document).scrollTop()){
				top -= menu.outerHeight();
			}
		} else {
			var parent = param.parent;	// the parent menu item
			left = parent.offset().left + parent.outerWidth() - 2;
			if (left + menu.outerWidth() + 5 > $(window)._outerWidth() + $(document).scrollLeft()){
				left = parent.offset().left - menu.outerWidth() + 2;
			}
			var top = parent.offset().top - 3;
			if (top + menu.outerHeight() > $(window)._outerHeight() + $(document).scrollTop()){
				top = $(window)._outerHeight() + $(document).scrollTop() - menu.outerHeight() - 5;
			}
		}
		menu.css({left:left,top:top});
		menu.show(0, function(){
			if (!menu[0].shadow){
				menu[0].shadow = $('<div class="menu-shadow"></div>').insertAfter(menu);
			}
			menu[0].shadow.css({
				display:'block',
				zIndex:$.fn.menu.defaults.zIndex++,
				left:menu.css('left'),
				top:menu.css('top'),
				width:menu.outerWidth(),
				height:menu.outerHeight()
			});
			menu.css('z-index', $.fn.menu.defaults.zIndex++);
			if (menu.hasClass('menu-top')){
				$.data(menu[0], 'menu').options.onShow.call(menu[0]);
			}
		});
	}
	
	function hideMenu(menu){
		if (!menu) return;
		
		hideit(menu);
		menu.find('div.menu-item').each(function(){
			if (this.submenu){
				hideMenu(this.submenu);
			}
			$(this).removeClass('menu-active');
		});
		
		function hideit(m){
			m.stop(true,true);
			if (m[0].shadow){
				m[0].shadow.hide();
			}
			m.hide();
		}
	}
	
	function findItem(target, text){
		var result = null;
		var tmp = $('<div></div>');
		function find(menu){
			menu.children('div.menu-item').each(function(){
				var item = $(target).menu('getItem', this);
				var s = tmp.empty().html(item.text).text();
				if (text == $.trim(s)) {
					result = item;
				} else if (this.submenu && !result){
					find(this.submenu);
				}
			});
		}
		find($(target));
		tmp.remove();
		return result;
	}
	
	function setDisabled(target, itemEl, disabled){
		var t = $(itemEl);
		
		if (disabled){
			t.addClass('menu-item-disabled');
			if (itemEl.onclick){
				itemEl.onclick1 = itemEl.onclick;
				itemEl.onclick = null;
			}
		} else {
			t.removeClass('menu-item-disabled');
			if (itemEl.onclick1){
				itemEl.onclick = itemEl.onclick1;
				itemEl.onclick1 = null;
			}
		}
	}
	
	function appendItem(target, param){
		var menu = $(target);
		if (param.parent){
			if (!param.parent.submenu){
				var submenu = $('<div class="menu"><div class="menu-line"></div></div>').appendTo('body');
				submenu.hide();
				param.parent.submenu = submenu;
				$('<div class="menu-rightarrow"></div>').appendTo(param.parent);
			}
			menu = param.parent.submenu;
		}
		var item = $('<div class="menu-item"></div>').appendTo(menu);
		$('<div class="menu-text"></div>').html(param.text).appendTo(item);
		if (param.iconCls) $('<div class="menu-icon"></div>').addClass(param.iconCls).appendTo(item);
		if (param.id) item.attr('id', param.id);
// if (param.href) item.attr('href', param.href);
// if (param.name) item.attr('name', param.name);
		if (param.name){item[0].itemName = param.name}
		if (param.href){item[0].itemHref = param.href}
		if (param.onclick){
			if (typeof param.onclick == 'string'){
				item.attr('onclick', param.onclick);
			} else {
				item[0].onclick = eval(param.onclick);
			}
		}
		if (param.handler) item[0].onclick = eval(param.handler);
		
		bindMenuItemEvent(target, item);
		
		if (param.disabled){
			setDisabled(target, item[0], true);
		}
		bindMenuEvent(target, menu);
		setMenuWidth(target, menu);
	}
	
	function removeItem(target, itemEl){
		function removeit(el){
			if (el.submenu){
				el.submenu.children('div.menu-item').each(function(){
					removeit(this);
				});
				var shadow = el.submenu[0].shadow;
				if (shadow) shadow.remove();
				el.submenu.remove();
			}
			$(el).remove();
		}
		removeit(itemEl);
	}
	
	function destroyMenu(target){
		$(target).children('div.menu-item').each(function(){
			removeItem(target, this);
		});
		if (target.shadow) target.shadow.remove();
		$(target).remove();
	}
	
	$.fn.menu = function(options, param){
		if (typeof options == 'string'){
			return $.fn.menu.methods[options](this, param);
		}
		
		options = options || {};
		return this.each(function(){
			var state = $.data(this, 'menu');
			if (state){
				$.extend(state.options, options);
			} else {
				state = $.data(this, 'menu', {
					options: $.extend({}, $.fn.menu.defaults, $.fn.menu.parseOptions(this), options)
				});
				init(this);
			}
			$(this).css({
				left: state.options.left,
				top: state.options.top
			});
		});
	};
	
	$.fn.menu.methods = {
		options: function(jq){
			return $.data(jq[0], 'menu').options;
		},
		show: function(jq, pos){
			return jq.each(function(){
				showMenu(this, pos);
			});
		},
		hide: function(jq){
			return jq.each(function(){
				hideAll(this);
			});
		},
		destroy: function(jq){
			return jq.each(function(){
				destroyMenu(this);
			});
		},
		/**
		 * set the menu item text param: { target: DOM object, indicate the menu
		 * item text: string, the new text }
		 */
		setText: function(jq, param){
			return jq.each(function(){
				$(param.target).children('div.menu-text').html(param.text);
			});
		},
		/**
		 * set the menu icon class param: { target: DOM object, indicate the
		 * menu item iconCls: the menu item icon class }
		 */
		setIcon: function(jq, param){
			return jq.each(function(){
				var item = $(this).menu('getItem', param.target);
				if (item.iconCls){
					$(item.target).children('div.menu-icon').removeClass(item.iconCls).addClass(param.iconCls);
				} else {
					$('<div class="menu-icon"></div>').addClass(param.iconCls).appendTo(param.target);
				}
			});
		},
		/**
		 * get the menu item data that contains the following property: {
		 * target: DOM object, the menu item id: the menu id text: the menu item
		 * text iconCls: the icon class href: a remote address to redirect to
		 * onclick: a function to be called when the item is clicked }
		 */
		getItem: function(jq, itemEl){
			var t = $(itemEl);
			var item = {
				target: itemEl,
				id: t.attr('id'),
				text: $.trim(t.children('div.menu-text').html()),
				disabled: t.hasClass('menu-item-disabled'),
// href: t.attr('href'),
// name: t.attr('name'),
				name: itemEl.itemName,
				href: itemEl.itemHref,
				onclick: itemEl.onclick
			}
			var icon = t.children('div.menu-icon');
			if (icon.length){
				var cc = [];
				var aa = icon.attr('class').split(' ');
				for(var i=0; i<aa.length; i++){
					if (aa[i] != 'menu-icon'){
						cc.push(aa[i]);
					}
				}
				item.iconCls = cc.join(' ');
			}
			return item;
		},
		findItem: function(jq, text){
			return findItem(jq[0], text);
		},
		/**
		 * append menu item, the param contains following properties:
		 * parent,id,text,iconCls,href,onclick when parent property is assigned,
		 * append menu item to it
		 */
		appendItem: function(jq, param){
			return jq.each(function(){
				appendItem(this, param);
			});
		},
		removeItem: function(jq, itemEl){
			return jq.each(function(){
				removeItem(this, itemEl);
			});
		},
		enableItem: function(jq, itemEl){
			return jq.each(function(){
				setDisabled(this, itemEl, false);
			});
		},
		disableItem: function(jq, itemEl){
			return jq.each(function(){
				setDisabled(this, itemEl, true);
			});
		}
	};
	
	$.fn.menu.parseOptions = function(target){
		return $.extend({}, $.parser.parseOptions(target, ['left','top',{minWidth:'number'}]));
	};
	
	$.fn.menu.defaults = {
		zIndex:110000,
		left: 0,
		top: 0,
		minWidth: 120,
		onShow: function(){},
		onHide: function(){},
		onClick: function(item){}
	};
})(jQuery);
/**
 * menubutton - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php
 * 
 * Dependencies: linkbutton menu
 */
(function($){
	
	function init(target){
		var opts = $.data(target, 'menubutton').options;
		var btn = $(target);
		btn.removeClass(opts.cls.btn1+' '+opts.cls.btn2).addClass('m-btn');
		btn.linkbutton($.extend({}, opts, {
			text: opts.text + '<span class="' + opts.cls.arrow + '">&nbsp;</span>'
		}));
		
		if (opts.menu){
			$(opts.menu).menu();
			var mopts = $(opts.menu).menu('options');
			var onShow = mopts.onShow;
			var onHide = mopts.onHide;
			$.extend(mopts, {
				onShow: function(){
					var mopts = $(this).menu('options');
					var btn = $(mopts.alignTo);
					var opts = btn.menubutton('options');
					btn.addClass((opts.plain==true) ? opts.cls.btn2 : opts.cls.btn1);
					onShow.call(this);
				},
				onHide: function(){
					var mopts = $(this).menu('options');
					var btn = $(mopts.alignTo);
					var opts = btn.menubutton('options');
					btn.removeClass((opts.plain==true) ? opts.cls.btn2 : opts.cls.btn1);
					onHide.call(this);
				}
			});
		}
		setDisabled(target, opts.disabled);
	}
	
	function setDisabled(target, disabled){
		var opts = $.data(target, 'menubutton').options;
		opts.disabled = disabled;
		
		var btn = $(target);
		var t = btn.find('.'+opts.cls.trigger);
		if (!t.length){t = btn}
		t.unbind('.menubutton');
		if (disabled){
			btn.linkbutton('disable');
		} else {
			btn.linkbutton('enable');
			
			var timeout = null;
			t.bind('click.menubutton', function(){
				showMenu(target);
				return false;
			}).bind('mouseenter.menubutton', function(){
				timeout = setTimeout(function(){
					showMenu(target);
				}, opts.duration);
				return false;
			}).bind('mouseleave.menubutton', function(){
				if (timeout){
					clearTimeout(timeout);
				}
			});
		}
	}
	
	function showMenu(target){
		var opts = $.data(target, 'menubutton').options;
		if (opts.disabled || !opts.menu){return}
		$('body>div.menu-top').menu('hide');
		var btn = $(target);
		var mm = $(opts.menu);
		if (mm.length){
			mm.menu('options').alignTo = btn;
			mm.menu('show', {alignTo:btn});
		}
		btn.blur();
	}
	
	$.fn.menubutton = function(options, param){
		if (typeof options == 'string'){
			var method = $.fn.menubutton.methods[options];
			if (method){
				return method(this, param);
			} else {
				return this.linkbutton(options, param);
			}
		}
		
		options = options || {};
		return this.each(function(){
			var state = $.data(this, 'menubutton');
			if (state){
				$.extend(state.options, options);
			} else {
				$.data(this, 'menubutton', {
					options: $.extend({}, $.fn.menubutton.defaults, $.fn.menubutton.parseOptions(this), options)
				});
				$(this).removeAttr('disabled');
			}
			
			init(this);
		});
	};
	
	$.fn.menubutton.methods = {
		options: function(jq){
			var bopts = jq.linkbutton('options');
			var mopts = $.data(jq[0], 'menubutton').options;
			mopts.toggle = bopts.toggle;
			mopts.selected = bopts.selected;
			return mopts;
		},
		enable: function(jq){
			return jq.each(function(){
				setDisabled(this, false);
			});
		},
		disable: function(jq){
			return jq.each(function(){
				setDisabled(this, true);
			});
		},
		destroy: function(jq){
			return jq.each(function(){
				var opts = $(this).menubutton('options');
				if (opts.menu){
					$(opts.menu).menu('destroy');
				}
				$(this).remove();
			});
		}
	};
	
	$.fn.menubutton.parseOptions = function(target){
		var t = $(target);
		return $.extend({}, $.fn.linkbutton.parseOptions(target), 
				$.parser.parseOptions(target, ['menu',{plain:'boolean',duration:'number'}]));
	};
	
	$.fn.menubutton.defaults = $.extend({}, $.fn.linkbutton.defaults, {
		plain: true,
		menu: null,
		duration: 100,
		cls: {
			btn1: 'm-btn-active',
			btn2: 'm-btn-plain-active',
			arrow: 'm-btn-downarrow',
			trigger: 'm-btn'
		}
	});
})(jQuery);
/**
 * splitbutton - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php
 * 
 * Dependencies: menubutton
 */
(function($){
	
	function init(target){
		var opts = $.data(target, 'splitbutton').options;
		$(target).menubutton(opts);
	}
	
	$.fn.splitbutton = function(options, param){
		if (typeof options == 'string'){
			var method = $.fn.splitbutton.methods[options];
			if (method){
				return method(this, param);
			} else {
				return this.menubutton(options, param);
			}
		}
		
		options = options || {};
		return this.each(function(){
			var state = $.data(this, 'splitbutton');
			if (state){
				$.extend(state.options, options);
			} else {
				$.data(this, 'splitbutton', {
					options: $.extend({}, $.fn.splitbutton.defaults, $.fn.splitbutton.parseOptions(this), options)
				});
				$(this).removeAttr('disabled');
			}
			init(this);
		});
	};
	
	$.fn.splitbutton.methods = {
		options: function(jq){
			var mopts = jq.menubutton('options');
			var sopts = $.data(jq[0], 'splitbutton').options;
			$.extend(sopts, {
				disabled: mopts.disabled,
				toggle: mopts.toggle,
				selected: mopts.selected
			});
			return sopts;
		}
	};
	
	$.fn.splitbutton.parseOptions = function(target){
		var t = $(target);
		return $.extend({}, $.fn.linkbutton.parseOptions(target), 
				$.parser.parseOptions(target, ['menu',{plain:'boolean',duration:'number'}]));
	};
	
	$.fn.splitbutton.defaults = $.extend({}, $.fn.linkbutton.defaults, {
		plain: true,
		menu: null,
		duration: 100,
		cls: {
			btn1: 's-btn-active',
			btn2: 's-btn-plain-active',
			arrow: 's-btn-downarrow',
			trigger: 's-btn-downarrow'
		}
	});
})(jQuery);
/**
 * searchbox - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php
 * 
 * Dependencies: menubutton
 * 
 */
(function($){
	function init(target){
		$(target).hide();
		var span = $('<span class="searchbox"></span>').insertAfter(target);
		var input = $('<input type="text" class="searchbox-text">').appendTo(span);
		$('<span><span class="searchbox-button"></span></span>').appendTo(span);
		
		var name = $(target).attr('name');
		if (name){
			input.attr('name', name);
			$(target).removeAttr('name').attr('searchboxName', name);
		}
		
		return span;
	}
	
	function setSize(target, width){
		var opts = $.data(target, 'searchbox').options;
		var sb = $.data(target, 'searchbox').searchbox;
		if (width) opts.width = width;
		sb.appendTo('body');
		
		if (isNaN(opts.width)){
			opts.width = sb._outerWidth();
		}
		var button = sb.find('span.searchbox-button');
		var menu = sb.find('a.searchbox-menu');
		var input = sb.find('input.searchbox-text');
		sb._outerWidth(opts.width)._outerHeight(opts.height);
		input._outerWidth(sb.width() - menu._outerWidth() - button._outerWidth());
		input.css({
			height: sb.height()+'px',
			lineHeight: sb.height()+'px'
		});
		menu._outerHeight(sb.height());
		
		button._outerHeight(sb.height());
		var bleft = menu.find('span.l-btn-left');
		bleft._outerHeight(sb.height());
		bleft.find('span.l-btn-text,span.m-btn-downarrow').css({
			height: bleft.height()+'px',
			lineHeight: bleft.height()+'px'
		});
		
		sb.insertAfter(target);
	}
	
	function buildMenu(target){
		var state = $.data(target, 'searchbox');
		var opts = state.options;
		
		if (opts.menu){
			state.menu = $(opts.menu).menu({
				onClick:function(item){
					attachMenu(item);
				}
			});
			var item = state.menu.children('div.menu-item:first');
			state.menu.children('div.menu-item').each(function(){
				var itemOpts = $.extend({}, $.parser.parseOptions(this), {
					selected: ($(this).attr('selected') ? true : undefined)
				});
				if (itemOpts.selected) {
					item = $(this);
					return false;
				}
			});
			item.triggerHandler('click');
		} else {
			state.searchbox.find('a.searchbox-menu').remove();
			state.menu = null;
		}
		
		function attachMenu(item){
			state.searchbox.find('a.searchbox-menu').remove();
			var mb = $('<a class="searchbox-menu" href="javascript:void(0)"></a>').html(item.text);
			mb.prependTo(state.searchbox).menubutton({
				menu:state.menu,
				iconCls:item.iconCls
			});
			state.searchbox.find('input.searchbox-text').attr('name', $(item.target).attr('name') || item.text);
			setSize(target);
		}
	}
	
	function bindEvents(target){
		var state = $.data(target, 'searchbox');
		var opts = state.options;
		var input = state.searchbox.find('input.searchbox-text');
		var button = state.searchbox.find('.searchbox-button');
		input.unbind('.searchbox').bind('blur.searchbox', function(e){
			opts.value = $(this).val();
			if (opts.value == ''){
				$(this).val(opts.prompt);
				$(this).addClass('searchbox-prompt');
			} else {
				$(this).removeClass('searchbox-prompt');
			}
		}).bind('focus.searchbox', function(e){
			if ($(this).val() != opts.value){
				$(this).val(opts.value);
			}
			$(this).removeClass('searchbox-prompt');
		}).bind('keydown.searchbox', function(e){
			if (e.keyCode == 13){
				e.preventDefault();
				var name = $.fn.prop ? input.prop('name') : input.attr('name');
				opts.value = $(this).val();
				opts.searcher.call(target, opts.value, name);
				return false;
			}
		});
		
		button.unbind('.searchbox').bind('click.searchbox', function(){
			var name = $.fn.prop ? input.prop('name') : input.attr('name');
			opts.searcher.call(target, opts.value, name);
		}).bind('mouseenter.searchbox', function(){
			$(this).addClass('searchbox-button-hover');
		}).bind('mouseleave.searchbox', function(){
			$(this).removeClass('searchbox-button-hover');
		});
	}
	
	function initValue(target){
		var state = $.data(target, 'searchbox');
		var opts = state.options;
		var input = state.searchbox.find('input.searchbox-text');
		if (opts.value == ''){
			input.val(opts.prompt);
			input.addClass('searchbox-prompt');
		} else { 
			input.val(opts.value);
			input.removeClass('searchbox-prompt');
		}
	}
	
	$.fn.searchbox = function(options, param){
		if (typeof options == 'string'){
			return $.fn.searchbox.methods[options](this, param);
		}
		
		options = options || {};
		return this.each(function(){
			var state = $.data(this, 'searchbox');
			if (state){
				$.extend(state.options, options);
			} else {
				state = $.data(this, 'searchbox', {
					options: $.extend({}, $.fn.searchbox.defaults, $.fn.searchbox.parseOptions(this), options),
					searchbox: init(this)
				});
			}
			buildMenu(this);
			initValue(this);
			bindEvents(this);
			setSize(this);
		});
	}
	
	$.fn.searchbox.methods = {
		options: function(jq){
			return $.data(jq[0], 'searchbox').options;
		},
		menu: function(jq){
			return $.data(jq[0], 'searchbox').menu;
		},
		textbox: function(jq){
			return $.data(jq[0], 'searchbox').searchbox.find('input.searchbox-text');
		},
		getValue: function(jq){
			return $.data(jq[0], 'searchbox').options.value;
		},
		setValue: function(jq, value){
			return jq.each(function(){
				$(this).searchbox('options').value = value;
				$(this).searchbox('textbox').val(value);
				$(this).searchbox('textbox').blur();
			});
		},
		getName: function(jq){
			return $.data(jq[0], 'searchbox').searchbox.find('input.searchbox-text').attr('name');
		},
		selectName: function(jq, name){
			return jq.each(function(){
				var menu = $.data(this, 'searchbox').menu;
				if (menu){
					menu.children('div.menu-item[name="'+name+'"]').triggerHandler('click');
				}
			});
		},
		destroy: function(jq){
			return jq.each(function(){
				var menu = $(this).searchbox('menu');
				if (menu){
					menu.menu('destroy');
				}
				$.data(this, 'searchbox').searchbox.remove();
				$(this).remove();
			});
		},
		resize: function(jq, width){
			return jq.each(function(){
				setSize(this, width);
			});
		}
	};
	
	$.fn.searchbox.parseOptions = function(target){
		var t = $(target);
		return $.extend({},
				$.parser.parseOptions(target, ['width','height','prompt','menu']), {
			value: t.val(),
			searcher: (t.attr('searcher') ? eval(t.attr('searcher')) : undefined)
		});
	};
	
	$.fn.searchbox.defaults = {
		width:'auto',
		height:22,
		prompt:'',
		value:'',
		menu:null,
		searcher:function(value,name){}
	};
})(jQuery);
/**
 * validatebox - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php
 * 
 * Dependencies: tooltip
 * 
 */
(function($){
	
	function init(target){
		var state = $.data(target, 'validatebox');
		var opts = state.options;
		$(target).addClass('validatebox-text');
		if(opts.emptyText && !target.value){
			$(target).addClass('box-hasemptytext');
			$(target).val(opts.emptyText).css('color', '#ccc');
		}
		/** on 2013-10-25 */
		if (opts.required){
			/*
			 * var roles= $(target).attr('data-roles');
			 * if(roles=="mui-validatebox" ||roles=="mui-numberbox"){ $("<span
			 * style='color:red'> *</span>").insertAfter(target); }else{ $("<span
			 * style='color:red'> *</span>").insertAfter($(target).parent()); }
			 */
			$(target).addClass('validatebox-required');
		}else{
			$(target).removeClass('validatebox-required');
		}
	/***/
	}
	
	function clear(target){
		var state = $(target).data('validatebox');
		if(state.options.emptyText && $(target).val() !== state.options.emptyText){
			$(target).val(state.options.emptyText).css('color', '#ccc');
		}
	}
	
	function reset(target){
		var state = $(target).data('validatebox');
		if(state.options.emptyText && $(target).val() !== state.options.emptyText){
			$(target).val(state.options.emptyText).css('color', '#ccc');
		}
	}
	
	function getValue(target){
		var state = $(target).data('validatebox');
		if(state.options.emptyText && $(target).val() === state.options.emptyText){
			return null;
		}else{
			return $(target).val();
		}
	}
	
	/**
	 * destroy the box, including it's tip object.
	 */
	function destroyBox(target){
		var state = $.data(target, 'validatebox');
		state.validating = false;
		$(target).tooltip('destroy');
		$(target).unbind();
		$(target).remove();
	}
	
	function bindEvents(target){
		var box = $(target);
		var state = $.data(target, 'validatebox');
		
		box.unbind('.validatebox');
		if (state.options.novalidate){return}
		box.bind('focus.validatebox', function(){
			if(state.options.emptyText && $(target).val() === state.options.emptyText){
				$(target).val("").css('color', '#000');
			}
			state.validating = true;
			state.value = undefined;
			(function(){
				if (state.validating){
					if (state.value != box.val()){	// when box value changed,
													// validate it
						state.value = box.val();
						if (state.timer){
							clearTimeout(state.timer);
						}
						state.timer = setTimeout(function(){
							$(target).validatebox('validate');
						}, state.options.delay);
					} else {
						fixTipPosition(target);	// correct the tip position
					}
					setTimeout(arguments.callee, 200);
				}
			})();
		}).bind('blur.validatebox', function(){
			if($.type(box.val()) === "string"){
				box.val($.trim(box.val()));
			}
			if(state.options.emptyText && !box.val()){
				box.val(state.options.emptyText).css('color', '#ccc');
			}
			if (state.timer){
				clearTimeout(state.timer);
				state.timer = undefined;
			}
			state.validating = false;
			hideTip(target);
		}).bind('mouseenter.validatebox', function(){
			if (box.hasClass('validatebox-invalid')){
				showTip(target);
			}
		}).bind('mouseleave.validatebox', function(){
			if (!state.validating){
				hideTip(target);
			}
		});
	}
	
	/**
	 * show tip message.
	 */
	function showTip(target){
		var state = $.data(target, 'validatebox');
		var opts = state.options;
		$(target).tooltip($.extend({}, opts.tipOptions, {
			content: state.message,
			position: opts.tipPosition,
			deltaX: opts.deltaX
		})).tooltip('show');
		state.tip = true;
	}
	
	function fixTipPosition(target){
		var state = $.data(target, 'validatebox');
		if (state && state.tip){
			$(target).tooltip('reposition');
		}
	}
	
	/**
	 * hide tip message.
	 */
	function hideTip(target){
		var state = $.data(target, 'validatebox');
		state.tip = false;
		$(target).tooltip('hide');
	}
	
	/**
	 * do validate action
	 */
	function validate(target){
		var state = $.data(target, 'validatebox');
		var opts = state.options;
		var box = $(target);
		var value = box.val();
		//获取checkbox组件信息20150210
		if($(target).attr('data-roles')=='mui-checkbox'){
			box = $(target).next();
			value = box.find('input:checked').val();
		}
		value = opts.emptyText&& value===opts.emptyText?'':value; 
		
		function setTipMessage(msg){
			state.message = msg;
		}
		function doValidate(vtype){
			var result = /([a-zA-Z_]+)(.*)/.exec(vtype);
			var rule = opts.rules[result[1]];
			if (rule && value){
				var param = eval(result[2]);
				if (!rule['validator'](value, param)){
					box.addClass('validatebox-invalid');
					
					var message = rule['message'];
					if (param){
						for(var i=0; i<param.length; i++){
							message = message.replace(new RegExp("\\{" + i + "\\}", "g"), param[i]);
						}
					}
					setTipMessage(opts.invalidMessage || message);
					if (state.validating){
						showTip(target);
					}
					return false;
				}
			}
			return true;
		}
		
		if (opts.novalidate || box.is(':disabled')){return true}	// do not
																	// need to
																	// do
																	// validation
		if (opts.required){
			if(typeof(value) == 'string' ){
				value = $.trim(value);
			}
			if(value == ''||value == undefined){
				box.addClass('validatebox-invalid');
				setTipMessage(opts.missingMessage);
				if (state.validating){
					showTip(target);
				}
				return false;
			}
		}
		if(opts.specialChar){
			if(typeof(value) == 'string' ){
				value = $.trim(value);
			}
			if (!doValidate("specialChar")){
				return false;
			};
		}
		
		if (opts.validType){
			if (typeof opts.validType == 'string'){
				if (!doValidate(opts.validType)){return false;};
			} else {
				for(var i=0; i<opts.validType.length; i++){
					if (!doValidate(opts.validType[i])){return false;}
				}
			}
		}
		
		box.removeClass('validatebox-invalid');
		hideTip(target);
		return true;
	}
	
	function setValidation(target, novalidate){
		var opts = $.data(target, 'validatebox').options;
		if (novalidate != undefined){opts.novalidate = novalidate}
		if (opts.novalidate){
			$(target).removeClass('validatebox-invalid');
			hideTip(target);
		}
		if(!opts.required){
			$(target).removeClass('validatebox-required');
		}
		bindEvents(target);
	}
	
	$.fn.validatebox = function(options, param){
		if (typeof options == 'string'){
			return $.fn.validatebox.methods[options](this, param);
		}
		
		options = options || {};
		return this.each(function(){
			var state = $.data(this, 'validatebox');
			if (state){
				$.extend(state.options, options);
			} else {
				$.data(this, 'validatebox', {
					options: $.extend({}, $.fn.validatebox.defaults, $.fn.validatebox.parseOptions(this), options)
				});
				init(this);
			}
			
		
			setValidation(this);
// bindEvents(this);
	// validate(this);
		});
	};
	
	$.fn.validatebox.methods = {
		options: function(jq){
			return $.data(jq[0], 'validatebox').options;
		},
		destroy: function(jq){
			return jq.each(function(){
				destroyBox(this);
			});
		},
		validate: function(jq){
			return jq.each(function(){
				validate(this);
			});
		},
		clear: function(jq){
			return jq.each(function(){
				clear(this);
			});
		},
		reset: function(jq){
			return jq.each(function(){
				reset(this);
			});
		},
		getValue: function(jq){
			return getValue(jq[0]);
		},
		isValid: function(jq){
			return validate(jq[0]);
		},
		enableValidation: function(jq){
			return jq.each(function(){
				setValidation(this, false);
			});
		},
		disableValidation: function(jq){
			return jq.each(function(){
				setValidation(this, true);
			});
		}
	};
	
	$.fn.validatebox.parseOptions = function(target){
		var t = $(target);
		return $.extend({}, $.parser.parseOptions(target, [
		    'validType','missingMessage','invalidMessage','tipPosition',{delay:'number',deltaX:'number'}
		]), {
			required: (t.attr('required') ? true : undefined),
			novalidate: (t.attr('novalidate') != undefined ? true : undefined)
		});
	};
	
	$.fn.validatebox.defaults = {
		required: false,
		specialChar:false,
		validType: null,
		delay: 200,	// delay to validate from the last inputting value.
		missingMessage: 'This field is required.',
		invalidMessage: null,
		tipPosition: 'right',	// Possible values: 'left','right'.
		deltaX: 0,
		novalidate: false,
		tipOptions: {	// the options to create tooltip
			showEvent: 'none',
			hideEvent: 'none',
			showDelay: 0,
			hideDelay: 0,
			zIndex: '',
			onShow: function(){
				$(this).tooltip('tip').css({
					color: '#000',
					borderColor: '#CC9933',
					backgroundColor: '#FFFFCC'
				});
			},
			onHide: function(){
				$(this).tooltip('destroy');
			}
		},
		
		rules: {
			phone:{
				validator: function(value){
					return /^(13|14|15|17|18)\d{9}$/.test(value) || /^(\(0\d{2,3}\))[-]?\d{7,8}$/.test(value) || /^(0\d{2,3})[-]?\d{7,8}$/.test(value);
				},
				message: '请输入正确的手机号码或电话号码'
			},
			cellphone: {
				validator: function(value){
					return /^(13|14|15|17|18)\d{9}$/.test(value);
				},
				message: '请输入正确的手机号码'
			},
			telephone : {
				validator: function(value){
					return /^(\(0\d{2,3}\))[-]?\d{7,8}$/.test(value) || /^(0\d{2,3})[-]?\d{7,8}$/.test(value);
				},
				message: '请输入正确的电话号码'
			},
			specialChar: {
				validator: function(value){
					return !/[%_@#<>$^`]+/i.test(value);
				},
				message: '不能包含特殊字符如【%_@#<>$^`】'
			},
			email:{
				validator: function(value){
					return /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i.test(value);
				},
				message: '请输入有效的电子邮件地址'
			},
			idcard:{
				validator: function(value){
					var bo=/^(\d{6})(18|19|20)?(\d{2})([01]\d)([0123]\d)(\d{3})(\d|X)?$/.test(value);
					var year = value. substr(6,4);
					var month = value. substr(10,2);
					var day = value. substr(12,2);
					if(bo==false||month>12||day>31){
						return false;
					}else{
						return true;
					}
				},
				message: '请输入有效的身份证号码'
			},
			url: {
				validator: function(value){
					return /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(value);
				},
				message: '请输入有效的URL地址'
			},
			ip: {
				validator: function(value){
					return /^([1]{1}|[1-9]{1}[0]|[1-9]{1,2}|1\d\d|2[0-1]\d|22[0-3])(\.([0]{1}|[1-9]{1}[0]|[1-9]{1,2}|1\d\d|2[0-4]\d|25[0-5])){3}$/i.test(value);
				},
				message: '请输入有效的ip地址'
			},
			mac: {
				validator: function(value){
					return /^\b[0-9A-F]{2}([-:]?)(?:[0-9A-F]{2}\1){4}[0-9A-F]{2}\b$/i.test(value);
				},
				message: '请输入有效的mac地址'
			},
			noCha: {
				validator: function(value,param){
					var len = $.trim(value).length;
					return (!/[\u4e00-\u9fa5]/i.test(value) )&& (len >= param[0] && len <= param[1]);
				},
				message: '请输入长度应该在{0}和{1}之间的非中文字.'
			},
			length: {
				validator: function(value, param){
					var len = $.trim(value).length;
					return len >= param[0] && len <= param[1]
				},
				message: '输入内容长度必须介于{0}和{1}之间'
			},
			clength:{//以中文占三个字符长度进行验证
				validator:function(value,param){
					//修改中文字符问题，中文字符设置默认占三个长度   冯超加 2014-11-6
					var len =$.trim(value).length;
					param[0] =parseInt(param[0]/3);
					param[1] = parseInt(param[1]/3);
					return len >= param[0] && len <= param[1];
				},
				message: '输入内容长度必须介于{0}和{1}之间'
			},
			minLength:{
				validator: function(value,param){
					var len = $.trim(value).length;
					return len >= param;
				},
				message: '请至少输入{0}'+'个字'
			},
			maxLength : {
				validator: function(value,param){
					var len = $.trim(value).length;
					//ycj 2015-12-4
					//var len = $.trim(value).replace(/[^\x00-\xff]/g,'__').length;
					return len <= param; 
				},
				message: '请最多输入{0}'+'个字'
			},
			cmaxLength:{//以中文占三个字符长度进行验证
				validator:function(value,param){
					//修改中文字符问题，中文字符设置默认占三个长度   冯超加 2014-11-6
					var len  = $.trim(value).length;
					param = parseInt(param/3);
					return len <= param; 
				},
				message: '请最多输入{0}'+'个字'
			},
			remote: {
				validator: function(value, param){
					var data = {};
					data[param[1]] = value;
					var response = $.ajax({
						url:param[0],
						dataType:'json',
						data:data,
						async:false,
						cache:false,
						type:'post'
					}).responseText;
					return response == 'true';
				},
				message: '请修正该字段'
			}
		}
	};
})(jQuery);
/**
 * form - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php
 */
(function($){
	/**
	 * 异步提交
	 */
	function asyncSubmit(target, options){
		options = options || {};
		
		var param = {};
		if (options.onSubmit){
			if (options.onSubmit.call(target, param) == false) {
				return;
			}
		}
	
		var form = $(target);
		var formData = jsonSerialize(form);
		$.extend(formData, options.data);
		$.extend(options,{data: formData});
		$.ajax(options);
		
	}
	/**
	 * submit the form
	 */
	function ajaxSubmit(target, options){
		options = options || {};
		
		var param = {};
		if (options.onSubmit){
			if (options.onSubmit.call(target, param) == false) {
				return;
			}
		}
		
		var form = $(target);
		if (options.url){
			form.attr('action', options.url);
		}
		var frameId = 'easyui_frame_' + (new Date().getTime());
		var frame = $('<iframe id='+frameId+' name='+frameId+'></iframe>')
				.attr('src', window.ActiveXObject ? 'javascript:false' : 'about:blank')
				.css({
					position:'absolute',
					top:-1000,
					left:-1000
				});
		var t = form.attr('target'), a = form.attr('action');
		form.attr('target', frameId);
		
		var paramFields = $();
		try {
			frame.appendTo('body');
			frame.bind('load', cb);
			for(var n in param){
				var f = $('<input type="hidden" name="' + n + '">').val(param[n]).appendTo(form);
				paramFields = paramFields.add(f);
			}
			form[0].submit();
		} finally {
			form.attr('action', a);
			t ? form.attr('target', t) : form.removeAttr('target');
			paramFields.remove();
		}
		
		var checkCount = 10;
		function cb(){
			frame.unbind();
			var body = $('#'+frameId).contents().find('body');
			var data = body.html();
			if (data == ''){
				if (--checkCount){
					setTimeout(cb, 100);
					return;
				}
				return;
			}
			var ta = body.find('>textarea');
			if (ta.length){
				data = ta.val();
			} else {
				var pre = body.find('>pre');
				if (pre.length){
					data = pre.html();
				}
			}
			if (options.success){
				options.success(data);
			}
// try{
// eval('data='+data);
// if (options.success){
// options.success(data);
// }
// } catch(e) {
// if (options.failure){
// options.failure(data);
// }
// }
			setTimeout(function(){
				frame.unbind();
				frame.remove();
			}, 100);
		}
	}
	
	/**
	 * load form data if data is a URL string type load from remote site,
	 * otherwise load from local data object.
	 */
	function load(target, data){
		if (!$.data(target, 'form')){
			$.data(target, 'form', {
				options: $.extend({}, $.fn.form.defaults)
			});
		}
		var opts = $.data(target, 'form').options;
		
		if (typeof data == 'string'){
			var param = {};
			if (opts.onBeforeLoad.call(target, param) == false) return;
			
			$.ajax({
				url: data,
				data: param,
				dataType: 'json',
				success: function(data){
					_load(data);
				},
				error: function(){
					opts.onLoadError.apply(target, arguments);
				}
			});
		} else {
			_load(data);
		}
		
		function _load(data){
			var form = $(target);
			for(var name in data){
				var val = data[name];
				var rr = _checkField(name, val);
				if (!rr.length){
					var f = form.find('input[numberboxName="'+name+'"]');
					if (f.length){
						f.numberbox('setValue', val);	// set numberbox value
					} else {
						$('input[name="'+name+'"]', form).val(val);
						$('textarea[name="'+name+'"]', form).val(val);
						$('select[name="'+name+'"]', form).val(val);
					}
				}
				_loadCombo(name, val);
				_loadEditor(target, name, val);
				_loadMUEditor(target, name, val);
				
				/**
				 * 添加加载 数据到 checkbox2
				 */
				   var checkbox2 = form.find('input[name="'+name+'"][data-roles="mui-checkbox2"]');
				   $(checkbox2).checkbox2('setValue',val);
			}
			opts.onLoadSuccess.call(target, data);
			validate(target);
		}
		
		function _loadEditor(target, name, val){
			var editors = $('.mui_editor',target);
			$.each(editors, function(){
				if($(this).editor('options').name  === name){
					 var editor = UE.getEditor($(this).attr("id"));
						editor.ready(function(){
						editor.setContent(val);
						});
				
					// $(this).editor('setContent', val);
					return;
				}
			})
		}
		function _loadMUEditor(target, name, val){
			var editors = $('.mui_mueditor',target);
			$.each(editors, function(){
				if($(this).mueditor('options').name  === name){
					 var editor = UM.getEditor($(this).attr("id"));
					editor.ready(function(){
						editor.setContent(val);
					});
					
					// $(this).editor('setContent', val);
					return;
				}
			})
		}
		/**
		 * check the checkbox and radio fields
		 */
		function _checkField(name, val){
			var rr = $(target).find('input[name="'+name+'"][type=radio], input[name="'+name+'"][type=checkbox]');
			rr._propAttr('checked', false);
			rr.each(function(){
				var f = $(this);
				if(f.parent().is('.addradio')){
					f.parent().prev().radio('setValue',val);
				}else if(f.parent().is('.addcheckbox')){
					f.parent().prev().checkbox('setValue',val);
					f.parent().prev().checkbox('validate');
				}else
					if(null != val) {
					var vals = (val+"").split(",");
					for(var i = 0; i < vals.length; i++) {
						if (f.val() == String(vals[i]) || ($.isArray(vals)?$.inArray(f.val(), vals) >= 0:false)){
							f._propAttr('checked', true);
						}
					}
				}
			});
			return rr;
		}
		
		function _loadCombo(name, val){
			var form = $(target);
			var cc = ['combobox','combotree','combogrid','datetimebox','datebox','combo'];
			var c = form.find('[comboName="' + name + '"]');
			if (c.length){
				for(var i=0; i<cc.length; i++){
					var type = cc[i];
					if (c.hasClass(type+'-f')){
						if (c[type]('options').multiple){
							c[type]('setValues', val);
						} else {
							c[type]('setValue', val);
						}
						return;
					}
				}
			}
		}
	}
	
	/**
	 * ajax提交form,json化数据
	 * 
	 * @param form
	 * @returns
	 */
	function jsonSerialize(form){
		var values = form.serializeArray();
		var formValues = {};
		var box, boxnames = [];
		if ($.fn.validatebox){box = $(form).find('.box-hasemptytext');}
		if(box && box.length>0){
			$.each(box, function(){
				var value = $(this).validatebox('getValue');
				var name = $(this).attr('name');
				formValues[name] = value;
				boxnames.push(name);
			})
		}
		
		$.each(values, function(index, field){
			if(boxnames && boxnames.length>0){
				for ( var i = 0; i < boxnames.length; i++) {
					if(field.name !== boxnames[i]){
						if(formValues[field.name]){
							if(!$.isArray(formValues[field.name])){
								formValues[field.name] = [formValues[field.name]];
							}
							formValues[field.name].push(field.value);
						}else{
							formValues[field.name] = field.value;
						}
					}
				}
			}else{
				if(formValues[field.name]){
					if(!$.isArray(formValues[field.name])){
						formValues[field.name] = [formValues[field.name]];
					}
					formValues[field.name].push(field.value);
				}else{
					formValues[field.name] = field.value;
				}
			}
		});
		for(name in formValues){
			if($.isArray(formValues[name])){
				formValues[name] = formValues[name].join(',')
			}
		}
		return formValues;
	}
	
	/**
	 * clear the form fields
	 */
	function clear(target){
		$('input,select,textarea', target).each(function(){
			var t = this.type, tag = this.tagName.toLowerCase();
			if (t == 'text' || t == 'hidden' || t == 'password' || tag == 'textarea'){
				this.value = '';
			} else if (t == 'file'){
				var file = $(this);
				file.after(file.clone().val(''));
				file.remove();
			} else if (t == 'checkbox' || t == 'radio'){
				this.checked = false;
			} else if (tag == 'select'){
				this.selectedIndex = -1;
			}
			
		});
		if ($.fn.combo) $('.combo-f', target).combo('clear');
		if ($.fn.combobox) $('.combobox-f', target).combobox('clear');
		if ($.fn.combotree) $('.combotree-f', target).combotree('clear');
		if ($.fn.combogrid) $('.combogrid-f', target).combogrid('clear');
		if ($.fn.validatebox){$('.box-hasemptytext', target).validatebox('clear');}
		// validate(target);
	}
	function reset(target){
		target.reset();
		var t = $(target);
		if ($.fn.combo){t.find('.combo-f').combo('reset');}
		if ($.fn.combobox){t.find('.combobox-f').combobox('reset');}
		if ($.fn.combotree){t.find('.combotree-f').combotree('reset');}
		if ($.fn.validatebox){t.find('.box-hasemptytext').validatebox('reset');}
		if ($.fn.combogrid){t.find('.combogrid-f').combogrid('reset');}
		if ($.fn.datebox){t.find('.datebox-f').datebox('reset');}
		if ($.fn.datetimebox){t.find('.datetimebox-f').datetimebox('reset');}
		if ($.fn.spinner){t.find('.spinner-f').spinner('reset');}
		if ($.fn.timespinner){t.find('.timespinner-f').timespinner('reset');}
		if ($.fn.numberbox){t.find('.numberbox-f').numberbox('reset');}
		if ($.fn.numberspinner){t.find('.numberspinner-f').numberspinner('reset');}
	// validate(target);
	}
	
	/**
	 * set the form to make it can submit with ajax.
	 */
	function setForm(target){
		var options = $.data(target, 'form').options;
		var form = $(target);
		form.unbind('.form').bind('submit.form', function(){
			setTimeout(function(){
				ajaxSubmit(target, options);
			}, 0);
			return false;
		});
	}
	
// function validate(target){
// if ($.fn.validatebox){
// var box = $('.validatebox-text', target);
// if (box.length){
// box.validatebox('validate');
// // box.trigger('focus');
// // box.trigger('blur');
// var invalidbox = $('.validatebox-invalid:first', target).focus();
// return invalidbox.length == 0;
// }
// }
// return true;
// }
	function validate(target){
		if ($.fn.validatebox){
			var t = $(target);
			t.find('.validatebox-text:not(:disabled)').validatebox('validate');
			var invalidbox = t.find('.validatebox-invalid');
			invalidbox.filter(':not(:disabled):first').focus();
			return invalidbox.length == 0;
		}
		return true;
	}
	
	function setValidation(target, novalidate){
		$(target).find('.validatebox-text:not(:disabled)').validatebox(novalidate ? 'disableValidation' : 'enableValidation');
	}
	
	$.fn.form = function(options, param){
		if (typeof options == 'string'){
			return $.fn.form.methods[options](this, param);
		}
		
		options = options || {};
		return this.each(function(){
			if (!$.data(this, 'form')){
				$.data(this, 'form', {
					options: $.extend({}, $.fn.form.defaults, options)
				});
			}
			setForm(this);
		});
	};
	
	$.fn.form.methods = {
		submit: function(jq, options){
			return jq.each(function(){
				ajaxSubmit(this, $.extend({}, $.fn.form.defaults, options||{}));
			});
		},
		asyncSubmit: function(jq, options){
			return jq.each(function(){
				asyncSubmit(this, $.extend({}, $.fn.form.defaults, options||{}));
			});
		},
		load: function(jq, data){
			return jq.each(function(){
				load(this, data);
			});
		},
		clear: function(jq){
			return jq.each(function(){
				clear(this);
			});
		},
		getRecord: function(jq){
			return jsonSerialize(jq);
		},
		reset: function(jq){
			return jq.each(function(){
				reset(this);
			});
		},
		validate: function(jq){
			return validate(jq[0]);
		},
		disableValidation: function(jq){
			return jq.each(function(){
				setValidation(this, true);
			});
		},
		enableValidation: function(jq){
			return jq.each(function(){
				setValidation(this, false);
			});
		}
	};
	
	$.fn.form.defaults = {
		url: null,
		onSubmit: function(param){return $(this).form('validate');},
		success: function(data){},
		onBeforeLoad: function(param){},
		onLoadSuccess: function(data){},
		onLoadError: function(){}
	};
})(jQuery);
/**
 * numberbox - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php
 * 
 * Dependencies: validatebox
 * 
 */
(function($){
	/**
	 * init the component and return its value field object;
	 */
	function init(target){
		$(target).addClass('numberbox-f');
		var v = $('<input type="hidden">').insertAfter(target);
		var name = $(target).attr('name');
		if (name){
			v.attr('name', name);
			$(target).removeAttr('name').attr('numberboxName', name);
		}
		
		return v;
	}
	
	/**
	 * set the initialized value
	 */
	function initValue(target){
		var opts = $.data(target, 'numberbox').options;
		var fn = opts.onChange;
		opts.onChange = function(){};
		setValue(target, opts.parser.call(target, opts.value));
		opts.onChange = fn;
		opts.originalValue = getValue(target);
	}
	
	function getValue(target){
		return $.data(target, 'numberbox').field.val();
	}
	
	function setValue(target, value){
		var state = $.data(target, 'numberbox');
		var opts = state.options;
		var oldValue = getValue(target);
		value = opts.parser.call(target, value);
		opts.value = value;
		state.field.val(value);
		$(target).val(opts.formatter.call(target, value));
// $(target).numberbox('validate');
		if (oldValue != value){
			opts.onChange.call(target, value, oldValue);
		}
	}
	
	function bindEvents(target){
		var opts = $.data(target, 'numberbox').options;
		
		$(target).unbind('.numberbox').bind('keypress.numberbox', function(e){
			return opts.filter.call(target, e);
		}).bind('blur.numberbox', function(){
			setValue(target, $(this).val());
			$(this).val(opts.formatter.call(target, getValue(target)));
		}).bind('focus.numberbox', function(){
// var vv = getValue(target);
// if ($(this).val() != vv){
// $(this).val(vv);
// }
			var vv = getValue(target);
			if (vv != opts.parser.call(target, $(this).val())){
				$(this).val(opts.formatter.call(target, vv));
			}
		});
	}
	
	/**
	 * do the validate if necessary.
	 */
	function validate(target){
		if ($.fn.validatebox){
			var opts = $.data(target, 'numberbox').options;
			$(target).validatebox(opts);
		}
	}
	
	function setDisabled(target, disabled){
		var opts = $.data(target, 'numberbox').options;
		if (disabled){
			opts.disabled = true;
			$(target).attr('disabled', true);
		} else {
			opts.disabled = false;
			$(target).removeAttr('disabled');
		}
	}
	
	$.fn.numberbox = function(options, param){
		if (typeof options == 'string'){
			var method = $.fn.numberbox.methods[options];
			if (method){
				return method(this, param);
			} else {
				return this.validatebox(options, param);
			}
		}
		
		options = options || {};
		return this.each(function(){
			var state = $.data(this, 'numberbox');
			if (state){
				$.extend(state.options, options);
			} else {
				state = $.data(this, 'numberbox', {
					options: $.extend({}, $.fn.numberbox.defaults, $.fn.numberbox.parseOptions(this), options),
					field: init(this)
				});
				$(this).removeAttr('disabled');
				$(this).css({imeMode:"disabled"});
			}
			
			setDisabled(this, state.options.disabled);
			bindEvents(this);
			validate(this);
			initValue(this);
		});
	};
	
	$.fn.numberbox.methods = {
		options: function(jq){
			return $.data(jq[0], 'numberbox').options;
		},
		destroy: function(jq){
			return jq.each(function(){
				$.data(this, 'numberbox').field.remove();
				$(this).validatebox('destroy');
				$(this).remove();
			});
		},
		disable: function(jq){
			return jq.each(function(){
				setDisabled(this, true);
			});
		},
		enable: function(jq){
			return jq.each(function(){
				setDisabled(this, false);
			});
		},
		fix: function(jq){
			return jq.each(function(){
				setValue(this, $(this).val());
			});
		},
		setValue: function(jq, value){
			return jq.each(function(){
				setValue(this, value);
			});
		},
		getValue: function(jq){
			return getValue(jq[0]);
		},
		clear: function(jq){
			return jq.each(function(){
				var state = $.data(this, 'numberbox');
				state.field.val('');
				$(this).val('');
// $(this).numberbox('validate');
			});
		},
		reset: function(jq){
			return jq.each(function(){
				var opts = $(this).numberbox('options');
				$(this).numberbox('setValue', opts.originalValue);
			});
		}
	};
	
	$.fn.numberbox.parseOptions = function(target){
		var t = $(target);
		return $.extend({}, $.fn.validatebox.parseOptions(target), $.parser.parseOptions(target, [
			'decimalSeparator','groupSeparator','suffix',
			{min:'number',max:'number',precision:'number'}
		]), {
			prefix: (t.attr('prefix') ? t.attr('prefix') : undefined),
			disabled: (t.attr('disabled') ? true : undefined),
			value: (t.val() || undefined)
		});
// return $.extend({}, $.fn.validatebox.parseOptions(target), {
// disabled: (t.attr('disabled') ? true : undefined),
// value: (t.val() || undefined),
// min: (t.attr('min')=='0' ? 0 : parseFloat(t.attr('min')) || undefined),
// max: (t.attr('max')=='0' ? 0 : parseFloat(t.attr('max')) || undefined),
// precision: (parseInt(t.attr('precision')) || undefined),
// decimalSeparator: (t.attr('decimalSeparator') ? t.attr('decimalSeparator') :
// undefined),
// groupSeparator: (t.attr('groupSeparator') ? t.attr('groupSeparator') :
// undefined),
// prefix: (t.attr('prefix') ? t.attr('prefix') : undefined),
// suffix: (t.attr('suffix') ? t.attr('suffix') : undefined)
// });
	};
	
	// Inherited from $.fn.validatebox.defaults
	$.fn.numberbox.defaults = $.extend({}, $.fn.validatebox.defaults, {
		disabled: false,
		value: '',
		min: null,
		max: null,
		precision: 0,
		decimalSeparator: '.',
		groupSeparator: '',
		prefix: '',
		suffix: '',
		
		filter: function(e){
			var opts = $(this).numberbox('options');
			if (e.which == 45){	// -
				return ($(this).val().indexOf('-') == -1 ? true : false);
			}
			var c = String.fromCharCode(e.which);
			if (c == opts.decimalSeparator){
				return ($(this).val().indexOf(c) == -1 ? true : false);
			} else if (c == opts.groupSeparator){
				return true;
			} else if ((e.which >= 48 && e.which <= 57 && e.ctrlKey == false && e.shiftKey == false) || e.which == 0 || e.which == 8) {
				return true;
			} else if (e.ctrlKey == true && (e.which == 99 || e.which == 118)) {
				return true;
			} else {
				return false;
			}
		},
		formatter: function(value){
			if (!value) return value;
			
			value = value + '';
			var opts = $(this).numberbox('options');
			var s1 = value, s2 = '';
			var dpos = value.indexOf('.');
			if (dpos >= 0){
				s1 = value.substring(0, dpos);
				s2 = value.substring(dpos+1, value.length);
			}
			if (opts.groupSeparator){
				var p = /(\d+)(\d{3})/;
				while(p.test(s1)){
					s1 = s1.replace(p, '$1' + opts.groupSeparator + '$2');
				}
			}
			if (s2){
				return opts.prefix + s1 + opts.decimalSeparator + s2 + opts.suffix;
			} else {
				return opts.prefix + s1 + opts.suffix;
			}
		},
		parser: function(s){
			s = s + '';
			var opts = $(this).numberbox('options');
			if (parseFloat(s) != s){
				if (opts.prefix) s = $.trim(s.replace(new RegExp('\\'+$.trim(opts.prefix),'g'), ''));
				if (opts.suffix) s = $.trim(s.replace(new RegExp('\\'+$.trim(opts.suffix),'g'), ''));
				if (opts.groupSeparator) s = $.trim(s.replace(new RegExp('\\'+opts.groupSeparator,'g'), ''));
				if (opts.decimalSeparator) s = $.trim(s.replace(new RegExp('\\'+opts.decimalSeparator,'g'), '.'));
				s = s.replace(/\s/g,'');
			}
			var val = parseFloat(s).toFixed(opts.precision);
			if (isNaN(val)) {
				val = '';
			} else if (typeof(opts.min) == 'number' && val < opts.min) {
				val = opts.min.toFixed(opts.precision);
			} else if (typeof(opts.max) == 'number' && val > opts.max) {
				val = opts.max.toFixed(opts.precision);
			}
			return val;
		},
		onChange: function(newValue, oldValue){}
	});
})(jQuery);
/**
 * calendar - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php
 * 
 */
(function($){
	function setSize(target){
		var opts = $.data(target, 'calendar').options;
		var t = $(target);
// if (opts.fit == true){
// var p = t.parent();
// opts.width = p.width();
// opts.height = p.height();
// }
		opts.fit ? $.extend(opts, t._fit()) : t._fit(false);
		var header = t.find('.calendar-header');
		t._outerWidth(opts.width);
		t._outerHeight(opts.height);
		t.find('.calendar-body')._outerHeight(t.height() - header._outerHeight());
	}
	
	function init(target){
		$(target).addClass('calendar').html(
				'<div class="calendar-header">' +
					'<div class="calendar-prevmonth"></div>' +
					'<div class="calendar-nextmonth"></div>' +
					'<div class="calendar-prevyear"></div>' +
					'<div class="calendar-nextyear"></div>' +
					'<div class="calendar-title">' +
						'<span>Aprial 2010</span>' +
					'</div>' +
				'</div>' +
				'<div class="calendar-body">' +
					'<div class="calendar-menu">' +
						'<div class="calendar-menu-year-inner">' +
							'<span class="calendar-menu-prev"></span>' +
							'<span><input class="calendar-menu-year" type="text"></input></span>' +
							'<span class="calendar-menu-next"></span>' +
						'</div>' +
						'<div class="calendar-menu-month-inner">' +
						'</div>' +
					'</div>' +
				'</div>'
		);
		
		$(target).find('.calendar-title span').hover(
			function(){$(this).addClass('calendar-menu-hover');},
			function(){$(this).removeClass('calendar-menu-hover');}
		).click(function(){
			var menu = $(target).find('.calendar-menu');
			if (menu.is(':visible')){
				menu.hide();
			} else {
				showSelectMenus(target);
			}
		});
		
		$('.calendar-prevmonth,.calendar-nextmonth,.calendar-prevyear,.calendar-nextyear', target).hover(
			function(){$(this).addClass('calendar-nav-hover');},
			function(){$(this).removeClass('calendar-nav-hover');}
		);
		$(target).find('.calendar-nextmonth').click(function(){
			if($(this).hasClass('calendar-nav-disabled')){
				return;
			}
			showMonth(target, 1);
		});
		$(target).find('.calendar-prevmonth').click(function(){
			if($(this).hasClass('calendar-nav-disabled')){
				return;
			}
			showMonth(target, -1);
		});
		$(target).find('.calendar-nextyear').click(function(){
			if($(this).hasClass('calendar-nav-disabled')){
				return;
			}
			showYear(target, 1);
		});
		$(target).find('.calendar-prevyear').click(function(){
			if($(this).hasClass('calendar-nav-disabled')){
				return;
			}
			showYear(target, -1);
		});
		
		$(target).bind('_resize', function(){
			var opts = $.data(target, 'calendar').options;
			if (opts.fit == true){
				setSize(target);
			}
			return false;
		});
	}
	
	/**
	 * show the calendar corresponding to the current month.
	 */
	function showMonth(target, delta){
		var opts = $.data(target, 'calendar').options;
		opts.month += delta;
		if (opts.month > 12){
			opts.year++;
			opts.month = 1;
		} else if (opts.month < 1){
			opts.year--;
			opts.month = 12;
		}
		show(target);
		
		var menu = $(target).find('.calendar-menu-month-inner');
		menu.find('td.calendar-selected').removeClass('calendar-selected');
		menu.find('td:eq(' + (opts.month-1) + ')').addClass('calendar-selected');
		//调整选择年月界面禁用样式
		setDisableMonth(target,$.data(target, 'calendar').options.year,getDateRange(opts.startDay),getDateRange(opts.endDay));
	}
	
	/**
	 * show the calendar corresponding to the current year.
	 */
	function showYear(target, delta){
		var opts = $.data(target, 'calendar').options;
		opts.year += delta;
		show(target);
		
		var menu = $(target).find('.calendar-menu-year');
		menu.val(opts.year);
		//调整选择年月界面禁用样式
		setDisableMonth(target,$.data(target, 'calendar').options.year,getDateRange(opts.startDay),getDateRange(opts.endDay));
	}
	
	/**
	 * show the select menu that can change year or month, if the menu is not be
	 * created then create it.
	 */
	function showSelectMenus(target){
		var opts = $.data(target, 'calendar').options;
		var startDay = getDateRange(opts.startDay);
		var endDay = getDateRange(opts.endDay);
		$(target).find('.calendar-menu').show();
		
		if ($(target).find('.calendar-menu-month-inner').is(':empty')){
			$(target).find('.calendar-menu-month-inner').empty();
			var t = $('<table></table>').appendTo($(target).find('.calendar-menu-month-inner'));
			var idx = 0;
			for(var i=0; i<3; i++){
				var tr = $('<tr></tr>').appendTo(t);
				for(var j=0; j<4; j++){
					$('<td class="calendar-menu-month"></td>').html(opts.months[idx++]).attr('abbr',idx).appendTo(tr);
				}
			}
			
			$(target).find('.calendar-menu-prev,.calendar-menu-next').hover(
					function(){$(this).addClass('calendar-menu-hover');},
					function(){$(this).removeClass('calendar-menu-hover');}
			);
			$(target).find('.calendar-menu-next').click(function(){
				if($(this).hasClass('calendar-menu-disabled')){return};//如果禁用则不能操作
				var y = $(target).find('.calendar-menu-year');
				if (!isNaN(y.val())){
					y.val(parseInt(y.val()) + 1);
					//处理年份禁用
					if(parseInt(y.val())>startDay.getFullYear()){
						$(target).find('.calendar-menu-prev').removeClass('calendar-menu-disabled');
					}else{
						$(target).find('.calendar-menu-prev').addClass('calendar-menu-disabled');
					}
					setDisableMonth(target,parseInt(y.val()),startDay,endDay);
				}
			});
			$(target).find('.calendar-menu-prev').click(function(){
				if($(this).hasClass('calendar-menu-disabled')){return};//如果禁用则不能操作
				var y = $(target).find('.calendar-menu-year');
				if (!isNaN(y.val())){
					y.val(parseInt(y.val()) - 1);
					//处理年份禁用
					if(parseInt(y.val())<endDay.getFullYear()){
						$(target).find('.calendar-menu-next').removeClass('calendar-menu-disabled');
					}else{
						$(target).find('.calendar-menu-next').addClass('calendar-menu-disabled');
					}
					setDisableMonth(target,parseInt(y.val()),startDay,endDay);
				}
			});
			
			$(target).find('.calendar-menu-year').keypress(function(e){
				if (e.keyCode == 13){
					setDate();
				}
			});
			
			$(target).find('.calendar-menu-month').hover(
					function(){$(this).addClass('calendar-menu-hover');},
					function(){$(this).removeClass('calendar-menu-hover');}
			).click(function(){
				if($(this).hasClass('calendar-menu-month-disabled')){return};//如果禁用则不能操作
				var menu = $(target).find('.calendar-menu');
				menu.find('.calendar-selected').removeClass('calendar-selected');
				$(this).addClass('calendar-selected');
				setDate();
			});
			if($(target).find('.calendar-menu-year').val()&&!isNaN($(target).find('.calendar-menu-year').val())){
				setDisableMonth(target,parseInt($(target).find('.calendar-menu-year').val()),startDay,endDay);
			}else{
				setDisableMonth(target,opts.year,startDay,endDay);
			}
		}
	
		
		function setDate(){
			var menu = $(target).find('.calendar-menu');
			var year = menu.find('.calendar-menu-year').val();
			var month = menu.find('.calendar-selected').attr('abbr');
			if (!isNaN(year)){
				if(parseInt(year)<getDateRange(opts.startDay).getFullYear()){
					opts.year = getDateRange(opts.startDay).getFullYear();
				}else{
					opts.year = parseInt(year);
				}
				
				opts.month = parseInt(month);
				show(target);
			}
			menu.hide();
		}
		
		var body = $(target).find('.calendar-body');
		var sele = $(target).find('.calendar-menu');
		var seleYear = sele.find('.calendar-menu-year-inner');
		var seleMonth = sele.find('.calendar-menu-month-inner');
		
		seleYear.find('input').val(opts.year).focus();
		seleMonth.find('td.calendar-selected').removeClass('calendar-selected');
		seleMonth.find('td:eq('+(opts.month-1)+')').addClass('calendar-selected');
		
		sele._outerWidth(body._outerWidth());
		sele._outerHeight(body._outerHeight());
		seleMonth._outerHeight(sele.height() - seleYear._outerHeight());
	}
	
	//对日期禁用进行处理
	function setDisableMonth(target,year,startDay,endDay){
		var $target = $(target);
		$target.find('.calendar-menu-disabled').removeClass('calendar-menu-disabled');
		$target.find('.calendar-menu-month-disabled').removeClass('calendar-menu-month-disabled');
		if(year<=startDay.getFullYear()){
			$target.find('.calendar-menu-prev').addClass('calendar-menu-disabled');
			if(year<startDay.getFullYear()){
				$target.find('td.calendar-menu-month').addClass('calendar-menu-month-disabled');
			}else{
				$target.find('td[abbr="'+(startDay.getMonth()+1)+'"]').prevAll()
				.addClass('calendar-menu-month-disabled').end()
				.parent().prevAll('tr').find('td.calendar-menu-month').addClass('calendar-menu-month-disabled');
			}
			
		}
		if(year>=endDay.getFullYear()){
			$target.find('.calendar-menu-next').addClass('calendar-menu-disabled');
			if(year>endDay.getFullYear){
				$target.find('td.calendar-menu-month').addClass('calendar-menu-month-disabled');
			}else{
				$target.find('td[abbr="'+(endDay.getMonth()+1)+'"]').nextAll()
				.addClass('calendar-menu-month-disabled').end()
				.parent().nextAll('tr').find('td.calendar-menu-month').addClass('calendar-menu-month-disabled');
			}
		}
	}
	
	/**
	 * get weeks data.
	 */
	function getWeeks(target, year, month){
		var opts = $.data(target, 'calendar').options;
		var dates = [];
		var lastDay = new Date(year, month, 0).getDate();
		for(var i=1; i<=lastDay; i++) dates.push([year,month,i]);
		
		// group date by week
		var weeks = [], week = [];
// var memoDay = 0;
		var memoDay = -1;
		while(dates.length > 0){
			var date = dates.shift();
			week.push(date);
			var day = new Date(date[0],date[1]-1,date[2]).getDay();
			if (memoDay == day){
				day = 0;
			} else if (day == (opts.firstDay==0 ? 7 : opts.firstDay) - 1){
				weeks.push(week);
				week = [];
			}
			memoDay = day;
		}
		if (week.length){
			weeks.push(week);
		}
		
		var firstWeek = weeks[0];
		if (firstWeek.length < 7){
			while(firstWeek.length < 7){
				var firstDate = firstWeek[0];
				var date = new Date(firstDate[0],firstDate[1]-1,firstDate[2]-1)
				firstWeek.unshift([date.getFullYear(), date.getMonth()+1, date.getDate()]);
			}
		} else {
			var firstDate = firstWeek[0];
			var week = [];
			for(var i=1; i<=7; i++){
				var date = new Date(firstDate[0], firstDate[1]-1, firstDate[2]-i);
				week.unshift([date.getFullYear(), date.getMonth()+1, date.getDate()]);
			}
			weeks.unshift(week);
		}
		
		var lastWeek = weeks[weeks.length-1];
		while(lastWeek.length < 7){
			var lastDate = lastWeek[lastWeek.length-1];
			var date = new Date(lastDate[0], lastDate[1]-1, lastDate[2]+1);
			lastWeek.push([date.getFullYear(), date.getMonth()+1, date.getDate()]);
		}
		if (weeks.length < 6){
			var lastDate = lastWeek[lastWeek.length-1];
			var week = [];
			for(var i=1; i<=7; i++){
				var date = new Date(lastDate[0], lastDate[1]-1, lastDate[2]+i);
				week.push([date.getFullYear(), date.getMonth()+1, date.getDate()]);
			}
			weeks.push(week);
		}
		
		return weeks;
	}
	//获取日期范围
	function getDateRange(date){
		if(date instanceof Date){
			return new Date(date.getFullYear(),date.getMonth(),date.getDate(),0,0,0);
		}else if(typeof date=='string'){
			if(date=='now'){
				var t = new Date();
				return new Date(t.getFullYear(),t.getMonth(),t.getDate(),0,0,0);
			}
			var d = date.split('-');
			return new Date(d[0],parseInt(d[1])-1,d[2],0,0,0);
		}else if($.isNumeric(date)){
			return new Date(parseInt(date));
		}
	}
	//设置禁用的日期
	function setDisableDate(target,date,oper,opts){
		var $target = $(target),
		abbr,$date;
		/**
		 * 如果oper为>，说明要禁用大于endDay的值
		 * 如果是<，表示要禁用小于startDay的值
		 */
			var $d = $target.find('.calendar-day:'+(oper=='>'?'first':'last'));
			abbr = $d.attr('abbr').split(',');
			$date = new Date(abbr[0],parseInt(abbr[1])-1,abbr[2],0,0,0);
			var rangeDate = $target.find('td[abbr="'+date.getFullYear()+','+(date.getMonth()+1)+','+date.getDate()+'"]');
			if(oper=='>'){
				if($date.getFullYear()>=date.getFullYear()){
					$target.find('.calendar-nextyear').addClass('calendar-nav-disabled');
				}
				if($date.getTime()>date.getTime()){
					$target.find('.calendar-nextmonth').addClass('calendar-nav-disabled');
					$target.find('.calendar-day').addClass('calenday-day-disabled');
				}else if(rangeDate.length>0){
					$target.find('.calendar-nextmonth').addClass('calendar-nav-disabled');
					rangeDate.nextAll('td').addClass('calenday-day-disabled').end().parent().nextAll('tr').find('.calendar-day').addClass('calenday-day-disabled');
				}
			}else{
				if($date.getFullYear()<=date.getFullYear()){
					$target.find('.calendar-prevyear').addClass('calendar-nav-disabled');
				}
				if($date.getTime()<date.getTime()){
					$target.find('.calendar-day').addClass('calenday-day-disabled');
					$target.find('.calendar-prevmonth').addClass('calendar-nav-disabled');
				}else  if(rangeDate.length>0){
					$target.find('.calendar-prevmonth').addClass('calendar-nav-disabled');
					rangeDate.prevAll('td').addClass('calenday-day-disabled').end().parent().prevAll('tr').find('.calendar-day').addClass('calenday-day-disabled');
				}
			}
			return opts;
		
	}
	
	/**
	 * show the calendar day.
	 */
	function show(target){
		var opts = $.data(target, 'calendar').options;
		//开始时间，结束时间
		var startDay = getDateRange(opts.startDay);
		var endDay = getDateRange(opts.endDay);
		
		$(target).find('.calendar-title span').html(opts.months[opts.month-1] + ' ' + opts.year);
		var body = $(target).find('div.calendar-body');
		body.find('>table').remove();
		
		var t = $('<table cellspacing="0" cellpadding="0" border="0"><thead></thead><tbody></tbody></table>').prependTo(body);
		var tr = $('<tr></tr>').appendTo(t.find('thead'));
		for(var i=opts.firstDay; i<opts.weeks.length; i++){
			tr.append('<th>'+opts.weeks[i]+'</th>');
		}
		for(var i=0; i<opts.firstDay; i++){
			tr.append('<th>'+opts.weeks[i]+'</th>');
		}
		var weeks = getWeeks(target, opts.year, opts.month);
		for(var i=0; i<weeks.length; i++){
			var week = weeks[i];
			var tr = $('<tr></tr>').appendTo(t.find('tbody'));
			for(var j=0; j<week.length; j++){
				var day = week[j];
				$('<td class="calendar-day calendar-other-month"></td>').attr('abbr',day[0]+','+day[1]+','+day[2]).html(day[2]).appendTo(tr);
			}
		}
		t.find('td[abbr^="'+opts.year+','+opts.month+'"]').removeClass('calendar-other-month');
		
		//限制时间范围
		$(target).find('.calendar-nav-disabled').removeClass('calendar-nav-disabled');
		opts = setDisableDate(target, startDay, '<', opts);
		opts = setDisableDate(target, endDay, '>', opts);
		
		var now = new Date();
		var today = now.getFullYear()+','+(now.getMonth()+1)+','+now.getDate();
		t.find('td[abbr="'+today+'"]').addClass('calendar-today');
		
		if (opts.current){
			t.find('.calendar-selected').removeClass('calendar-selected');
			var current = opts.current.getFullYear()+','+(opts.current.getMonth()+1)+','+opts.current.getDate();
			t.find('td[abbr="'+current+'"]').addClass('calendar-selected');
		}
		
		// calulate the saturday and sunday index
		var saIndex = 6 - opts.firstDay;
		var suIndex = saIndex + 1;
		if (saIndex >= 7) saIndex -= 7;
		if (suIndex >= 7) suIndex -= 7;
		t.find('tr').find('td:eq('+saIndex+')').addClass('calendar-saturday');
		t.find('tr').find('td:eq('+suIndex+')').addClass('calendar-sunday');
		
		t.find('td').hover(
			function(){$(this).addClass('calendar-hover');},
			function(){$(this).removeClass('calendar-hover');}
		).click(function(){
			if($(this).hasClass('calenday-day-disabled')){return};//如果禁用，则不能选中
			t.find('.calendar-selected').removeClass('calendar-selected');
			$(this).addClass('calendar-selected');
			var parts = $(this).attr('abbr').split(',');
			opts.current = new Date(parts[0], parseInt(parts[1])-1, parts[2]);
			opts.onSelect.call(target, opts.current);
		});
	}
	
	$.fn.calendar = function(options, param){
		if (typeof options == 'string'){
			return $.fn.calendar.methods[options](this, param);
		}
		
		options = options || {};
		return this.each(function(){
			var state = $.data(this, 'calendar');
			if (state){
				$.extend(state.options, options);
			} else {
				state = $.data(this, 'calendar', {
					options:$.extend({}, $.fn.calendar.defaults, $.fn.calendar.parseOptions(this), options)
				});
				init(this);
			}
			if (state.options.border == false){
				$(this).addClass('calendar-noborder');
			}
			setSize(this);
			show(this);
			$(this).find('div.calendar-menu').hide();	// hide the calendar
														// menu
		});
	};
	
	$.fn.calendar.methods = {
		options: function(jq){
			return $.data(jq[0], 'calendar').options;
		},
		resize: function(jq){
			return jq.each(function(){
				setSize(this);
			});
		},
		moveTo: function(jq, date){
			return jq.each(function(){
				$(this).calendar({
					year: date.getFullYear(),
					month: date.getMonth()+1,
					current: date
				});
			});
		}
	};
	
	$.fn.calendar.parseOptions = function(target){
		var t = $(target);
		return $.extend({}, $.parser.parseOptions(target, [
			'width','height',{firstDay:'number',fit:'boolean',border:'boolean'}
		]));
	};
	
	$.fn.calendar.defaults = {
		width:180,
		height:180,
		fit:false,
		border:true,
		firstDay:0,
		weeks:['S','M','T','W','T','F','S'],
		months:['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
		year:new Date().getFullYear(),
		month:new Date().getMonth()+1,
		current:new Date(),
		startDay:new Date(1900,0,1),
		endDay:new Date(2100,0,1),
		onSelect: function(date){}
	};
})(jQuery);
/**
 * spinner - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php
 * 
 * Dependencies: validatebox
 * 
 */
(function($){
	/**
	 * initialize the spinner.
	 */
	function init(target){
		var spinner = $(
				'<span class="spinner">' +
				'<span class="spinner-arrow">' +
				'<span class="spinner-arrow-up"></span>' +
				'<span class="spinner-arrow-down"></span>' +
				'</span>' +
				'</span>'
				).insertAfter(target);
		$(target).addClass('spinner-text spinner-f').prependTo(spinner);
		return spinner;
	}
	
	function setSize(target, width){
		var opts = $.data(target, 'spinner').options;
		var spinner = $.data(target, 'spinner').spinner;
		if(width){
			//冯超 修改调节器支持百分比
			if(width.toString().indexOf('%')!=-1){
				opts.percentWidth = width;
				spinner.css('width',width);
				opts.width = spinner.width();
			}else{
				opts.percentWidth = null;
				opts.width = width;
			}
		}
		var spacer = $('<div style="display:none"></div>').insertBefore(spinner);
		spinner.appendTo('body');
		
		if (isNaN(opts.width)){
			opts.width = $(target).outerWidth();
		}
		var arrow = spinner.find('.spinner-arrow');
		spinner._outerWidth(opts.width)._outerHeight(opts.height);
		$(target)._outerWidth(spinner.width() - arrow.outerWidth());
		$(target).css({
			height: spinner.height()+'px',
			lineHeight: spinner.height()+'px'
		});
		arrow._outerHeight(spinner.height());
		arrow.find('span')._outerHeight(arrow.height()/2);
		
		spinner.insertAfter(spacer);
		spacer.remove();
	}
	
	function bindEvents(target){
		var opts = $.data(target, 'spinner').options;
		var spinner = $.data(target, 'spinner').spinner;
		
		spinner.find('.spinner-arrow-up,.spinner-arrow-down').unbind('.spinner');
		if (!opts.disabled){
			spinner.find('.spinner-arrow-up').bind('mouseenter.spinner', function(){
				$(this).addClass('spinner-arrow-hover');
			}).bind('mouseleave.spinner', function(){
				$(this).removeClass('spinner-arrow-hover');
			}).bind('click.spinner', function(){
				opts.spin.call(target, false);
				opts.onSpinUp.call(target);
				$(target).validatebox('validate');
			});
			
			spinner.find('.spinner-arrow-down').bind('mouseenter.spinner', function(){
				$(this).addClass('spinner-arrow-hover');
			}).bind('mouseleave.spinner', function(){
				$(this).removeClass('spinner-arrow-hover');
			}).bind('click.spinner', function(){
				opts.spin.call(target, true);
				opts.onSpinDown.call(target);
				$(target).validatebox('validate');
			});
		}
	}
	
	/**
	 * enable or disable the spinner.
	 */
	function setDisabled(target, disabled){
		var opts = $.data(target, 'spinner').options;
		if (disabled){
			opts.disabled = true;
			$(target).attr('disabled', true);
		} else {
			opts.disabled = false;
			$(target).removeAttr('disabled');
		}
	}
	
	$.fn.spinner = function(options, param){
		if (typeof options == 'string'){
			var method = $.fn.spinner.methods[options];
			if (method){
				return method(this, param);
			} else {
				return this.validatebox(options, param);
			}
		}
		
		options = options || {};
		return this.each(function(){
			var state = $.data(this, 'spinner');
			if (state){
				$.extend(state.options, options);
			} else {
				state = $.data(this, 'spinner', {
					options: $.extend({}, $.fn.spinner.defaults, $.fn.spinner.parseOptions(this), options),
					spinner: init(this)
				});
				$(this).removeAttr('disabled');
			}
			state.options.originalValue = state.options.value;
			$(this).val(state.options.value);
			$(this).attr('readonly', !state.options.editable);
			setDisabled(this, state.options.disabled);
			setSize(this);
			$(this).validatebox(state.options);
			bindEvents(this);
		});
	};
	
	$.fn.spinner.methods = {
		options: function(jq){
			var opts = $.data(jq[0], 'spinner').options;
			return $.extend(opts, {
				value: jq.val()
			});
		},
		destroy: function(jq){
			return jq.each(function(){
				var spinner = $.data(this, 'spinner').spinner;
				$(this).validatebox('destroy');
				spinner.remove();
			});
		},
		resize: function(jq, width){
			return jq.each(function(){
				setSize(this, width);
			});
		},
		enable: function(jq){
			return jq.each(function(){
				setDisabled(this, false);
				bindEvents(this);
			});
		},
		disable: function(jq){
			return jq.each(function(){
				setDisabled(this, true);
				bindEvents(this);
			});
		},
		getValue: function(jq){
			return jq.val();
		},
		setValue: function(jq, value){
			return jq.each(function(){
				var opts = $.data(this, 'spinner').options;
				opts.value = value;
				$(this).val(value);
			});
		},
		clear: function(jq){
			return jq.each(function(){
				var opts = $.data(this, 'spinner').options;
				opts.value = '';
				$(this).val('');
			});
		},
		reset: function(jq){
			return jq.each(function(){
				var opts = $(this).spinner('options');
				$(this).spinner('setValue', opts.originalValue);
			});
		}
	};
	
	$.fn.spinner.parseOptions = function(target){
		var t = $(target);
		var opts =  $.extend({}, $.fn.validatebox.parseOptions(target), $.parser.parseOptions(target, [
			'height','min','max',{increment:'number',editable:'boolean'}
		]), {
			value: (t.val() || undefined),
			disabled: (t.attr('disabled') ? true : undefined)
		});
		
		//2015-5-27 冯超 设置下拉组件宽度可为百分比
		var s = target.style['width'];
		if(s){
			if(s.indexOf('%')!=-1){
				opts['width'] = $(target).width();
				opts.percentWidth = s;//如果使用百分比，则设置percentWidth属性为对应的百分比
			}else{
				opts['width'] = parseInt(s)||153;
				opts.percentWidth = null;
			}
	}
		return opts;
	};
	
	//处理百分比宽度
	$.fn.spinner.setPercentWidth = function(target,options){
		if(options.width){
			var width = options.width;
			if(width.toString().indexOf('%')!=-1){
				var _this = $(target);
				_this.css('width',width);
				options.width = _this.show().width();
				_this.hide();
				options.percentWidth = width;
			}else{
				options.percentWidth = null;
			}
		}
		return options;
	};
	
	$.fn.spinner.defaults = $.extend({}, $.fn.validatebox.defaults, {
		width: 'auto',
		height: 22,
		deltaX: 19,
		value: '',
		min: null,
		max: null,
		increment: 1,
		editable: true,
		disabled: false,
		
		spin: function(down){},	// the function to implement the spin button
								// click
		
		onSpinUp: function(){},
		onSpinDown: function(){}
	});
})(jQuery);
/**
 * numberspinner - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php
 * 
 * Dependencies: spinner numberbox
 */
(function($){
	function create(target){
		$(target).addClass('numberspinner-f');
		var opts = $.data(target, 'numberspinner').options;
		$(target).spinner(opts).numberbox(opts);
	}
	
	function doSpin(target, down){
		var opts = $.data(target, 'numberspinner').options;
		
		var v = parseFloat($(target).numberbox('getValue') || opts.value) || 0;
// var v = parseFloat($(target).val() || opts.value) || 0;
		if (down == true){
			v -= opts.increment;
		} else {
			v += opts.increment;
		}
// $(target).val(v).numberbox('fix');
		$(target).numberbox('setValue', v);
	}
	
	$.fn.numberspinner = function(options, param){
		if (typeof options == 'string'){
			var method = $.fn.numberspinner.methods[options];
			if (method){
				return method(this, param);
			} else {
				return this.spinner(options, param);
			}
		}
		
		options = options || {};
		return this.each(function(){
			var state = $.data(this, 'numberspinner');
			options = $.fn.spinner.setPercentWidth(this,options);
			if (state){
				$.extend(state.options, options);
			} else {
				$.data(this, 'numberspinner', {
					options: $.extend({}, $.fn.numberspinner.defaults, $.fn.numberspinner.parseOptions(this), options)
				});
			}
			create(this);
		});
	};
	
	$.fn.numberspinner.methods = {
		options: function(jq){
			var opts = $.data(jq[0], 'numberspinner').options;
			return $.extend(opts, {
				value: jq.numberbox('getValue'),
				originalValue: jq.numberbox('options').originalValue
			});
		},
		setValue: function(jq, value){
			return jq.each(function(){
				$(this).numberbox('setValue', value);
			});
		},
		getValue: function(jq){
			return jq.numberbox('getValue');
		},
		clear: function(jq){
			return jq.each(function(){
				$(this).spinner('clear');
				$(this).numberbox('clear');
			});
		},
		reset: function(jq){
			return jq.each(function(){
				var opts = $(this).numberspinner('options');
				$(this).numberspinner('setValue', opts.originalValue);
			});
		}
	};
	
	$.fn.numberspinner.parseOptions = function(target){
		return $.extend({}, $.fn.spinner.parseOptions(target), $.fn.numberbox.parseOptions(target), {
		});
	};
	
	$.fn.numberspinner.defaults = $.extend({}, $.fn.spinner.defaults, $.fn.numberbox.defaults, {
		spin: function(down){doSpin(this, down);}
	});
})(jQuery);
/**
 * timespinner - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php
 * 
 * Dependencies: spinner
 * 
 */
(function($){
	function create(target){
		var opts = $.data(target, 'timespinner').options;
		$(target).addClass('timespinner-f');
		$(target).spinner(opts);
		
		$(target).unbind('.timespinner');
		$(target).bind('click.timespinner', function(){
			var start = 0;
			if (this.selectionStart != null){
				start = this.selectionStart;
			} else if (this.createTextRange){
				var range = target.createTextRange();
				var s = document.selection.createRange();
				s.setEndPoint("StartToStart", range);
				start = s.text.length;
			}
			if (start >= 0 && start <= 2){
				opts.highlight = 0;
			} else if (start >= 3 && start <= 5){
				opts.highlight = 1;
			} else if (start >= 6 && start <= 8){
				opts.highlight = 2;
			}
			highlight(target);
		}).bind('blur.timespinner', function(){
			fixValue(target);
		});
	}
	
	/**
	 * highlight the hours or minutes or seconds.
	 */
	function highlight(target){
		var opts = $.data(target, 'timespinner').options;
		var start = 0, end = 0;
		if (opts.highlight == 0){
			start = 0;
			end = 2;
		} else if (opts.highlight == 1){
			start = 3;
			end = 5;
		} else if (opts.highlight == 2){
			start = 6;
			end = 8;
		}
		if (target.selectionStart != null){
			target.setSelectionRange(start, end);
		} else if (target.createTextRange){
			var range = target.createTextRange();
			range.collapse();
			range.moveEnd('character', end);
			range.moveStart('character', start);
			range.select();
		}
		$(target).focus();
	}
	
	/**
	 * parse the time and return it or return null if the format is invalid
	 */
	function parseTime(target, value){
		var opts = $.data(target, 'timespinner').options;
		if (!value) return null;
		var vv = value.split(opts.separator);
		for(var i=0; i<vv.length; i++){
			if (isNaN(vv[i])) return null;
		}
		while(vv.length < 3){
			vv.push(0);
		}
		return new Date(1900, 0, 0, vv[0], vv[1], vv[2]);
	}
	
	function fixValue(target){
		var opts = $.data(target, 'timespinner').options;
		var value = $(target).val();
		var time = parseTime(target, value);
// if (!time){
// time = parseTime(target, opts.value);
// }
		if (!time){
			opts.value = '';
			$(target).val('');
			return;
		}
		
		var minTime = parseTime(target, opts.min);
		var maxTime = parseTime(target, opts.max);
		if (minTime && minTime > time) time = minTime;
		if (maxTime && maxTime < time) time = maxTime;
		
		var tt = [formatNumber(time.getHours()), formatNumber(time.getMinutes())];
		if (opts.showSeconds){
			tt.push(formatNumber(time.getSeconds()));
		}
		var val = tt.join(opts.separator);
		opts.value = val;
		$(target).val(val);
		
// highlight(target);
		
		function formatNumber(value){
			return (value < 10 ? '0' : '') + value;
		}
	}
	
	function doSpin(target, down){
		var opts = $.data(target, 'timespinner').options;
		var val = $(target).val();
		if (val == ''){
			val = [0,0,0].join(opts.separator);
		}
		var vv = val.split(opts.separator);
		for(var i=0; i<vv.length; i++){
			vv[i] = parseInt(vv[i], 10);
		}
		if (down == true){
			vv[opts.highlight] -= opts.increment;
		} else {
			vv[opts.highlight] += opts.increment;
		}
		$(target).val(vv.join(opts.separator));
		fixValue(target);
		highlight(target);
	}
	
	
	$.fn.timespinner = function(options, param){
		if (typeof options == 'string'){
			var method = $.fn.timespinner.methods[options];
			if (method){
				return method(this, param);
			} else {
				return this.spinner(options, param);
			}
		}
		
		options = options || {};
		return this.each(function(){
			var state = $.data(this, 'timespinner');
			if (state){
				options = $.fn.spinner.setPercentWidth(this,options);
				$.extend(state.options, options);
			} else {
				$.data(this, 'timespinner', {
					options: $.extend({}, $.fn.timespinner.defaults, $.fn.timespinner.parseOptions(this), options)
				});
				create(this);
			}
		});
	};
	
	$.fn.timespinner.methods = {
		options: function(jq){
			var opts = $.data(jq[0], 'timespinner').options;
			return $.extend(opts, {
				value: jq.val(),
				originalValue: jq.spinner('options').originalValue
			});
		},
		setValue: function(jq, value){
			return jq.each(function(){
				$(this).val(value);
				fixValue(this);
			});
		},
		getHours: function(jq){
			var opts = $.data(jq[0], 'timespinner').options;
			var vv = jq.val().split(opts.separator);
			return parseInt(vv[0], 10);
		},
		getMinutes: function(jq){
			var opts = $.data(jq[0], 'timespinner').options;
			var vv = jq.val().split(opts.separator);
			return parseInt(vv[1], 10);
		},
		getSeconds: function(jq){
			var opts = $.data(jq[0], 'timespinner').options;
			var vv = jq.val().split(opts.separator);
			return parseInt(vv[2], 10) || 0;
		}
	};
	
	$.fn.timespinner.parseOptions = function(target){
		return $.extend({}, $.fn.spinner.parseOptions(target), $.parser.parseOptions(target,[
			'separator',{showSeconds:'boolean',highlight:'number'}
		]));
	};
	
	$.fn.timespinner.defaults = $.extend({}, $.fn.spinner.defaults, {
		separator: ':',
		showSeconds: false,
		highlight: 0,	// The field to highlight initially, 0 = hours, 1 =
						// minutes, ...
		spin: function(down){doSpin(this, down);}
	});
})(jQuery);
/**
 * datagrid - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php
 * 
 * Dependencies: panel resizable linkbutton pagination
 * 
 */
(function($){
	var DATAGRID_SERNO = 0;
	
	/**
	 * Get the index of array item, return -1 when the item is not found.
	 */
	function indexOfArray(a,o){
		for(var i=0,len=a.length; i<len; i++){
			if (a[i] == o) return i;
		}
		return -1;
	}
	/**
	 * Remove array item, 'o' parameter can be item object or id field name.
	 * When 'o' parameter is the id field name, the 'id' parameter is valid.
	 */
	function removeArrayItem(a,o,id){
		if (typeof o == 'string'){
			for(var i=0,len=a.length; i<len; i++){
				if (a[i][o] == id){
					a.splice(i, 1);
					return;
				}
			}
		} else {
			var index = indexOfArray(a,o);
			if (index != -1){
				a.splice(index, 1);
			}
		}
	}
	/**
	 * Add un-duplicate array item, 'o' parameter is the id field name, if the
	 * 'r' object is exists, deny the action.
	 */
	function addArrayItem(a,o,r){
		for(var i=0,len=a.length; i<len; i++){
			if (a[i][o] == r[o]){return;}
		}
		a.push(r);
	}
	
	function createStyleSheet(parent){
		var cc = parent || $('head');
		var state = $.data(cc[0], 'ss');
		if (!state){
			state = $.data(cc[0], 'ss', {
				cache: {},
				dirty: []
			});
		}
		return {
			add: function(lines){
				var ss = ['<style type="text/css">'];
				for(var i=0; i<lines.length; i++){
					state.cache[lines[i][0]] = {width: lines[i][1]};
				}
				var index = 0;
				for(var s in state.cache){
					var item = state.cache[s];
					item.index = index++;
					ss.push(s + '{width:' + item.width + '}');
				}
				ss.push('</style>');
				$(ss.join('\n')).appendTo(cc);
				setTimeout(function(){
					cc.children('style:not(:last)').remove();
				}, 0);
			},
			getRule: function(index){
				var style = cc.children('style:last')[0];
				var styleSheet = style.styleSheet ? style.styleSheet : (style.sheet || document.styleSheets[document.styleSheets.length-1]);
				var rules = styleSheet.cssRules || styleSheet.rules;
				return rules[index];
			},
			set: function(selector, width){
				var item = state.cache[selector];
				if (item){
					item.width = width;
					var rule = this.getRule(item.index);
					if (rule){
						try{
							
							rule.style['width'] = width;
							
						}catch(e){
							
							
						}
					}
				}
			},
			remove: function(selector){
				var tmp = [];
				for(var s in state.cache){
					if (s.indexOf(selector + '-') == -1){
						tmp.push([s, state.cache[s].width]);
					}
				}
				state.cache = {};
				this.add(tmp);
			},
			dirty: function(selector){
				if (selector){
					state.dirty.push(selector);
				}
			},
			clean: function(){
				for(var i=0; i<state.dirty.length; i++){
					this.remove(state.dirty[i]);
				}
				state.dirty = [];
			}
		}
	}
	
	
	function setSize(target, param) {
		var opts = $.data(target, 'datagrid').options;
		var panel = $.data(target, 'datagrid').panel;
		
		if (param){
			if (param.width) opts.width = param.width;
			if (param.height) opts.height = param.height;
		}
		
		if (opts.fit == true){
			var p = panel.panel('panel').parent();
			opts.width = p.width();
			opts.height = p.height();
		}
		
		panel.panel('resize', {
			width: opts.width,
			height: opts.height
		});
	}
	
	function setBodySize(target){
		var opts = $.data(target, 'datagrid').options;
		var dc = $.data(target, 'datagrid').dc;
		var wrap = $.data(target, 'datagrid').panel;
		var innerWidth = wrap.width();
		var innerHeight = wrap.height();
		
		var view = dc.view;
		var view1 = dc.view1;
		var view2 = dc.view2;
		var header1 = view1.children('div.datagrid-header');
		var header2 = view2.children('div.datagrid-header');
		var table1 = header1.find('table');
		var table2 = header2.find('table');
		
		// set view width
		view.width(innerWidth);
		var headerInner = header1.children('div.datagrid-header-inner').show();
		view1.width(headerInner.find('table').width());
		if (!opts.showHeader) headerInner.hide();
		view2.width(innerWidth - view1._outerWidth());
		view1.children('div.datagrid-header,div.datagrid-body,div.datagrid-footer').width(view1.width());
		view2.children('div.datagrid-header,div.datagrid-body,div.datagrid-footer').width(view2.width());
		
		// set header height
		var hh;
		header1.css('height', '');
		header2.css('height', '');
		table1.css('height', '');
		table2.css('height', '');
		hh = Math.max(table1.height(), table2.height());
		table1.height(hh);
		table2.height(hh);
		header1.add(header2)._outerHeight(hh);
		
		// set body height
		if (opts.height != 'auto') {
			var height = innerHeight
					- view2.children('div.datagrid-header')._outerHeight()
					- view2.children('div.datagrid-footer')._outerHeight()
					- wrap.children('div.datagrid-toolbar')._outerHeight();
			wrap.children('div.datagrid-pager').each(function(){
				height -= $(this)._outerHeight();
			});
// view1.children('div.datagrid-body').height(height);
// view2.children('div.datagrid-body').height(height);
			
			dc.body1.add(dc.body2).children('table.datagrid-btable-frozen').css({
				position: 'absolute',
				top: dc.header2._outerHeight()
			});
			var frozenHeight = dc.body2.children('table.datagrid-btable-frozen')._outerHeight();
			view1.add(view2).children('div.datagrid-body').css({
				marginTop: frozenHeight,
				height: (height - frozenHeight)
			});
		}
		
		view.height(view2.height());
// view2.css('left', view1._outerWidth());
	}
	
	function fixRowHeight(target, index, forceFix){
		if (!$.data(target, 'datagrid')){
			return;
		}
		var rows = $.data(target, 'datagrid').data.rows;
		var opts = $.data(target, 'datagrid').options;
		var dc = $.data(target, 'datagrid').dc;
		
		if (!dc.body1.is(':empty') && (!opts.nowrap || opts.autoRowHeight || forceFix)){
			if (index != undefined){
				var tr1 = opts.finder.getTr(target, index, 'body', 1);
				var tr2 = opts.finder.getTr(target, index, 'body', 2);
				setHeight(tr1, tr2);
			} else {
				var tr1 = opts.finder.getTr(target, 0, 'allbody', 1);
				var tr2 = opts.finder.getTr(target, 0, 'allbody', 2);
				setHeight(tr1, tr2);
				if (opts.showFooter){
					var tr1 = opts.finder.getTr(target, 0, 'allfooter', 1);
					var tr2 = opts.finder.getTr(target, 0, 'allfooter', 2);
					setHeight(tr1, tr2);
				}
			}
		}
		
		setBodySize(target);
		if (opts.height == 'auto'){
			var body1 = dc.body1.parent();
			var body2 = dc.body2;
			var csize = getContentSize(body2);
			var height = csize.height;
			if (csize.width > body2.width()){
				height += 18;
			}
			body1.height(height);
			body2.height(height);
			dc.view.height(dc.view2.height());
		}
		dc.body2.triggerHandler('scroll');
		
		// set body row or footer row height
		function setHeight(trs1, trs2){
		/*	for(var i=0; i<trs2.length; i++){
				var tr1 = $(trs1[i]);
				var tr2 = $(trs2[i]);
				tr1.css('height', '');
				tr2.css('height', '');
				var height = Math.max(tr1.height(), tr2.height());
				tr1.css('height', height);
				tr2.css('height', height);
			}*/
		}
		// get content size of a container(div)
		function getContentSize(cc){
			var width = 0;
			var height = 0;
			$(cc).children().each(function(){
				var c = $(this);
				if (c.is(':visible')){
					height += c._outerHeight();
					if (width < c._outerWidth()){
						width = c._outerWidth();
					}
				}
			});
			return {width:width,height:height};
		}
	}
	
	function freezeRow(target, index){
		if (!$.data(target, 'datagrid')){
			return;
		}
		var state = $.data(target, 'datagrid');
		var opts = state.options;
		var dc = state.dc;
		if (!dc.body2.children('table.datagrid-btable-frozen').length){
			dc.body1.add(dc.body2).prepend('<table class="datagrid-btable datagrid-btable-frozen" cellspacing="0" cellpadding="0"></table>');
		}
		moveTr(true);
		moveTr(false);
		setBodySize(target);
		function moveTr(frozen){
			var serno = frozen ? 1 : 2;
			var tr = opts.finder.getTr(target, index, 'body', serno);
			(frozen ? dc.body1 : dc.body2).children('table.datagrid-btable-frozen').append(tr);
		}
	}
	
	/**
	 * wrap and return the grid object, fields and columns
	 */
	function wrapGrid(target, rownumbers) {
		function getColumns(){
			var frozenColumns = [];
			var columns = [];
			$(target).children('thead').each(function(){
				var opt = $.parser.parseOptions(this, [{frozen:'boolean'}]);
				$(this).find('tr').each(function(){
					var cols = [];
					$(this).find('th').each(function(){
						var th = $(this);
						var col = $.extend({}, $.parser.parseOptions(this, [
    						'field','column','align','halign','order','lookupType','buttons','tooltip',
    						{sortable:'boolean',checkbox:'boolean',resizable:'boolean',fixed:'boolean'},
    						{rowspan:'number',colspan:'number',width:'number'}
    					]), {
    						title: (th.html() || undefined),
    						hidden: (th.attr('hidden') ? true : undefined),
    						formatter: (th.attr('formatter') ? eval(th.attr('formatter')) : undefined),
    						styler: (th.attr('styler') ? eval(th.attr('styler')) : undefined),
    						sorter: (th.attr('sorter') ? eval(th.attr('sorter')) : undefined)
    					});
// if (!col.align) col.align = 'left';
						
						if(col.lookupType){
							if(col.formatter){
								if(console){
									console.error("列表中的"+col.field+"字段为数据字典项,请勿自定义转化,如有必要请联系平台项目组")
								}else{
									alert("列表中的"+col.field+"字段为数据字典项,请勿自定义转化,如有必要请联系平台项目组")
								}
							}
							col.formatter = function(value, rowData, rowIndex){
								return lookupUtils.codeToName(col.lookupType, value);
							}
						}
						if(col.type == 'link' && col.onclick){
							if(col.formatter){
								col.formatter2 = function(value, rowData, rowIndex){
									return '<a class="linkColumns" href="javascript:;void(0)">' + value + '</a>';
								}
							}else{
								col.formatter = function(value, rowData, rowIndex){
									return '<a class="linkColumns" href="javascript:;void(0)">' + value + '</a>';
								}
							}
						}
						
    					if (th.attr('editor')){
    						var s = $.trim(th.attr('editor'));
    						if (s.substr(0,1) == '{'){
    							col.editor = eval('(' + s + ')');
    						} else {
    							col.editor = s;
    						}
    					}
    					
    					cols.push(col);
					});
					
					opt.frozen ? frozenColumns.push(cols) : columns.push(cols);
				});
			});
			return [frozenColumns, columns];
		}
		
		
		var panel = $(
				'<div class="datagrid-wrap">' +
					'<div class="datagrid-view">' +
						'<div class="datagrid-view1">' +
							'<div class="datagrid-header">' +
								'<div class="datagrid-header-inner"></div>' +
							'</div>' +
							'<div class="datagrid-body">' +
								'<div class="datagrid-body-inner"></div>' +
							'</div>' +
							'<div class="datagrid-footer">' +
								'<div class="datagrid-footer-inner"></div>' +
							'</div>' +
						'</div>' +
						'<div class="datagrid-view2">' +
							'<div class="datagrid-header">' +
								'<div class="datagrid-header-inner"></div>' +
							'</div>' +
							'<div class="datagrid-body"></div>' +
							'<div class="datagrid-footer">' +
								'<div class="datagrid-footer-inner"></div>' +
							'</div>' +
						'</div>' +
// '<div class="datagrid-resize-proxy"></div>' +
					'</div>' +
				'</div>'
		).insertAfter(target);
		
		panel.panel({
			doSize:false
		});
		panel.panel('panel').addClass('datagrid').bind('_resize', function(e, force){
			var opts = $.data(target, 'datagrid').options;
			if (opts.fit == true || force){
				setSize(target);
				setTimeout(function(){
					if ($.data(target, 'datagrid')){
						fixColumnSize(target);
					}
				}, 0);
			}
			return false;
		});
		
		$(target).hide().appendTo(panel.children('div.datagrid-view'));
		
		var cc = getColumns();
		var view = panel.children('div.datagrid-view');
		var view1 = view.children('div.datagrid-view1');
		var view2 = view.children('div.datagrid-view2');
		
		var pview = panel.closest('div.datagrid-view');
		if (!pview.length){pview = view};
		var ss = createStyleSheet(pview);
		
		return {
			panel: panel,
			frozenColumns: cc[0],
			columns: cc[1],
			dc: {	// some data container
				view: view,
				view1: view1,
				view2: view2,
				header1: view1.children('div.datagrid-header').children('div.datagrid-header-inner'),
				header2: view2.children('div.datagrid-header').children('div.datagrid-header-inner'),
				body1: view1.children('div.datagrid-body').children('div.datagrid-body-inner'),
				body2: view2.children('div.datagrid-body'),
				footer1: view1.children('div.datagrid-footer').children('div.datagrid-footer-inner'),
				footer2: view2.children('div.datagrid-footer').children('div.datagrid-footer-inner')
			},
			ss: ss
		};
	}
	
	
	function buildGrid(target){
		var state = $.data(target, 'datagrid');
		var opts = state.options;
		var dc = state.dc;
		var panel = state.panel;
		
		panel.panel($.extend({}, opts, {
			id: null,
			doSize: false,
			onResize: function(width, height){
				setTimeout(function(){
					if ($.data(target, 'datagrid')){
						setBodySize(target);
						fitColumns(target);
						opts.onResize.call(panel, width, height);
					}
				}, 0);
			},
			onExpand: function(){
				// setBodySize(target);
				if ($.data(target, 'datagrid')){
					fixRowHeight(target);
					opts.onExpand.call(panel);
				}
			}
		}));
		
		state.rowIdPrefix = 'datagrid-row-r' + (++DATAGRID_SERNO);
		state.cellClassPrefix = 'datagrid-cell-c' + DATAGRID_SERNO;
		createColumnHeader(dc.header1, opts.frozenColumns, true);
		createColumnHeader(dc.header2, opts.columns, false);
		createColumnStyle();
		
		dc.header1.add(dc.header2).css('display', opts.showHeader ? 'block' : 'none');
		dc.footer1.add(dc.footer2).css('display', opts.showFooter ? 'block' : 'none');
		
		if (opts.toolbar) {
			if ($.isArray(opts.toolbar)){
				$('div.datagrid-toolbar', panel).remove();
				var tb = $('<div class="datagrid-toolbar"><table cellspacing="0" cellpadding="0"><tr></tr></table></div>').prependTo(panel);
				var tr = tb.find('tr');
				for(var i=0; i<opts.toolbar.length; i++) {
					var btn = opts.toolbar[i];
					if (btn == '-') {
						$('<td><div class="datagrid-btn-separator"></div></td>').appendTo(tr);
					} else {
						var td = $('<td></td>').appendTo(tr);
						var tool = $('<a href="javascript:void(0)"></a>').appendTo(td);
						tool[0].onclick = eval(btn.handler || function(){});
						tool.linkbutton($.extend({}, btn, {
							plain:true
						}));
					}
				}
			} else {
				$(opts.toolbar).addClass('datagrid-toolbar').prependTo(panel);
				$(opts.toolbar).show();
			}
		} else {
			$('div.datagrid-toolbar', panel).remove();
		}
		
		$('div.datagrid-pager', panel).remove();
		if (opts.pagination) {
			var pager = $('<div class="datagrid-pager"></div>');
			if (opts.pagePosition == 'bottom'){
				pager.appendTo(panel);
			} else if (opts.pagePosition == 'top'){
				pager.addClass('datagrid-pager-top').prependTo(panel);
			} else {
				var ptop = $('<div class="datagrid-pager datagrid-pager-top"></div>').prependTo(panel);
				pager.appendTo(panel);
				pager = pager.add(ptop);
			}
			pager.pagination({
				total:0,
				pageNumber:opts.pageNumber,
				pageSize:opts.pageSize,
				pageList:opts.pageList,
				onSelectPage: function(pageNum, pageSize){
					// save the page state
					opts.pageNumber = pageNum;
					opts.pageSize = pageSize;
					pager.pagination('refresh',{
						pageNumber:pageNum,
						pageSize:pageSize
					});
					
					request(target);	// request new page data
				}
			});
			opts.pageSize = pager.pagination('options').pageSize;	// repare
																	// the
																	// pageSize
																	// value
		}
		

		
		function createColumnHeader(container, columns, frozen){
			if (!columns) return;
			$(container).show();
			$(container).empty();
			var names = [];
			var orders = [];
			if (opts.sortName){
				names = opts.sortName.split(',');
				orders = opts.sortOrder.split(',');
			}
			var t = $('<table class="datagrid-htable" border="0" cellspacing="0" cellpadding="0"><tbody></tbody></table>').appendTo(container);
			for(var i=0; i<columns.length; i++) {
				var tr = $('<tr class="datagrid-header-row"></tr>').appendTo($('tbody', t));
				var cols = columns[i];
				for(var j=0; j<cols.length; j++){
					var col = cols[j];
					
					var attr = '';
					if (col.rowspan) attr += 'rowspan="' + col.rowspan + '" ';
					if (col.colspan) attr += 'colspan="' + col.colspan + '" ';
					var td = $('<td ' + attr + '></td>').appendTo(tr);
					
					if (col.checkbox){
						td.attr('field', col.field);
						td.attr('column', col.column);
						$('<div class="datagrid-header-check"></div>').html('<input type="checkbox"/>').appendTo(td);
					} else if (col.field){
						td.attr('field', col.field);
						td.attr('column', col.column);
						td.append('<div class="datagrid-cell"><span></span></div>');
							if(col.sortable){
								td.find('.datagrid-cell').append('<span class="datagrid-sort-icon"></span>');					
							 }
						$('span', td).html(col.title);
						$('span.datagrid-sort-icon', td).html('&nbsp;');
						var cell = td.find('div.datagrid-cell');
// if (opts.sortName == col.field){
// cell.addClass('datagrid-sort-'+opts.sortOrder);
// }
// var pos = names.indexOf(col.field);
						var pos = indexOfArray(names, col.field);
						if (pos >= 0){
							cell.addClass('datagrid-sort-' + orders[pos]);
						}
						if (col.resizable == false){
							cell.attr('resizable', 'false');
						}
						if (col.width){
							cell._outerWidth(col.width);
							col.boxWidth = parseInt(cell[0].style.width);
						} else {
							col.auto = true;
						}
// cell.css('text-align', (col.align || 'left'));
// if (col.align){cell.css('text-align', col.align)}
						cell.css('text-align', (col.halign || col.align || ''));
						
						// define the cell class
						col.cellClass = state.cellClassPrefix + '-' + col.field.replace(/[\.|\s]/g,'-');
// col.cellSelector = '.' + col.cellClass;
					} else {
						$('<div class="datagrid-cell-group"></div>').html(col.title).appendTo(td);
					}
					
					if (col.hidden){
						td.hide();
					}
				}
				
			}
			if (frozen && opts.rownumbers){
				var td = $('<td rowspan="'+opts.frozenColumns.length+'"><div class="datagrid-header-rownumber"></div></td>');
				if ($('tr',t).length == 0){
					td.wrap('<tr class="datagrid-header-row"></tr>').parent().appendTo($('tbody',t));
				} else {
					td.prependTo($('tr:first', t));
				}
			}
		}
		
		function createColumnStyle(){
			var lines = [];
			var fields = getColumnFields(target,true).concat(getColumnFields(target));
			for(var i=0; i<fields.length; i++){
				var col = getColumnOption(target, fields[i]);
				if (col && !col.checkbox){
					lines.push(['.'+col.cellClass, col.boxWidth ? col.boxWidth + 'px' : 'auto']);
				}
			}
			state.ss.add(lines);
			state.ss.dirty(state.cellSelectorPrefix);	// mark the old selector
														// as dirty that will be
														// removed
			state.cellSelectorPrefix = '.' + state.cellClassPrefix;
		}
	}
	
	/**
	 * bind the datagrid events
	 */
	function bindEvents(target) {
		var state = $.data(target, 'datagrid');
		var panel = state.panel;
		var opts = state.options;
		var dc = state.dc;
		
		var header = dc.header1.add(dc.header2);
		header.find('input[type=checkbox]').unbind('.datagrid').bind('click.datagrid', function(e){
			if (opts.singleSelect && opts.selectOnCheck) return false;
			if ($(this).is(':checked')){
				checkAll(target);
			} else {
				uncheckAll(target);
			}
			e.stopPropagation();
		});
		
		var cells = header.find('div.datagrid-cell');
		cells.closest('td').unbind('.datagrid').bind('mouseenter.datagrid', function(){
			if (state.resizing){return;}
			$(this).addClass('datagrid-header-over');
		}).bind('mouseleave.datagrid', function(){
			$(this).removeClass('datagrid-header-over');
		}).bind('contextmenu.datagrid', function(e){
			var field = $(this).attr('field');
			opts.onHeaderContextMenu.call(target, e, field);
		});
		
		cells.unbind('.datagrid').bind('click.datagrid', function(e){
			var p1 = $(this).offset().left + 5;
			var p2 = $(this).offset().left + $(this)._outerWidth() - 5;
			if (e.pageX < p2 && e.pageX > p1){
				var field = $(this).parent().attr('field');
				var column = $(this).parent().attr('column');
				var col = getColumnOption(target, field);
				if (!col.sortable || state.resizing) return;
				
// opts.sortName = field;
// opts.sortOrder = col.order || 'asc';
//				
// var cls = 'datagrid-sort-' + opts.sortOrder;
// if ($(this).hasClass('datagrid-sort-asc')){
// cls = 'datagrid-sort-desc';
// opts.sortOrder = 'desc';
// } else if ($(this).hasClass('datagrid-sort-desc')){
// cls = 'datagrid-sort-asc';
// opts.sortOrder = 'asc';
// }
// cells.removeClass('datagrid-sort-asc datagrid-sort-desc');
// $(this).addClass(cls);
				
				var names = [];
				var orders = [];
				if (opts.sortName){
					names = opts.sortName.split(',');
					orders = opts.sortOrder.split(',');
				}
// var pos = names.indexOf(field);
				var pos = indexOfArray(names, column);
				var originalOrder = col.order || 'asc';
				if (pos >= 0){
					$(this).removeClass('datagrid-sort-asc datagrid-sort-desc');
					var nextOrder = orders[pos] == 'asc' ? 'desc' : 'asc';
					if (opts.multiSort && nextOrder == originalOrder){
						names.splice(pos,1);
						orders.splice(pos,1);
					} else {
						orders[pos] = nextOrder;
						$(this).addClass('datagrid-sort-' + nextOrder);
					}
				} else {
					if (opts.multiSort){
						// names.push(field);
						names.push(column);						
						orders.push(originalOrder);
					} else {
						// names = [field];
						names = [column];
						orders = [originalOrder];
						cells.removeClass('datagrid-sort-asc datagrid-sort-desc');
					}
					$(this).addClass('datagrid-sort-' + originalOrder);
				}
				opts.sortName = names.join(',');
				opts.sortOrder = orders.join(',');
				
				if (opts.remoteSort){
					request(target);
				} else {
					var data = $.data(target, 'datagrid').data;
					loadData(target, data);
				}
				
				opts.onSortColumn.call(target, opts.sortName, opts.sortOrder);
			}
		}).bind('dblclick.datagrid', function(e){
			var p1 = $(this).offset().left + 5;
			var p2 = $(this).offset().left + $(this)._outerWidth() - 5;
			var cond = opts.resizeHandle == 'right' ? (e.pageX > p2) : (opts.resizeHandle == 'left' ? (e.pageX < p1) : (e.pageX < p1 || e.pageX > p2));
			if (cond){
				var field = $(this).parent().attr('field');
				var col = getColumnOption(target, field);
				if (col.resizable == false) return;
				$(target).datagrid('autoSizeColumn', field);
				col.auto = false;
			}
		});
		
		var resizeHandle = opts.resizeHandle == 'right' ? 'e' : (opts.resizeHandle == 'left' ? 'w' : 'e,w');
		cells.each(function(){
			$(this).resizable({
// handles:'e',
				handles:resizeHandle,
				disabled:($(this).attr('resizable') ? $(this).attr('resizable')=='false' : false),
				minWidth:25,
				onStartResize: function(e){
					state.resizing = true;
// header.css('cursor', 'e-resize');
					header.css('cursor', $('body').css('cursor'));
					if (!state.proxy){
						state.proxy = $('<div class="datagrid-resize-proxy"></div>').appendTo(dc.view);
					}
					state.proxy.css({
						left:e.pageX - $(panel).offset().left - 1,
						display:'none'
					});
					setTimeout(function(){
						if (state.proxy) state.proxy.show();
					}, 500);
				},
				onResize: function(e){
					state.proxy.css({
						left:e.pageX - $(panel).offset().left - 1,
						display:'block'
					});
					return false;
				},
				onStopResize: function(e){
					header.css('cursor', '');
					$(this).css('height','');
					var field = $(this).parent().attr('field');
					var col = getColumnOption(target, field);
					col.width = $(this)._outerWidth();
					col.boxWidth = parseInt(this.style.width);
					col.auto = undefined;
					fixColumnSize(target, field);
// dc.view2.children('div.datagrid-header').scrollLeft(dc.body2.scrollLeft());
					state.proxy.remove();
					state.proxy = null;
					if ($(this).parents('div:first.datagrid-header').parent().hasClass('datagrid-view1')){
						setBodySize(target);
					}
					fitColumns(target);
					opts.onResizeColumn.call(target, field, col.width);
					setTimeout(function(){
						state.resizing = false;
					}, 0);
				}
			});
		});
		
		dc.body1.add(dc.body2).unbind().bind('mouseover', function(e){
			if (state.resizing){return;}
			var tt = $(e.target);
			var tr = tt.closest('tr.datagrid-row');
			if (!doesExist(tr)){return;}
			var index = getIndex(tr);
			highlightRow(target, index);
			var row = opts.finder.getRow(target, index);
			var td = tt.closest('td[field]',tr);
			//处理tooltip冒泡
			if (td.length){
				var field = td.attr('field');
				var tp = $(target).datagrid('getColumnOption',field);
				if(tp.tooltip){
					var tpContent = '';
					var position;//显示位置
					var delta;//离极限位置多少时改变position显示方向
					 if(typeof  tp.tooltip =='function'){
						tpContent = tp.tooltip(field,row,index);
					}else if(typeof tp.tooltip=='object'){
						tpContent = tp.tooltip.content(field,row,index);
						position = tp.tooltip.position;
						delta = tp.tooltip.delta;
					}
					 tooltip(tpContent,td,target,position,delta);
				}
			}
			e.stopPropagation();
		}).bind('mouseout', function(e){
			var tt = $(e.target);
			var tr = tt.closest('tr.datagrid-row');
			if (!doesExist(tr)){return;}
			var index = getIndex(tr);
			opts.finder.getTr(target, index).removeClass('datagrid-row-over');
			var td = tt.closest('td[field]',tr);
			var tp = td.find('[data-roles="mui-tooltip"]');
			if(tp.length>0){
				tp.tooltip('hide');
			}
			e.stopPropagation();
		}).bind('click', function(e){
			var tt = $(e.target);
			var tr = tt.closest('tr.datagrid-row');
			if (!doesExist(tr)){return;}
			var index = getIndex(tr);
			if (tt.parent().hasClass('datagrid-cell-check')){	// click the
																// checkbox
				if (opts.singleSelect && opts.selectOnCheck){
					if (!opts.checkOnSelect) {
						uncheckAll(target, true);
					}
					checkRow(target, index);
				} else {
					if (tt.is(':checked')){
						checkRow(target, index);
					} else {
						uncheckRow(target, index);
					}
				}
			} else {
				var row = opts.finder.getRow(target, index);
				var td = tt.closest('td[field]',tr);
				if (td.length){
					var field = td.attr('field');
					opts.onClickCell.call(target, index, field, row[field]);
				}
				
				if (opts.singleSelect == true){
					selectRow(target, index);
				} else {
					if (tr.hasClass('datagrid-row-selected')){
						unselectRow(target, index);
					} else {
						selectRow(target, index);
					}
				}
				opts.onClickRow.call(target, index, row);
			}
			e.stopPropagation();
		}).bind('dblclick', function(e){
			var tt = $(e.target);
			var tr = tt.closest('tr.datagrid-row');
			if (!doesExist(tr)){return;}
			var index = getIndex(tr);
			var row = opts.finder.getRow(target, index);
			var td = tt.closest('td[field]',tr);
			if (td.length){
				var field = td.attr('field');
				opts.onDblClickCell.call(target, index, field, row[field]);
			}
			opts.onDblClickRow.call(target, index, row);
			e.stopPropagation();
		}).bind('contextmenu', function(e){
			var tr = $(e.target).closest('tr.datagrid-row');
			if (!doesExist(tr)){return;}
			var index = getIndex(tr);
			var row = opts.finder.getRow(target, index);
			opts.onRowContextMenu.call(target, e, index, row);
			e.stopPropagation();
		});
		dc.body2.bind('scroll', function(){
			var b1 = dc.view1.children('div.datagrid-body');
			b1.scrollTop($(this).scrollTop());
			var c1 = dc.body1.children(':first');
			var c2 = dc.body2.children(':first');
			if (c1.length && c2.length){
				var top1 = c1.offset().top;
				var top2 = c2.offset().top;
				if (top1 != top2){
					b1.scrollTop(b1.scrollTop()+top1-top2);
				}
			}
			
// dc.view1.children('div.datagrid-body').scrollTop($(this).scrollTop());
			dc.view2.children('div.datagrid-header,div.datagrid-footer')._scrollLeft($(this)._scrollLeft());
			dc.body2.children('table.datagrid-btable-frozen').css('left', -$(this)._scrollLeft());
		});
		
		function getIndex(tr){
			if (tr.attr('datagrid-row-index')){
				return parseInt(tr.attr('datagrid-row-index'));
			} else {
				return tr.attr('node-id');
			}
		}
		function doesExist(tr){
			return tr.length && tr.parent().length;
		}
	}
	
	//显示tooltip
	function tooltip(tpContent,td,target,position,delta){
		if(!tpContent||tpContent==''){
			return false;
		}
		if(!delta){
			delta =80;
		}
			var offset =$(td).offset();
			var windowSize = getWidthSize();
			position = 'bottom';
			var x = offset.left;
			var y = offset.top;
			if(x<delta&&y<delta){
				if(x>y){
					position='bottom';
				}else{
					position='right';
				}
			}else if(x<delta){
				position = 'right';
			}else if(y<delta){
				position='bottom';
			}
			
			var right = windowSize.pageWidth - x;
			var bottom = windowSize.pageHeight - y;
			if(right<delta&&bottom<delta){
				if(right>bottom){
					position='top';
				}else{
					position='left';
				}
			}else if(bottom<delta){
				position = 'top';
			}else if(right<delta){
				position='left';
			}
//		}
	var t =  $(td).find('div.datagrid-cell').text();
	var datagridCelltip = $(td).find('div.datagrid-cell');
	hidetooltip(target);
	if(datagridCelltip.parent().find('a[data-roles="mui-tooltip"]').length<1){
			if(!datagridCelltip.parent().is('a[data-roles="mui-tooltip"]')){
				datagridCelltip.wrap(function(){
					return '<a data-roles="mui-tooltip"></a>';
				});
			
		}
		var stooltip = datagridCelltip.parent();
		
		var deltaX = datagridCelltip.innerWidth()/2;
		var deltaY =0;
		if(position=='bottom'){
			if(window.navigator.appName=='Microsoft Internet Explorer'){
				deltaX = 0;
				deltaY = 0-parseInt(datagridCelltip.innerHeight());
			}
		}
		if(position=='top'){
			deltaY = parseInt(datagridCelltip.innerHeight());
			if(window.navigator.appName=='Microsoft Internet Explorer'){
				deltaX = 0;
			}
		}
		if(position=='left'){
			deltaY = parseInt(datagridCelltip.innerHeight())/2;
		}
		if(position=='right'){
			deltaY = parseInt(datagridCelltip.innerHeight())/2;	
			if(window.navigator.appName=='Microsoft Internet Explorer'){
				deltaX  = 0-datagridCelltip.innerWidth()/2;
			}
		}	
		$(stooltip).tooltip({
			position:position, 
			content: tpContent,
			showDelay:500,
			hideDelay:0,
			deltaX:deltaX,
			deltaY:deltaY,
			onShow: function(){
				var t = $(this);
				t.tooltip('tip').unbind().bind('mouseenter', function(){
					t.tooltip('show');
				}).bind('mouseleave', function(){
					t.tooltip('hide');
				});
				t.parent().bind('mouseleave',function(){
					$(this).find('a[data-roles="mui-tooltip"]').tooltip('hide');
				});
			}
			});
		var date = new Date().getTime();
		stooltip.tooltip('show');
		stooltip.tooltip('tip').attr('id',date);
		$.parser.parse('#'+date);
		}
	}
	
	function getWidthSize(){
		var pageWidth = window.innerWidth;
		var pageHeight = window.innerHeight;
		if(typeof pageWidth!='number'){
			if(document.compatMode=='CSS1Compat'){
				pageWidth = document.documentElement.clientWidth;
				pageHeight = document.documentElement.clientHeight;
			}else{
				pageWidth = document.body.clientWidth;
				pageHeight = document.body.clientHeight;
			}
		}
		return {pageWidth:pageWidth,pageHeight:pageHeight};
	}
	
	function hidetooltip(target){
		var tooltip = $(target).datagrid('getPanel').find('a[data-roles="mui-tooltip"]');
		for(var item=0;item<tooltip.length;item++){
			if($(tooltip[item]).tooltip('tip')&&$(tooltip[item]).tooltip('tip').css('display')!='none'){
				$(tooltip[item]).tooltip('hide');
			}
		}
	}
	/**
	 * expand the columns to fit the grid width
	 */
	function fitColumns(target){
		var opts = $.data(target, 'datagrid').options;
		var dc = $.data(target, 'datagrid').dc;
		dc.body2.css('overflow-x', opts.fitColumns?'hidden':'');
		if (!opts.fitColumns){
			return;
		}
		var header = dc.view2.children('div.datagrid-header');
		var fieldWidths = 0;
		var lastColumn;
		var fields = getColumnFields(target, false);
		for(var i=0; i<fields.length; i++){
			var col = getColumnOption(target, fields[i]);
			if (canResize(col)){
				fieldWidths += col.width;
				lastColumn = col;
			}
		}
		var headerInner = header.children('div.datagrid-header-inner').show();
		var leftWidth = header.width() - header.find('table').width() - opts.scrollbarSize;
		var rate = leftWidth / fieldWidths;
		if (!opts.showHeader) headerInner.hide();
		for(var i=0; i<fields.length; i++){
			var col = getColumnOption(target, fields[i]);
			if (canResize(col)){
				var width = Math.floor(col.width * rate);
				addHeaderWidth(col, width);
				leftWidth -= width;
			}
		}
		
		if (leftWidth && lastColumn){
			addHeaderWidth(lastColumn,leftWidth);
		}
		fixColumnSize(target);
		
		function addHeaderWidth(col,width){
			col.width += width;
			col.boxWidth += width;
			header.find('td[field="' + col.field + '"] div.datagrid-cell').width(col.boxWidth);
		}
		function canResize(col){
			if (!col.hidden && !col.checkbox && !col.auto && !col.fixed) return true;
// if (!col.hidden && !col.checkbox && !col.auto) return true;
		}
	}
	
	/**
	 * adjusts the column width to fit the contents.
	 */
	function autoSizeColumn(target, field){
		var opts = $.data(target, 'datagrid').options;
		var dc = $.data(target, 'datagrid').dc;
		if (field){
			setSize(field);
			if (opts.fitColumns){
				setBodySize(target);
				fitColumns(target);
			}
		} else {
			var canFitColumns = false;
			var fields = getColumnFields(target,true).concat(getColumnFields(target,false));
			for(var i=0; i<fields.length; i++){
				var field = fields[i];
				var col = getColumnOption(target, field);
				if (col.auto){
					setSize(field);
					canFitColumns = true;
				}
			}
			if (canFitColumns && opts.fitColumns){
				setBodySize(target);
				fitColumns(target);
			}
		}
		
		function setSize(field){
			var headerCell = dc.view.find('div.datagrid-header td[field="' + field + '"] div.datagrid-cell');
			headerCell.css('width', '');
			var col = $(target).datagrid('getColumnOption', field);
			col.width = undefined;
			col.boxWidth = undefined;
			col.auto = true;
			$(target).datagrid('fixColumnSize', field);
			var width = Math.max(headerCell._outerWidth(), getWidth('allbody'), getWidth('allfooter'));
			headerCell._outerWidth(width);
			col.width = width;
			col.boxWidth = parseInt(headerCell[0].style.width);
			$(target).datagrid('fixColumnSize', field);
			opts.onResizeColumn.call(target, field, col.width);
			
			// get cell width of specified type(body or footer)
			function getWidth(type){
				var width = 0;
				opts.finder.getTr(target,0,type).find('td[field="' + field + '"] div.datagrid-cell').each(function(){
					var w = $(this)._outerWidth();
					if (width < w){
						width = w;
					}
				});
				return width;
			}
		}
	}
	
	
	/**
	 * fix column size for the specified field
	 */
	function fixColumnSize(target, field){
		var state = $.data(target, 'datagrid');
		if (!state){
			return;
		}
		var opts = state.options;
		var dc = state.dc;
		var table = dc.view.find('table.datagrid-btable,table.datagrid-ftable');
		table.css('table-layout','fixed');
		if (field) {
			fix(field);
		} else {
			var ff = getColumnFields(target, true).concat(getColumnFields(target, false));	// get
																							// all
																							// fields
			for(var i=0; i<ff.length; i++){
				fix(ff[i]);
			}
		}
		table.css('table-layout','auto');
		fixMergedSize(target);
		
		setTimeout(function(){
			fixRowHeight(target);
			fixEditableSize(target);
		}, 0);
		
		function fix(field){
			var col = getColumnOption(target, field);
			if (!col.checkbox){
				state.ss.set('.'+col.cellClass, col.boxWidth ? col.boxWidth + 'px' : 'auto');
			}
		}
	}
	
// function fixMergedSize(target){
// var dc = $.data(target, 'datagrid').dc;
// var cells =
// dc.body1.add(dc.body2).find('td.datagrid-td-merged>div.datagrid-cell');
// cells.css('width','').each(function(){
// $(this)._outerWidth($(this).parent().width());
// });
// }
	function fixMergedSize(target){
		if (!$.data(target, 'datagrid')){
			return;
		}
		var dc = $.data(target, 'datagrid').dc;
		dc.body1.add(dc.body2).find('td.datagrid-td-merged').each(function(){
			var td = $(this);
			var colspan = td.attr('colspan') || 1;
			var width = getColumnOption(target, td.attr('field')).width;
			for(var i=1; i<colspan; i++){
				td = td.next();
				width += getColumnOption(target, td.attr('field')).width+1;
			}
			$(this).children('div.datagrid-cell')._outerWidth(width);
		});
	}
	
	function fixEditableSize(target){
		if (!$.data(target, 'datagrid')){
			return;
		}
		var dc = $.data(target, 'datagrid').dc;
		dc.view.find('div.datagrid-editable').each(function(){
			var cell = $(this);
			var field = cell.parent().attr('field');
			//添加冒泡之后获取field方式改变
			if(cell.parent().attr('data-roles')=='mui-tooltip'){
				field = cell.parent().parent().attr('field');
			}
			var col = $(target).datagrid('getColumnOption', field);
			cell._outerWidth(col.width);
			var ed = $.data(this, 'datagrid.editor');
			if (ed.actions.resize) {
				ed.actions.resize(ed.target, cell.width());
			}
		});
	}
	
	function getColumnOption(target, field){
		function find(columns){
			if (columns) {
				for(var i=0; i<columns.length; i++){
					var cc = columns[i];
					for(var j=0; j<cc.length; j++){
						var c = cc[j];
						if (c.field == field){
							return c;
						}
					}
				}
			}
			return null;
		}
		
		var opts = $.data(target, 'datagrid').options;
		var col = find(opts.columns);
		if (!col){
			col = find(opts.frozenColumns);
		}
		return col;
	}
	
	/**
	 * get column fields which will be show in row
	 */
	function getColumnFields(target, frozen){
		if (!$.data(target, 'datagrid')){
			return;
		}
		var opts = $.data(target, 'datagrid').options;
		var columns = (frozen==true) ? (opts.frozenColumns || [[]]) : opts.columns;
		if (columns.length == 0) return [];
		
		var fields = [];
		
		function getColumnIndex(count){
			var c = 0;
			var i = 0;
			while(true){
				if (fields[i] == undefined){
					if (c == count){
						return i;
					}
					c ++;
				}
				i++;
			}
		}
		
		function getFields(r){
			var ff = [];
			var c = 0;
			for(var i=0; i<columns[r].length; i++){
				var col = columns[r][i];
				if (col.field){
					ff.push([c, col.field]);	// store the field index and
												// name
				}
				c += parseInt(col.colspan || '1');
			}
			for(var i=0; i<ff.length; i++){
				ff[i][0] = getColumnIndex(ff[i][0]);	// calculate the real
														// index in fields array
			}
			for(var i=0; i<ff.length; i++){
				var f = ff[i];
				fields[f[0]] = f[1];	// update the field name
			}
		}
		
		for(var i=0; i<columns.length; i++){
			getFields(i);
		}
		
		return fields;
	}
	
	/**
	 * load data to the grid
	 */
	function loadData(target, data){
		if (!$.data(target, 'datagrid')){
			return;
		}
		var state = $.data(target, 'datagrid');
		var opts = state.options;
		var dc = state.dc;
		
		data = opts.loadFilter.call(target, data);
		data.total = parseInt(data.total);
		state.data = data;
		if (data.footer){
			state.footer = data.footer;
		}
		
		if (!opts.remoteSort && opts.sortName){
			var names = opts.sortName.split(',');
			var orders = opts.sortOrder.split(',');
			data.rows.sort(function(r1,r2){
				var r = 0;
				for(var i=0; i<names.length; i++){
					var sn = names[i];
					var so = orders[i];
					var col = getColumnOption(target, sn);
					var sortFunc = col.sorter || function(a,b){
						return a==b ? 0 : (a>b?1:-1);
					};
					r = sortFunc(r1[sn], r2[sn]) * (so=='asc'?1:-1);
					if (r != 0){
						return r;
					}
				}
				return r;
			});
			
// var opt = getColumnOption(target, opts.sortName);
// if (opt){
// var sortFunc = opt.sorter || function(a,b){
// return (a>b?1:-1);
// };
// data.rows.sort(function(r1,r2){
// return sortFunc(r1[opts.sortName],
// r2[opts.sortName])*(opts.sortOrder=='asc'?1:-1);
// });
// }
		}
		
		// render datagrid view
		if (opts.view.onBeforeRender){
			opts.view.onBeforeRender.call(opts.view, target, data.rows);
		}
		opts.view.render.call(opts.view, target, dc.body2, false);
		opts.view.render.call(opts.view, target, dc.body1, true);
		if (opts.showFooter){
			opts.view.renderFooter.call(opts.view, target, dc.footer2, false);
			opts.view.renderFooter.call(opts.view, target, dc.footer1, true);
		}
		if (opts.view.onAfterRender){
			opts.view.onAfterRender.call(opts.view, target);
		}
		
		state.ss.clean();
		// 加载数据完成后取消全选
		if(opts.unSelectAfterLoad){
			$(target).datagrid('unselectAll');
		}
		opts.onLoadSuccess.call(target, data);
		
		var pager = $(target).datagrid('getPager');
		if (pager.length){
			var popts = pager.pagination('options');
			if (popts.total != data.total){
				pager.pagination('refresh',{total:data.total});
				if (opts.pageNumber != popts.pageNumber){
					opts.pageNumber = popts.pageNumber;
					request(target);
				}
			}
// if (pager.pagination('options').total != data.total){
// pager.pagination('refresh',{total:data.total});
// }
		}
		
		fixRowHeight(target);
// bindRowEvents(target);
		dc.body2.triggerHandler('scroll');
		
		setSelection();
		$(target).datagrid('autoSizeColumn');
		
		/*
		 * set row selection that previously selected
		 */
		function setSelection(){
			if (opts.idField){
				for(var i=0; i<data.rows.length; i++){
					var row = data.rows[i];
					if (contains(state.selectedRows, row)){
						opts.finder.getTr(target, i).addClass('datagrid-row-selected');
					}
					if (contains(state.checkedRows, row)){
						opts.finder.getTr(target, i).find('div.datagrid-cell-check input[type=checkbox]')._propAttr('checked', true);
					}
				}
			}
			function contains(a,r){
				for(var i=0; i<a.length; i++){
					if (a[i][opts.idField] == r[opts.idField]){
						a[i] = r;
						return true;
					}
				}
				return false;
			}
		}
	}
	
	/**
	 * Return the index of specified row or -1 if not found. row: id value or
	 * row record
	 */
	function getRowIndex(target, row){
		if (!$.data(target, 'datagrid')){
			return;
		}
		var state = $.data(target, 'datagrid');
		var opts = state.options;
		var rows = state.data.rows;
		if (typeof row == 'object'){
			return indexOfArray(rows, row);
		} else {
			for(var i=0; i<rows.length; i++){
				if (rows[i][opts.idField] == row){
					return i;
				}
			}
			return -1;
		}
	}
	
	function getSelectedRows(target){
		if (!$.data(target, 'datagrid')){
			return;
		}
		var state = $.data(target, 'datagrid');
		var opts = state.options;
		var data = state.data;
		
		if (opts.idField){
			return state.selectedRows;
		} else {
			var rows = [];
			opts.finder.getTr(target, '', 'selected', 2).each(function(){
				var index = parseInt($(this).attr('datagrid-row-index'));
				rows.push(data.rows[index]);
			});
			return rows;
		}
	}
	
	function getCheckedRows(target){
		if (!$.data(target, 'datagrid')){
			return;
		}
		var state = $.data(target, 'datagrid');
		var opts = state.options;
		if (opts.idField){
			return state.checkedRows;
		} else {
			var rows = [];
// state.dc.view.find('div.datagrid-cell-check input:checked').each(function(){
// var index = $(this).closest('tr.datagrid-row').attr('datagrid-row-index');
// rows.push(opts.finder.getRow(target, index));
// });
			opts.finder.getTr(target, '', 'checked').each(function(){
				rows.push(opts.finder.getRow(target, $(this)));
			});
			return rows;
		}
	}
	
	function scrollTo(target, index){
		if (!$.data(target, 'datagrid')){
			return;
		}
		var state = $.data(target, 'datagrid');
		var dc = state.dc;
		var opts = state.options;
		var tr = opts.finder.getTr(target, index);
		if (tr.length){
			if (tr.closest('table').hasClass('datagrid-btable-frozen')){return;}
			var headerHeight = dc.view2.children('div.datagrid-header')._outerHeight();
			var body2 = dc.body2;
			var frozenHeight = body2.outerHeight(true) - body2.outerHeight();
			var top = tr.position().top - headerHeight - frozenHeight;
			if (top < 0){
				body2.scrollTop(body2.scrollTop() + top);
			} else if (top + tr._outerHeight() > body2.height() - 18){
				body2.scrollTop(body2.scrollTop() + top + tr._outerHeight() - body2.height() + 18);
			}
		}
	}
	
	function highlightRow(target, index){
		if (!$.data(target, 'datagrid')){
			return;
		}
		var state = $.data(target, 'datagrid');
		var opts = state.options;
		opts.finder.getTr(target, state.highlightIndex).removeClass('datagrid-row-over');
		opts.finder.getTr(target, index).addClass('datagrid-row-over');
		state.highlightIndex = index;
// scrollTo(target, index);
	}
	
	/**
	 * select a row, the row index start with 0
	 */
	function selectRow(target, index, notCheck){
		if (!$.data(target, 'datagrid')){
			return;
		}
		var state = $.data(target, 'datagrid');
		var dc = state.dc;
		var opts = state.options;
		var selectedRows = state.selectedRows;
		
		if (opts.singleSelect){
			unselectAll(target);
			selectedRows.splice(0, selectedRows.length);
		}
		if (!notCheck && opts.checkOnSelect){
			checkRow(target, index, true);	// don't select the row again
		}
		
		var row = opts.finder.getRow(target, index);
		if (opts.idField){
			addArrayItem(selectedRows, opts.idField, row);
		}
		opts.finder.getTr(target, index).addClass('datagrid-row-selected');
		opts.onSelect.call(target, index, row);
		scrollTo(target, index);
	}
	/**
	 * unselect a row
	 */
	function unselectRow(target, index, notCheck){
		var state = $.data(target, 'datagrid');
		var dc = state.dc;
		var opts = state.options;
		var selectedRows = $.data(target, 'datagrid').selectedRows;
		
		if (!notCheck && opts.checkOnSelect){
			uncheckRow(target, index, true);	// don't unselect the row again
		}
		opts.finder.getTr(target, index).removeClass('datagrid-row-selected');
		var row = opts.finder.getRow(target, index);
		if (opts.idField){
			removeArrayItem(selectedRows, opts.idField, row[opts.idField]);
		}
		opts.onUnselect.call(target, index, row);
	}
	/**
	 * select all rows on current page
	 */
	function selectAll(target, notCheck){
		var state = $.data(target, 'datagrid');
		var opts = state.options;
		var rows = state.data.rows;
		var selectedRows = $.data(target, 'datagrid').selectedRows;
		
		if (!notCheck && opts.checkOnSelect){
			checkAll(target, true);	// don't select rows again
		}
		opts.finder.getTr(target, '', 'allbody').addClass('datagrid-row-selected');
		if (opts.idField){
			for(var index=0; index<rows.length; index++){
				addArrayItem(selectedRows, opts.idField, rows[index]);
			}
		}
		opts.onSelectAll.call(target, rows);
	}
	/**
	 * unselect all rows on current page
	 */
	function unselectAll(target, notCheck){
		var state = $.data(target, 'datagrid');
		var opts = state.options;
		var rows = state.data.rows;
		var selectedRows = $.data(target, 'datagrid').selectedRows;
		
		if (!notCheck && opts.checkOnSelect){
			uncheckAll(target, true);	// don't unselect rows again
		}
		opts.finder.getTr(target, '', 'selected').removeClass('datagrid-row-selected');
		if (opts.idField){
			for(var index=0; index<rows.length; index++){
				removeArrayItem(selectedRows, opts.idField, rows[index][opts.idField]);
			}
		}
		opts.onUnselectAll.call(target, rows);
	}
	
	/**
	 * check a row, the row index start with 0
	 */
	function checkRow(target, index, notSelect){
		
		var state = $.data(target, 'datagrid');
		var opts = state.options;
		if (!notSelect && opts.selectOnCheck){
			selectRow(target, index, true);	// don't check the row again
		}
		var ck = opts.finder.getTr(target, index).find('div.datagrid-cell-check input[type=checkbox]');
		ck._propAttr('checked', true);
		ck = opts.finder.getTr(target, '', 'checked');
		if (ck.length == state.data.rows.length){
			var dc = state.dc;
			var header = dc.header1.add(dc.header2);
			header.find('input[type=checkbox]')._propAttr('checked', true);
		}
		var row = opts.finder.getRow(target, index);
		if (opts.idField){
			addArrayItem(state.checkedRows, opts.idField, row);
		}
		opts.onCheck.call(target, index, row);
	}
	/**
	 * uncheck a row
	 */
	function uncheckRow(target, index, notSelect){
		var state = $.data(target, 'datagrid');
		var opts = state.options;
		if (!notSelect && opts.selectOnCheck){
			unselectRow(target, index, true);	// don't uncheck the row again
		}
		var ck = opts.finder.getTr(target, index).find('div.datagrid-cell-check input[type=checkbox]');
		ck._propAttr('checked', false);
		var dc = state.dc;
		var header = dc.header1.add(dc.header2);
		header.find('input[type=checkbox]')._propAttr('checked', false);
		var row = opts.finder.getRow(target, index);
		if (opts.idField){
			removeArrayItem(state.checkedRows, opts.idField, row[opts.idField]);
		}
		opts.onUncheck.call(target, index, row);
	}
	/**
	 * check all checkbox on current page
	 */
	function checkAll(target, notSelect){
		
		var state = $.data(target, 'datagrid');
		var opts = state.options;
		var rows = state.data.rows;
		if (!notSelect && opts.selectOnCheck){
			selectAll(target, true);	// don't check rows again
		}
		var dc = state.dc;
		var hck = dc.header1.add(dc.header2).find('input[type=checkbox]');
		var bck = opts.finder.getTr(target, '', 'allbody').find('div.datagrid-cell-check input[type=checkbox]');
		hck.add(bck)._propAttr('checked', true);
		if (opts.idField){
			for(var i=0; i<rows.length; i++){
				addArrayItem(state.checkedRows, opts.idField, rows[i]);
			}
		}
		opts.onCheckAll.call(target, rows);
	}
	/**
	 * uncheck all checkbox on current page
	 */
	function uncheckAll(target, notSelect){
		var state = $.data(target, 'datagrid');
		var opts = state.options;
		var rows = state.data.rows;
		if (!notSelect && opts.selectOnCheck){
			unselectAll(target, true);	// don't uncheck rows again
		}
		var dc = state.dc;
		var hck = dc.header1.add(dc.header2).find('input[type=checkbox]');
		var bck = opts.finder.getTr(target, '', 'allbody').find('div.datagrid-cell-check input[type=checkbox]');
		hck.add(bck)._propAttr('checked', false);
		if (opts.idField){
			for(var i=0; i<rows.length; i++){
				removeArrayItem(state.checkedRows, opts.idField, rows[i][opts.idField]);
			}
		}
		opts.onUncheckAll.call(target, rows);
	}
	
	
	/**
	 * Begin edit a row
	 */
	function beginEdit(target, index){
		//编辑之前先关闭冒泡提示
		hidetooltip(target);

		//add on 2015-01-29
		if($.data(target, 'datagrid')==null){return;}
		//
		var opts = $.data(target, 'datagrid').options;
		var tr = opts.finder.getTr(target, index);
		var row = opts.finder.getRow(target, index);
		if (tr.hasClass('datagrid-row-editing')) return;
		if (opts.onBeforeEdit.call(target, index, row) == false) return;
		
		tr.addClass('datagrid-row-editing');
		createEditor(target, index);
		fixEditableSize(target);
		
		tr.find('div.datagrid-editable').each(function(){
			var field = $(this).parent().attr('field');
			//冒泡字段行编辑时默认值
			if($(this).parent().attr('data-roles')=='mui-tooltip'){
				field = $(this).parent().parent().attr('field');
			}
			var ed = $.data(this, 'datagrid.editor');
			ed.actions.setValue(ed.target, row[field]);
		});
		validateRow(target, index);	// validate the row data
	}
	
	/**
	 * Stop edit a row. index: the row index. cancel: if true, restore the row
	 * data.
	 */
	function endEdit(target, index, cancel){
		//add on 2015-01-29
		if($.data(target, 'datagrid')==null){return;}
		//
		var opts = $.data(target, 'datagrid').options;
		var updatedRows = $.data(target, 'datagrid').updatedRows;
		var insertedRows = $.data(target, 'datagrid').insertedRows;
		
		var tr = opts.finder.getTr(target, index);
		var row = opts.finder.getRow(target, index);
		if (!tr.hasClass('datagrid-row-editing')) {
			return;
		}
		
		if (!cancel){
			if (!validateRow(target, index)) return;	// invalid row data
			
			var changed = false;
			var changes = {};
			tr.find('div.datagrid-editable').each(function(){
				var field = $(this).parent().attr('field');
				//冒泡字段行编辑时默认值
				if($(this).parent().attr('data-roles')=='mui-tooltip'){
					field = $(this).parent().parent().attr('field');
				}
				var ed = $.data(this, 'datagrid.editor');
				var value = ed.actions.getValue(ed.target);
				if (row[field] != value){
					row[field] = value;
					changed = true;
					changes[field] = value;
				}
			});
			if (changed){
				if (indexOfArray(insertedRows, row) == -1){
					if (indexOfArray(updatedRows, row) == -1){
						updatedRows.push(row);
					}
				}
			}
		}
		
		tr.removeClass('datagrid-row-editing');
		
		destroyEditor(target, index);
		$(target).datagrid('refreshRow', index);
		
		if (!cancel){
			opts.onAfterEdit.call(target, index, row, changes);
		} else {
			opts.onCancelEdit.call(target, index, row);
		}
	}
	
	/**
	 * get the specified row editors
	 */
	function getEditors(target, index){
		//add on 2015-01-29
		if($.data(target, 'datagrid')==null){return null;}
		//
		var opts = $.data(target, 'datagrid').options;
		var tr = opts.finder.getTr(target, index);
		var editors = [];
		tr.children('td').each(function(){
			var cell = $(this).find('div.datagrid-editable');
			if (cell.length){
				var ed = $.data(cell[0], 'datagrid.editor');
				editors.push(ed);
			}
		});
		return editors;
	}
	
	/**
	 * get the cell editor param contains two parameters: index and field
	 */
	function getEditor(target, param){
		var editors = getEditors(target, param.index!=undefined ? param.index : param.id);
		for(var i=0; i<editors.length; i++){
			if (editors[i].field == param.field){
				return editors[i];
			}
		}
		return null;
	}
	
	/**
	 * create the row editor and adjust the row height.
	 */
	function createEditor(target, index){
		//add on 2015-01-29
		if($.data(target, 'datagrid')==null){return;}
		//
		var opts = $.data(target, 'datagrid').options;
		var tr = opts.finder.getTr(target, index);
		tr.children('td').each(function(){
			var cell = $(this).find('div.datagrid-cell');
			var field = $(this).attr('field');
			
			var col = getColumnOption(target, field);
			if (col && col.editor){
				// get edit type and options
				var edittype,editoptions;
				if (typeof col.editor == 'string'){
					edittype = col.editor;
				} else {
					edittype = col.editor.type;
					editoptions = col.editor.options;
				}
				
				// get the specified editor
				var editor = opts.editors[edittype];
				if (editor){
					var oldHtml = cell.html();
					var width = cell._outerWidth();
					cell.addClass('datagrid-editable');
					cell._outerWidth(width);
					cell.html('<table border="0" cellspacing="0" cellpadding="1"><tr><td></td></tr></table>');
// cell.children('table').attr('align', col.align);
					cell.children('table').bind('click dblclick contextmenu',function(e){
						e.stopPropagation();
					});
					$.data(cell[0], 'datagrid.editor', {
						actions: editor,
						target: editor.init(cell.find('td'), editoptions),
						field: field,
						type: edittype,
						oldHtml: oldHtml
					});
				}
			}
		});
		fixRowHeight(target, index, true);
	}
	
	/**
	 * destroy the row editor and restore the row height.
	 */
	function destroyEditor(target, index){
		var opts = $.data(target, 'datagrid').options;
		var tr = opts.finder.getTr(target, index);
		tr.children('td').each(function(){
			var cell = $(this).find('div.datagrid-editable');
			if (cell.length){
				var ed = $.data(cell[0], 'datagrid.editor');
				if (ed.actions.destroy) {
					ed.actions.destroy(ed.target);
				}
				cell.html(ed.oldHtml);
				$.removeData(cell[0], 'datagrid.editor');
				
				cell.removeClass('datagrid-editable');
				cell.css('width','');
			}
		});
	}
	
	/**
	 * Validate while editing, if valid return true.
	 */
	function validateRow(target, index){
		var tr = $.data(target, 'datagrid').options.finder.getTr(target, index);
		if (!tr.hasClass('datagrid-row-editing')){
			return true;
		}
		
		var vbox = tr.find('.validatebox-text');
		vbox.validatebox('validate');
		vbox.trigger('mouseleave');
		var invalidbox = tr.find('.validatebox-invalid');
		return invalidbox.length == 0;
	}
	
	/**
	 * Get changed rows, if state parameter is not assigned, return all changed.
	 * state: inserted,deleted,updated
	 */
	function getChanges(target, state){
		var insertedRows = $.data(target, 'datagrid').insertedRows;
		var deletedRows = $.data(target, 'datagrid').deletedRows;
		var updatedRows = $.data(target, 'datagrid').updatedRows;
		
		if (!state){
			var rows = [];
			rows = rows.concat(insertedRows);
			rows = rows.concat(deletedRows);
			rows = rows.concat(updatedRows);
			return rows;
		} else if (state == 'inserted'){
			return insertedRows;
		} else if (state == 'deleted'){
			return deletedRows;
		} else if (state == 'updated'){
			return updatedRows;
		}
		
		return [];
	}
	
	function deleteRow(target, index){
		//删除之前先关闭冒泡提示
		hidetooltip(target);
		
		var state = $.data(target, 'datagrid');
		var opts = state.options;
		var data = state.data;
		var insertedRows = state.insertedRows;
		var deletedRows = state.deletedRows;
		
		$(target).datagrid('cancelEdit', index);
		
		var row = data.rows[index];
		if (indexOfArray(insertedRows, row) >= 0){
			removeArrayItem(insertedRows, row);
		} else {
			deletedRows.push(row);
		}
		removeArrayItem(state.selectedRows, opts.idField, data.rows[index][opts.idField]);
		removeArrayItem(state.checkedRows, opts.idField, data.rows[index][opts.idField]);
		
		opts.view.deleteRow.call(opts.view, target, index);
		if (opts.height == 'auto'){
			fixRowHeight(target);	// adjust the row height
		}
		$(target).datagrid('getPager').pagination('refresh', {total:data.total});
	}
	
	function insertRow(target, param){
		var data = $.data(target, 'datagrid').data;
		var view = $.data(target, 'datagrid').options.view;
		var insertedRows = $.data(target, 'datagrid').insertedRows;
		view.insertRow.call(view, target, param.index, param.row);
// bindRowEvents(target);
		insertedRows.push(param.row);
		$(target).datagrid('getPager').pagination('refresh', {total:data.total});
	}
	
	function appendRow(target, row){
		var data = $.data(target, 'datagrid').data;
		var view = $.data(target, 'datagrid').options.view;
		var insertedRows = $.data(target, 'datagrid').insertedRows;
		view.insertRow.call(view, target, null, row);
		insertedRows.push(row);
		$(target).datagrid('getPager').pagination('refresh', {total:data.total});
	}
	
	function initChanges(target){
		var state = $.data(target, 'datagrid');
		var data = state.data;
		var rows = data.rows;
		var originalRows = [];
		for(var i=0; i<rows.length; i++){
			originalRows.push($.extend({}, rows[i]));
		}
		state.originalRows = originalRows;
		state.updatedRows = [];
		state.insertedRows = [];
		state.deletedRows = [];
	}
	
	function acceptChanges(target){
		var data = $.data(target, 'datagrid').data;
		var ok = true;
		for(var i=0,len=data.rows.length; i<len; i++){
			if (validateRow(target, i)){
				endEdit(target, i, false);
			} else {
				ok = false;
			}
		}
		if (ok){
			initChanges(target);
		}
	}
	
	function rejectChanges(target){
		var state = $.data(target, 'datagrid');
		var opts = state.options;
		var originalRows = state.originalRows;
		var insertedRows = state.insertedRows;
		var deletedRows = state.deletedRows;
		var selectedRows = state.selectedRows;
		var checkedRows = state.checkedRows;
		var data = state.data;
		
		function getIds(a){
			var ids = [];
			for(var i=0; i<a.length; i++){
				ids.push(a[i][opts.idField]);
			}
			return ids;
		}
		function doSelect(ids, action){
			
			for(var i=0; i<ids.length; i++){
				var index = getRowIndex(target, ids[i]);
				if (index >= 0){
					(action=='s'?selectRow:checkRow)(target, index, true);
				}
			}
		}
		
		for(var i=0; i<data.rows.length; i++){endEdit(target, i, true);}
		
		var selectedIds = getIds(selectedRows);
		var checkedIds = getIds(checkedRows);
		
		selectedRows.splice(0, selectedRows.length);
		checkedRows.splice(0, checkedRows.length);
		
		data.total += deletedRows.length - insertedRows.length;
		data.rows = originalRows;
		loadData(target, data);
		
		doSelect(selectedIds, 's');
		doSelect(checkedIds, 'c');
		
		initChanges(target);
	}
	
	/**
	 * request remote data
	 */
	function request(target, params){
		var opts = $.data(target, 'datagrid').options;
		
		if (params) opts.queryParams = params;
		
		var param = $.extend({}, opts.queryParams);
		if (opts.pagination){
			$.extend(param, {
				page: opts.pageNumber,
				rows: opts.pageSize
			});
		}
		if(opts.autosort) {
			$.extend(param, {
				autosort: opts.autosort
			});
		}
		if (opts.sortName){
			$.extend(param, {
				sort: opts.sortName,
				order: opts.sortOrder
			});
		}
		
		if (opts.onBeforeLoad.call(target, param) == false) return;
		
		$(target).datagrid('loading');
		setTimeout(function(){
			doRequest();
		}, 0);
		
		function doRequest(){		
			var result = opts.loader.call(target, param, function(data){
				setTimeout(function(){
					$(target).datagrid('loaded');
				}, 0);
				
				loadData(target, data);
				setTimeout(function(){
					initChanges(target);
				}, 0);
			}, function(){
				setTimeout(function(){
					$(target).datagrid('loaded');
				}, 0);
				opts.onLoadError.apply(target, arguments);
			});
			if (result == false){
				$(target).datagrid('loaded');
			}
		}
	}
	//create by wanghl
	//动态改变行号，解决行号显示不全的问题
	function fixRownumber(target) {
        return target.each(function () {
            var panel = $(this).datagrid("getPanel");
            //获取最后一行的number容器,并拷贝一份
            var clone = $(".datagrid-cell-rownumber", panel).last().clone();
            //由于在某些浏览器里面,是不支持获取隐藏元素的宽度,所以取巧一下
            clone.css({
                "position" : "absolute",
                left : -1000
            }).appendTo("body");
            var width = clone.width("auto").width();
            //默认宽度是25,所以只有大于25的时候才进行fix
            if (width > 25) {
                //多加5个像素,保持一点边距
                $(".datagrid-header-rownumber,.datagrid-cell-rownumber", panel).width(width + 5);
                //修改了宽度之后,需要对容器进行重新计算,所以调用resize
                $(this).datagrid("resize");
                //一些清理工作
                clone.remove();
                clone = null;
            } else {
                //还原成默认状态
                $(".datagrid-header-rownumber,.datagrid-cell-rownumber", panel).removeAttr("style");
            }
        });
    }
	function mergeCells(target, param){
		var opts = $.data(target, 'datagrid').options;
		
		param.rowspan = param.rowspan || 1;
		param.colspan = param.colspan || 1;
		
		if (param.rowspan == 1 && param.colspan == 1) return;
		
		var tr = opts.finder.getTr(target, (param.index!=undefined ? param.index : param.id));
		if (!tr.length){return;}
		var row = opts.finder.getRow(target, tr);
		var value = row[param.field];	// the cell value
		
		var td = tr.find('td[field="'+param.field+'"]');
		td.attr('rowspan', param.rowspan).attr('colspan', param.colspan);
		td.addClass('datagrid-td-merged');
		
		for(var i=1; i<param.colspan; i++){
			td = td.next();
			td.hide();
			row[td.attr('field')] = value;
		}
		for(var i=1; i<param.rowspan; i++){
			tr = tr.next();
			if (!tr.length){break;}
			var row = opts.finder.getRow(target, tr);
			var td = tr.find('td[field="'+param.field+'"]').hide();
			row[td.attr('field')] = value;
			for(var j=1; j<param.colspan; j++){
				td = td.next();
				td.hide();
				row[td.attr('field')] = value;
			}
		}
		
		fixMergedSize(target);
	}
	
	$.fn.datagrid = function(options, param){
		if (typeof options == 'string'){
			return $.fn.datagrid.methods[options](this, param);
		}
		
		options = options || {};
		return this.each(function(){
			var state = $.data(this, 'datagrid');
			var opts;
			if (state) {
				opts = $.extend(state.options, options);
				state.options = opts;
			} else {
				opts = $.extend({}, $.extend({},$.fn.datagrid.defaults,{queryParams:{}}), $.fn.datagrid.parseOptions(this), options);
				$(this).css('width', '').css('height', '');
				
				var wrapResult = wrapGrid(this, opts.rownumbers);
				if (!opts.columns) opts.columns = wrapResult.columns;
				if (!opts.frozenColumns) opts.frozenColumns = wrapResult.frozenColumns;
				opts.columns = $.extend(true, [], opts.columns);
				opts.frozenColumns = $.extend(true, [], opts.frozenColumns);
				opts.view = $.extend({}, opts.view);
				$.data(this, 'datagrid', {
					options: opts,
					panel: wrapResult.panel,
					dc: wrapResult.dc,
					ss: wrapResult.ss,
					selectedRows: [],
					checkedRows: [],
					data: {total:0,rows:[]},
					originalRows: [],
					updatedRows: [],
					insertedRows: [],
					deletedRows: []
				});
			}
			
			buildGrid(this);
			
			if (opts.data){
				loadData(this, opts.data);
				initChanges(this);
			} else {
				var data = $.fn.datagrid.parseData(this);
				if (data.total > 0){
					loadData(this, data);
					initChanges(this);
				}
			}
			
			setSize(this);
			request(this);
			bindEvents(this);
		});
	};
	
	var editors = {
		text: {
			init: function(container, options){
				var input = $('<input type="text" class="datagrid-editable-input">').appendTo(container);
				return input;
			},
			getValue: function(target){
				return $(target).val();
			},
			setValue: function(target, value){
				$(target).val(value);
			},
			resize: function(target, width){
				$(target)._outerWidth(width)._outerHeight(22);
			}
		},
		textarea: {
			init: function(container, options){
				var input = $('<textarea class="datagrid-editable-input"></textarea>').appendTo(container);
				return input;
			},
			getValue: function(target){
				return $(target).val();
			},
			setValue: function(target, value){
				$(target).val(value);
			},
			resize: function(target, width){
				$(target)._outerWidth(width);
			}
		},
		checkbox: {
			init: function(container, options){
				var input = $('<input type="checkbox">').appendTo(container);
				input.val(options.on);
				input.attr('offval', options.off);
				if(options.onchange!=null && options.onchange!=''){
					input.change(function(){
						options.onchange.call(input,input.val(),input);
					});
				}
				if(options.onclick!=null && options.onclick!=''){
					input.click(function(){
						options.onclick.call(input,input.val(),input);
					});
				}				
				return input;
			},
			getValue: function(target){
				if ($(target).is(':checked')){
					return $(target).val();
				} else {
					return $(target).attr('offval');
				}
			},
			setValue: function(target, value){
				var checked = false;
				if ($(target).val() == value){
					checked = true;
				}
				$(target)._propAttr('checked', checked);
			}
		},
		numberbox: {
			init: function(container, options){
				var input = $('<input type="text" class="datagrid-editable-input">').appendTo(container);
				input.numberbox(options);
				return input;
			},
			destroy: function(target){
				$(target).numberbox('destroy');
			},
			getValue: function(target){
				$(target).blur();
				return $(target).numberbox('getValue');
			},
			setValue: function(target, value){
				$(target).numberbox('setValue', value);
			},
			resize: function(target, width){
				$(target)._outerWidth(width)._outerHeight(22);
			}
		},
		validatebox: {
			init: function(container, options){
				var input = $('<input type="text" class="datagrid-editable-input">').appendTo(container);
				input.validatebox(options);
				return input;
			},
			destroy: function(target){
				$(target).validatebox('destroy');
			},
			getValue: function(target){
				return $(target).val();
			},
			setValue: function(target, value){
				$(target).val(value);
			},
			resize: function(target, width){
				$(target)._outerWidth(width)._outerHeight(22);
			}
		},
		datebox: {
			init: function(container, options){
				var input = $('<input type="text">').appendTo(container);
				input.datebox(options);
				return input;
			},
			destroy: function(target){
				$(target).datebox('destroy');
			},
			getValue: function(target){
				return $(target).datebox('getValue');
			},
			setValue: function(target, value){
				$(target).datebox('setValue', value);
			},
			resize: function(target, width){
				$(target).datebox('resize', width);
			}
		},
		combobox: {
			init: function(container, options){
				var combo = $('<input type="text">').appendTo(container);
				combo.combobox(options || {});
				return combo;
			},
			destroy: function(target){
				$(target).combobox('destroy');
			},
			getValue: function(target){
				var opts = $(target).combobox('options');
				if (opts.multiple){
					return $(target).combobox('getValues').join(opts.separator);
				} else {
					return $(target).combobox('getValue');
				}
// return $(target).combobox('getValue');
			},
			setValue: function(target, value){
				var opts = $(target).combobox('options');
				if (opts.multiple){
					if (value){
						$(target).combobox('setValues', value.split(opts.separator));
					} else {
						$(target).combobox('clear');
					}
				} else {
					$(target).combobox('setValue', value);
				}
// $(target).combobox('setValue', value);
			},
			resize: function(target, width){
				$(target).combobox('resize', width)
			}
		},
		combotree: {
			init: function(container, options){
				var combo = $('<input type="text">').appendTo(container);
				combo.combotree(options);
				return combo;
			},
			destroy: function(target){
				$(target).combotree('destroy');
			},
			getValue: function(target){
				return $(target).combotree('getValue');
			},
			setValue: function(target, value){
				$(target).combotree('setValue', value);
			},
			resize: function(target, width){
				$(target).combotree('resize', width)
			}
		}
	};
	
	$.fn.datagrid.methods = {
		options: function(jq){
			var state = $.data(jq[0], 'datagrid');
			var gopts = $.data(jq[0], 'datagrid').options;
			var popts = $.data(jq[0], 'datagrid').panel.panel('options');
			var opts = $.extend(gopts, {
				width: popts.width,
				height: popts.height,
				closed: popts.closed,
				collapsed: popts.collapsed,
				minimized: popts.minimized,
				maximized: popts.maximized
			});
// var pager = jq.datagrid('getPager');
// if (pager.length){
// var pagerOpts = pager.pagination('options');
// $.extend(opts, {
// pageNumber: pagerOpts.pageNumber,
// pageSize: pagerOpts.pageSize
// });
// }
			return opts;
		},
		getPanel: function(jq){
			return $.data(jq[0], 'datagrid').panel;
		},
		getPager: function(jq){
			return $.data(jq[0], 'datagrid').panel.children('div.datagrid-pager');
		},
		getColumnFields: function(jq, frozen){
			return getColumnFields(jq[0], frozen);
		},
		getColumnOption: function(jq, field){
			return getColumnOption(jq[0], field);
		},
		resize: function(jq, param){
			return jq.each(function(){
				setSize(this, param);
			});
		},
		load: function(jq, params){
			return jq.each(function(){
				var opts = $(this).datagrid('options');
			/*
			 * var old=opts.lazyLoad; if(old=true) opts.lazyLoad=false;
			 */
				opts.pageNumber = 1;
				var pager = $(this).datagrid('getPager');
// pager.pagination({pageNumber:1});
				pager.pagination('refresh', {pageNumber:1});
				request(this, params);
			// opts.lazyLoad=old;
			});
		},
		reload: function(jq, params){
			return jq.each(function(){
			/*
			 * var old=opts.lazyLoad; if(old=true) opts.lazyLoad=false;
			 */
				   request(this, params);
			// opts.lazyLoad=old;
			});
		},
		reloadFooter: function(jq, footer){
			return jq.each(function(){
				var opts = $.data(this, 'datagrid').options;
				var dc = $.data(this, 'datagrid').dc;
				if (footer){
					$.data(this, 'datagrid').footer = footer;
				}
				if (opts.showFooter){
					opts.view.renderFooter.call(opts.view, this, dc.footer2, false);
					opts.view.renderFooter.call(opts.view, this, dc.footer1, true);
					if (opts.view.onAfterRender){
						opts.view.onAfterRender.call(opts.view, this);
					}
					$(this).datagrid('fixRowHeight');
				}
			});
		},
		loading: function(jq){
			return jq.each(function(){
				var opts = $.data(this, 'datagrid').options;
				$(this).datagrid('getPager').pagination('loading');
				if (opts.loadMsg){
					var panel = $(this).datagrid('getPanel');
					if (!panel.children('div.datagrid-mask').length){
						$('<div class="datagrid-mask" style="display:block"></div>').appendTo(panel);
						var msg = $('<div class="datagrid-mask-msg" style="display:block;left:50%"></div>').html(opts.loadMsg).appendTo(panel);
						msg.css('marginLeft', -msg.outerWidth()/2);
					}
				}
			});
		},
		loaded: function(jq){
			return jq.each(function(){
				$(this).datagrid('getPager').pagination('loaded');
				var panel = $(this).datagrid('getPanel');
				panel.children('div.datagrid-mask-msg').remove();
				panel.children('div.datagrid-mask').remove();
			});
		},
		fitColumns: function(jq){
			return jq.each(function(){
				fitColumns(this);
			});
		},
		fixColumnSize: function(jq, field){
			return jq.each(function(){
				fixColumnSize(this, field);
			});
		},
		fixRowHeight: function(jq, index){
			return jq.each(function(){
				fixRowHeight(this, index);
			});
		},
		freezeRow: function(jq, index){
			return jq.each(function(){
				freezeRow(this, index);
			});
		},
		autoSizeColumn: function(jq, field){	// adjusts the column width to
												// fit the contents.
			return jq.each(function(){
				autoSizeColumn(this, field);
			});
		},
		
		loadData: function(jq, data){
			return jq.each(function(){
				loadData(this, data);
				initChanges(this);
			});
		},
		getData: function(jq){
			return $.data(jq[0], 'datagrid').data;
		},
		getRows: function(jq){
			return $.data(jq[0], 'datagrid').data.rows;
		},
		getFooterRows: function(jq){
			return $.data(jq[0], 'datagrid').footer;
		},
		getRowIndex: function(jq, id){	// id or row record
			return getRowIndex(jq[0], id);
		},
		getChecked: function(jq){
			return getCheckedRows(jq[0]);
		},
		getSelected: function(jq){
			var rows = getSelectedRows(jq[0]);
			return rows.length>0 ? rows[0] : null;
		},
		getSelections: function(jq){
			return getSelectedRows(jq[0]);
		},
		clearSelections: function(jq){
			return jq.each(function(){
				var selectedRows = $.data(this, 'datagrid').selectedRows;
				selectedRows.splice(0, selectedRows.length);
				unselectAll(this);
			});
		},
		clearChecked: function(jq){
			return jq.each(function(){
				var checkedRows = $.data(this, 'datagrid').checkedRows;
				checkedRows.splice(0, checkedRows.length);
				uncheckAll(this);
			});
		},
		scrollTo: function(jq, index){
			return jq.each(function(){
				scrollTo(this, index);
			});
		},
		highlightRow: function(jq, index){
			return jq.each(function(){
				highlightRow(this, index);
				scrollTo(this, index);
			});
		},
		selectAll: function(jq){
			return jq.each(function(){
				selectAll(this);
			});
		},
		unselectAll: function(jq){
			return jq.each(function(){
				unselectAll(this);
			});
		},
		selectRow: function(jq, index){
			return jq.each(function(){
				selectRow(this, index);
			});
		},
		selectRecord: function(jq, id){
			return jq.each(function(){
				var opts = $.data(this, 'datagrid').options;
				if (opts.idField){
					var index = getRowIndex(this, id);
					if (index >= 0){
						$(this).datagrid('selectRow', index);
					}
				}
			});
		},
		unselectRow: function(jq, index){
			return jq.each(function(){
				unselectRow(this, index);
			});
		},
		checkRow: function(jq, index){
			return jq.each(function(){
				checkRow(this, index);
			});
		},
		uncheckRow: function(jq, index){
			return jq.each(function(){
				uncheckRow(this, index);
			});
		},
		checkAll: function(jq){
			return jq.each(function(){
				checkAll(this);
			});
		},
		uncheckAll: function(jq){
			return jq.each(function(){
				uncheckAll(this);
			});
		},
		beginEdit: function(jq, index){
			return jq.each(function(){
				beginEdit(this, index);
			});
		},
		endEdit: function(jq, index){
			return jq.each(function(){
				endEdit(this, index, false);
			});
		},
		cancelEdit: function(jq, index){
			return jq.each(function(){
				endEdit(this, index, true);
			});
		},
		getEditors: function(jq, index){
			return getEditors(jq[0], index);
		},
		getEditor: function(jq, param){	// param: {index:0, field:'name'}
			return getEditor(jq[0], param);
		},
		refreshRow: function(jq, index){
			return jq.each(function(){
				var opts = $.data(this, 'datagrid').options;
				opts.view.refreshRow.call(opts.view, this, index);
			});
		},
		validateRow: function(jq, index){
			return validateRow(jq[0], index);
		},
		updateRow: function(jq, param){	// param:
										// {index:1,row:{code:'code1',name:'name1'}}
			return jq.each(function(){
				var opts = $.data(this, 'datagrid').options;
				opts.view.updateRow.call(opts.view, this, param.index, param.row);
			});
		},
		appendRow: function(jq, row){
			return jq.each(function(){
				appendRow(this, row);
			});
		},
		insertRow: function(jq, param){
			return jq.each(function(){
				insertRow(this, param);
			});
		},
		deleteRow: function(jq, index){
			return jq.each(function(){
				deleteRow(this, index);
			});
		},
		getChanges: function(jq, state){
			return getChanges(jq[0], state);	// state:
												// inserted,deleted,updated
		},
		acceptChanges: function(jq){
			return jq.each(function(){
				acceptChanges(this);
			});
		},
		rejectChanges: function(jq){
			return jq.each(function(){
				rejectChanges(this);
			});
		},
		mergeCells: function(jq, param){
			return jq.each(function(){
				mergeCells(this, param);
			});
		},
		showColumn: function(jq, field){
			return jq.each(function(){
				var panel = $(this).datagrid('getPanel');
				panel.find('td[field="' + field + '"]').show();
				$(this).datagrid('getColumnOption', field).hidden = false;
				$(this).datagrid('fitColumns');
			});
		},
		hideColumn: function(jq, field){
			return jq.each(function(){
				var panel = $(this).datagrid('getPanel');
				panel.find('td[field="' + field + '"]').hide();
				$(this).datagrid('getColumnOption', field).hidden = true;
				$(this).datagrid('fitColumns');
			});
		},
		//--只读特定的列
		removeEditor:function(jq,param){
			if(param instanceof Array){
				$.each(param,function(index,item){
					var e = $(jq).datagrid('getColumnOption',item);
					if(e != null){
						e.editor = {};
					}
				});
			}else{
				var e = $(jq).datagrid('getColumnOption',param);
				if(e != null){
					e.editor = {};
				}
			}
		},
		// ----------------------wangkun
		setLazyLoad:function(jq,flag){
			$.data(jq[0], 'datagrid').options.lazyLoad = flag;
			if(flag === false){
				$(jq[0]).datagrid('reload');
			}
		},
		//-------wanghl
		fixRownumber:function(jq){
			fixRownumber(jq);
		}
	};
	
	$.fn.datagrid.parseOptions = function(target){
		var t = $(target);
		return $.extend({}, $.fn.panel.parseOptions(target), $.parser.parseOptions(target, [
			'url','toolbar','idField','sortName','sortOrder','pagePosition','resizeHandle',
			{fitColumns:'boolean',autoRowHeight:'boolean',striped:'boolean',nowrap:'boolean'},
			{rownumbers:'boolean',singleSelect:'boolean',checkOnSelect:'boolean',selectOnCheck:'boolean'},
			{pagination:'boolean',pageSize:'number',pageNumber:'number'},
			{multiSort:'boolean',remoteSort:'boolean',showHeader:'boolean',showFooter:'boolean'},
			{scrollbarSize:'number'}
		]), {
			pageList: (t.attr('pageList') ? eval(t.attr('pageList')) : undefined),
			loadMsg: (t.attr('loadMsg')!=undefined ? t.attr('loadMsg') : undefined),
			rowStyler: (t.attr('rowStyler') ? eval(t.attr('rowStyler')) : undefined)
		});
	};
	
	$.fn.datagrid.parseData = function(target){
		var t = $(target);
		var data = {
			total:0,
			rows:[]
		};
		var fields = t.datagrid('getColumnFields',true).concat(t.datagrid('getColumnFields',false));
		t.find('tbody tr').each(function(){
			data.total++;
			var row = {};
			$.extend(row, $.parser.parseOptions(this,['iconCls','state']));
			for(var i=0; i<fields.length; i++){
				row[fields[i]] = $(this).find('td:eq('+i+')').html();
			}
			data.rows.push(row);
		});
		return data;
	};
	
	var defaultView = {
		render: function(target, container, frozen){
			var state = $.data(target, 'datagrid');
			var opts = state.options;
			var rows = state.data.rows;
			var fields = $(target).datagrid('getColumnFields', frozen);
			
			if (frozen){
				if (!(opts.rownumbers || (opts.frozenColumns && opts.frozenColumns.length))){
					return;
				}
			}
			
			var table = ['<table class="datagrid-btable" cellspacing="0" cellpadding="0" border="0"><tbody>'];
			for(var i=0; i<rows.length; i++) {
				// get the class and style attributes for this row
				var css = opts.rowStyler ? opts.rowStyler.call(target, i, rows[i]) : '';
				var classValue = '';
				var styleValue = '';
				if (typeof css == 'string'){
					styleValue = css;
				} else if (css){
					classValue = css['class'] || '';
					styleValue = css['style'] || '';
				}
				
				var cls = 'class="datagrid-row ' + (i % 2 && opts.striped ? 'datagrid-row-alt ' : ' ') + classValue + '"';
				var style = styleValue ? 'style="' + styleValue + '"' : '';
				var rowId = state.rowIdPrefix + '-' + (frozen?1:2) + '-' + i;
				table.push('<tr id="' + rowId + '" datagrid-row-index="' + i + '" ' + cls + ' ' + style + '>');
				table.push(this.renderRow.call(this, target, fields, frozen, i, rows[i]));
				table.push('</tr>');
			}
			table.push('</tbody></table>');
// $(container).html(table.join('');
			$(container)[0].innerHTML = table.join('');
		},
		
		renderFooter: function(target, container, frozen){
			var opts = $.data(target, 'datagrid').options;
			var rows = $.data(target, 'datagrid').footer || [];
			var fields = $(target).datagrid('getColumnFields', frozen);
			var table = ['<table class="datagrid-ftable" cellspacing="0" cellpadding="0" border="0"><tbody>'];
			
			for(var i=0; i<rows.length; i++){
				table.push('<tr class="datagrid-row" datagrid-row-index="' + i + '">');
				table.push(this.renderRow.call(this, target, fields, frozen, i, rows[i]));
				table.push('</tr>');
			}
			
			table.push('</tbody></table>');
			$(container).html(table.join(''));
			
		},
		
		renderRow: function(target, fields, frozen, rowIndex, rowData){
			var opts = $.data(target, 'datagrid').options;
			
			var cc = [];
			if (frozen && opts.rownumbers){
				var rownumber = rowIndex + 1;
				if (opts.pagination){
					rownumber += (opts.pageNumber-1)*opts.pageSize;
				}
				cc.push('<td class="datagrid-td-rownumber"><div class="datagrid-cell-rownumber">'+rownumber+'</div></td>');
			}
			for(var i=0; i<fields.length; i++){
				var field = fields[i];
				var col = $(target).datagrid('getColumnOption', field);
				if (col){
					var value = rowData[field];	// the field value
					var css = col.styler ? (col.styler(value, rowData, rowIndex)||'') : '';
					var classValue = '';
					var styleValue = '';
					if (typeof css == 'string'){
						styleValue = css;
					} else if (cc){
						classValue = css['class'] || '';
						styleValue = css['style'] || '';
					}
					var cls = classValue ? 'class="' + classValue + '"' : '';
					var style = col.hidden ? 'style="display:none;' + styleValue + '"' : (styleValue ? 'style="' + styleValue + '"' : '');
					
					cc.push('<td field="' + field + '" ' + cls + ' ' + style + '>');
					
					if (col.checkbox){
						var style = '';
					} else {
						var style = styleValue;
						if (col.align){style += ';text-align:' + col.align + ';'}
						if (!opts.nowrap){
							style += ';white-space:normal;height:auto;word-break: break-all;';
						} else if (opts.autoRowHeight){
							style += ';height:auto;';
						}
					}
					
					cc.push('<div style="' + style + '" ');
					cc.push(col.checkbox ? 'class="datagrid-cell-check"' : 'class="datagrid-cell ' + col.cellClass + '"');
					cc.push('>');
					
					if (col.checkbox){
						cc.push('<input type="checkbox" name="' + field + '" value="' + (value!=undefined ? value : '') + '">');
					} else if (col.formatter){
						if(col.formatter2){
							cc.push(col.formatter2(col.formatter(value, rowData, rowIndex),rowData, rowIndex));
						}else{
							cc.push(col.formatter(value, rowData, rowIndex));
						}
					} else {
						cc.push(value);
					}
					cc.push('</div>');
					cc.push('</td>');
				}
			}
			return cc.join('');
		},
		
		refreshRow: function(target, rowIndex){
			this.updateRow.call(this, target, rowIndex, {});
		},
		
		updateRow: function(target, rowIndex, row){
			var me = this;
			var opts = $.data(target, 'datagrid').options;
			var rows = $(target).datagrid('getRows');
			$.extend(rows[rowIndex], row);
			var css = opts.rowStyler ? opts.rowStyler.call(target, rowIndex, rows[rowIndex]) : '';
			var classValue = '';
			var styleValue = '';
			if (typeof css == 'string'){
				styleValue = css;
			} else if (css){
				classValue = css['class'] || '';
				styleValue = css['style'] || '';
			}
			var classValue = 'datagrid-row ' + (rowIndex % 2 && opts.striped ? 'datagrid-row-alt ' : ' ') + classValue;
			
			function _update(frozen){
				var fields = $(target).datagrid('getColumnFields', frozen);
				var tr = opts.finder.getTr(target, rowIndex, 'body', (frozen?1:2));
				var checked = tr.find('div.datagrid-cell-check input[type=checkbox]').is(':checked');
				tr.html(this.renderRow.call(this, target, fields, frozen, rowIndex, rows[rowIndex]));
				tr.attr('style', styleValue).attr('class', classValue);
				if (checked){
					tr.find('div.datagrid-cell-check input[type=checkbox]')._propAttr('checked', true);
				}
			}
			
			_update.call(this, true);
			_update.call(this, false);
			$(target).datagrid('fixRowHeight', rowIndex);
			this.rowAction(target);
		},
		insertRow: function(target, index, row){
			var state = $.data(target, 'datagrid');
			var opts = state.options;
			var dc = state.dc;
			var data = state.data;
			
			if (index == undefined || index == null) index = data.rows.length;
			if (index > data.rows.length) index = data.rows.length;
			
			function _incIndex(frozen){
				var serno = frozen?1:2;
				for(var i=data.rows.length-1; i>=index; i--){
					var tr = opts.finder.getTr(target, i, 'body', serno);
					tr.attr('datagrid-row-index', i+1);
					tr.attr('id', state.rowIdPrefix + '-' + serno + '-' + (i+1));
					if (frozen && opts.rownumbers){
						var rownumber = i+2;
						if (opts.pagination){
							rownumber += (opts.pageNumber-1)*opts.pageSize;
						}
						tr.find('div.datagrid-cell-rownumber').html(rownumber);
					}
					if (opts.striped){
						tr.removeClass('datagrid-row-alt').addClass((i+1)%2 ? 'datagrid-row-alt' : '');
					}
				}
			}
			
			function _insert(frozen){
				var serno = frozen?1:2;
				var fields = $(target).datagrid('getColumnFields', frozen);
				var rowId = state.rowIdPrefix + '-' + serno + '-' + index;
				var tr = '<tr id="' + rowId + '" class="datagrid-row" datagrid-row-index="' + index + '"></tr>';
// var tr = '<tr id="' + rowId + '" class="datagrid-row" datagrid-row-index="' +
// index + '">' + this.renderRow.call(this, target, fields, frozen, index, row)
// + '</tr>';
				if (index >= data.rows.length){	// append new row
					if (data.rows.length){	// not empty
						opts.finder.getTr(target, '', 'last', serno).after(tr);
					} else {
						var cc = frozen ? dc.body1 : dc.body2;
						cc.html('<table cellspacing="0" cellpadding="0" border="0"><tbody>' + tr + '</tbody></table>');
					}
				} else {	// insert new row
					opts.finder.getTr(target, index+1, 'body', serno).before(tr);
				}
			}
			
			_incIndex.call(this, true);
			_incIndex.call(this, false);
			_insert.call(this, true);
			_insert.call(this, false);
			
			data.total += 1;
			data.rows.splice(index, 0, row);
			
			this.refreshRow.call(this, target, index);
			this.rowAction(target);
		},
		
		deleteRow: function(target, index){
			var state = $.data(target, 'datagrid');
			var opts = state.options;
			var data = state.data;
			
			function _decIndex(frozen){
				var serno = frozen?1:2;
				for(var i=index+1; i<data.rows.length; i++){
					var tr = opts.finder.getTr(target, i, 'body', serno);
					tr.attr('datagrid-row-index', i-1);
					tr.attr('id', state.rowIdPrefix + '-' + serno + '-' + (i-1));
					if (frozen && opts.rownumbers){
						var rownumber = i;
						if (opts.pagination){
							rownumber += (opts.pageNumber-1)*opts.pageSize;
						}
						tr.find('div.datagrid-cell-rownumber').html(rownumber);
					}
					if (opts.striped){
						tr.removeClass('datagrid-row-alt').addClass((i-1)%2 ? 'datagrid-row-alt' : '');
					}
				}
			}
			
			opts.finder.getTr(target, index).remove();
			_decIndex.call(this, true);
			_decIndex.call(this, false);
			
			data.total -= 1;
			data.rows.splice(index,1);
			this.rowAction(target);
		},
		
		onBeforeRender: function(target, rows){},
		onAfterRender: function(target){
			var opts = $.data(target, 'datagrid').options;
			if (opts.showFooter){
				var footer = $(target).datagrid('getPanel').find('div.datagrid-footer');
				footer.find('div.datagrid-cell-rownumber,div.datagrid-cell-check').css('visibility', 'hidden');
			}
			this.rowAction(target);
		},
		rowAction: function(target){
			var opts = $.data(target, 'datagrid').options;
			var rows = $(target).datagrid('getRows');
			var fields = $(target).datagrid('getColumnFields');
			for(var i=0; i<rows.length; i++){
				var tr = opts.finder.getTr(target, i);
				tr.children('td').each(function(){
					var field = $(this).attr('field');
					var col = $(target).datagrid('getColumnOption', field);
					if (col){
						if(col.buttons){
							$(this).find('.actionColumns').remove();
							for ( var int = 0; int < col.buttons.length; int++) {
								(function(btn, rs, index, con){
									var click = eval(btn.onclick);
									var beforeCreate = eval(btn.beforeCreate);
									if(!beforeCreate || beforeCreate(rs[index])){
										
										if(!btn.auth || $.inArray(btn.auth,sessionUtils.getAuths()) > 0){
											$('<a class="actionColumns"></a>').unbind('click').click(function(event){
												event.stopPropagation();
												click(rs[index], index);
											}).appendTo(con.children('div.datagrid-cell')).addClass(btn.cls).linkbutton(btn);
										}
									}
								})(col.buttons[int], rows, i, $(this));
							}
						}else if(col.type==="link" && col.onclick){
							(function(btn, rs, index, con){
								var click = eval(btn.onclick);
								// var beforeCreate = eval(btn.beforeCreate);
								// if(!beforeCreate || beforeCreate(rs[index])){
								con.find('.linkColumns').unbind('click').click(function(event){
// if(event && event.stopPropagation){
										event.stopPropagation();
// }else{
// event.cancelBubble = true;
// }
									click(rs[index], index);
								});
								// }
							})(col, rows, i, $(this));
						}
					}
				});
			}	
		}
	};
	
	$.fn.datagrid.defaults = $.extend({}, $.fn.panel.defaults, {
		// wangkun add lazyLoad
		lazyLoad:false,
		frozenColumns: undefined,
		columns: undefined,
		fitColumns: false,
		resizeHandle: 'right',	// left,right,both
		autoRowHeight: true,
		toolbar: null,
		striped: true,
		method: 'post',
		nowrap: true,
		idField: null,
		url: null,
		data: null,
		loadMsg: 'Processing, please wait ...',
		rownumbers: false,
		singleSelect: false,
		selectOnCheck: true,
		checkOnSelect: true,
		pagination: false,
		pagePosition: 'bottom',	// top,bottom,both
		pageNumber: 1,
		pageSize: 10,
		pageList: [10,20,30,40,50],
		queryParams: {},
		sortName: null,
		sortOrder: 'asc',
		multiSort: false,
		remoteSort: true,
		showHeader: true,
		showFooter: false,
		scrollbarSize: 18,
		unSelectAfterLoad: true,// 加载完成后取消全选
		rowStyler: function(rowIndex, rowData){},	// return style such as
													// 'background:red'
		loader: function(param, success, error){
			var opts = $(this).datagrid('options');
			// ----------------------wangkun
			if(opts.lazyLoad) return false;
			
			if (!opts.url) return false;
			$.ajax({
				type: opts.method,
				url: opts.url,
				data: param,
				dataType: 'json',
				success: function(data){
					success(data);
				},
				error: function(){
					error.apply(this, arguments);
				}
			});
		},
		loadFilter: function(data){
			if (typeof data.length == 'number' && typeof data.splice == 'function'){	// is
																						// array
				return {
					total: data.length,
					rows: data
				};
			} else {
				return data;
			}
		},
		
		editors: editors,
		finder:{
			getTr:function(target, index, type, serno){
				type = type || 'body';
				serno = serno || 0;
				var state = $.data(target, 'datagrid');
				var dc = state.dc;	// data container
				var opts = state.options;
				if (serno == 0){
					var tr1 = opts.finder.getTr(target, index, type, 1);
					var tr2 = opts.finder.getTr(target, index, type, 2);
					return tr1.add(tr2);
				} else {
					if (type == 'body'){
						var tr = $('#' + state.rowIdPrefix + '-' + serno + '-' + index);
						if (!tr.length){
							tr = (serno==1?dc.body1:dc.body2).find('>table>tbody>tr[datagrid-row-index='+index+']');
						}
						return tr;
					} else if (type == 'footer'){
						return (serno==1?dc.footer1:dc.footer2).find('>table>tbody>tr[datagrid-row-index='+index+']');
					} else if (type == 'selected'){
						return (serno==1?dc.body1:dc.body2).find('>table>tbody>tr.datagrid-row-selected');
					} else if (type == 'highlight'){
						return (serno==1?dc.body1:dc.body2).find('>table>tbody>tr.datagrid-row-over');
					} else if (type == 'checked'){
						return (serno==1?dc.body1:dc.body2).find('>table>tbody>tr.datagrid-row:has(div.datagrid-cell-check input:checked)');
					} else if (type == 'last'){
						return (serno==1?dc.body1:dc.body2).find('>table>tbody>tr[datagrid-row-index]:last');
					} else if (type == 'allbody'){
						return (serno==1?dc.body1:dc.body2).find('>table>tbody>tr[datagrid-row-index]');
					} else if (type == 'allfooter'){
						return (serno==1?dc.footer1:dc.footer2).find('>table>tbody>tr[datagrid-row-index]');
					}
				}
			},
			getRow:function(target, p){	// p can be row index or tr object
				var index = (typeof p == 'object') ? p.attr('datagrid-row-index') : p;
				return $.data(target, 'datagrid').data.rows[parseInt(index)];
			}
		},
		view: defaultView,
		
		onBeforeLoad: function(param){},
		onLoadSuccess: function(){},
		onLoadError: function(){},
		onClickRow: function(rowIndex, rowData){},
		onDblClickRow: function(rowIndex, rowData){},
		onClickCell: function(rowIndex, field, value){},
		onDblClickCell: function(rowIndex, field, value){},
		onSortColumn: function(sort, order){},
		onResizeColumn: function(field, width){},
		onSelect: function(rowIndex, rowData){},
		onUnselect: function(rowIndex, rowData){},
		onSelectAll: function(rows){},
		onUnselectAll: function(rows){},
		onCheck: function(rowIndex, rowData){},
		onUncheck: function(rowIndex, rowData){},
		onCheckAll: function(rows){},
		onUncheckAll: function(rows){},
		onBeforeEdit: function(rowIndex, rowData){},
		onAfterEdit: function(rowIndex, rowData, changes){},
		onCancelEdit: function(rowIndex, rowData){},
		onHeaderContextMenu: function(e, field){},
		onRowContextMenu: function(e, rowIndex, rowData){}
	});
	
	
	
// if($.fn.datagrid) {
// var oriFunc = $.fn.datagrid.defaults.view.onAfterRender;
// $.fn.datagrid.defaults.view.onAfterRender = function(tgt) {
// oriFunc(tgt);
// $(tgt).datagrid("getPanel").find("div.datagrid-body").find("div.datagrid-cell").each(function(){
// var $Obj = $(this);
// $Obj.attr("title",$Obj.text());
// })
// }
// }
// $.extend({},$.fn.datagrid.defaults.view,{
// onAfterRender:function(tgt) {
// $(tgt).datagrid("getPanel").find("div.datagrid-body").find("div.datagrid-cell").each(function(){
// var $Obj = $(this);
// $Obj.attr("title",$Obj.text());
// })
// }
// });
})(jQuery);
/**
 * propertygrid - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php
 * 
 * Dependencies: datagrid
 * 
 */
(function($){
	var currTarget;
	
	function buildGrid(target){
		var state = $.data(target, 'propertygrid');
		var opts = $.data(target, 'propertygrid').options;
		$(target).datagrid($.extend({}, opts, {
			cls:'propertygrid',
			view:(opts.showGroup ? groupview : undefined),
			onClickRow:function(index, row){
				if (currTarget != this){
// leaveCurrRow();
					stopEditing(currTarget);
					currTarget = this;
				}
				if (opts.editIndex != index && row.editor){
					var col = $(this).datagrid('getColumnOption', "value");
					col.editor = $.parseJSON(row.editor);
// leaveCurrRow();
					stopEditing(currTarget);
				
					$(this).datagrid('beginEdit', index);
					$(this).datagrid('getEditors', index)[0].target.focus();
					opts.editIndex = index;
				}
				opts.onClickRow.call(target, index, row);
			},
			loadFilter:function(data){
				stopEditing(this);
				return opts.loadFilter.call(this, data);
			},
			onLoadSuccess:function(data){
// $(target).datagrid('getPanel').find('div.datagrid-group').css('border','');
				$(target).datagrid('getPanel').find('div.datagrid-group').attr('style','');
				opts.onLoadSuccess.call(target,data);
			}
		}));
		$(document).unbind('.propertygrid').bind('mousedown.propertygrid', function(e){
			var p = $(e.target).closest('div.datagrid-view,div.combo-panel');
// var p = $(e.target).closest('div.propertygrid,div.combo-panel');
			if (p.length){return;}
			stopEditing(currTarget);
			currTarget = undefined;
		});
		
// function leaveCurrRow(){
// var t = $(currTarget);
// if (!t.length){return;}
// var opts = $.data(currTarget, 'propertygrid').options;
// var index = opts.editIndex;
// if (index == undefined){return;}
// var ed = t.datagrid('getEditors', index)[0];
// if (ed){
// ed.target.blur();
// if (t.datagrid('validateRow', index)){
// t.datagrid('endEdit', index);
// } else {
// t.datagrid('cancelEdit', index);
// }
// }
// opts.editIndex = undefined;
// }
	}
	
	function stopEditing(target){
		var t = $(target);
		if (!t.length){return}
		var opts = $.data(target, 'propertygrid').options;
		var index = opts.editIndex;
		if (index == undefined){return;}
		var ed = t.datagrid('getEditors', index)[0];
		if (ed){
			ed.target.blur();
			if (t.datagrid('validateRow', index)){
				t.datagrid('endEdit', index);
			} else {
				t.datagrid('cancelEdit', index);
			}
		}
		opts.editIndex = undefined;
	}
	
	$.fn.propertygrid = function(options, param){
		if (typeof options == 'string'){
			var method = $.fn.propertygrid.methods[options];
			if (method){
				return method(this, param);
			} else {
				return this.datagrid(options, param);
			}
		}
		
		options = options || {};
		return this.each(function(){
			var state = $.data(this, 'propertygrid');
			if (state){
				$.extend(state.options, options);
			} else {
				var opts = $.extend({}, $.fn.propertygrid.defaults, $.fn.propertygrid.parseOptions(this), options);
				opts.frozenColumns = $.extend(true, [], opts.frozenColumns);
				opts.columns = $.extend(true, [], opts.columns);
				$.data(this, 'propertygrid', {
					options: opts
				});
			}
			buildGrid(this);
		});
	}
	
	$.fn.propertygrid.methods = {
		options: function(jq){
			return $.data(jq[0], 'propertygrid').options;
		}
	};
	
	$.fn.propertygrid.parseOptions = function(target){
		var t = $(target);
		return $.extend({}, $.fn.datagrid.parseOptions(target), $.parser.parseOptions(target,[{showGroup:'boolean'}]));
	};
	
	// the group view definition
	var groupview = $.extend({}, $.fn.datagrid.defaults.view, {
		render: function(target, container, frozen){
			var state = $.data(target, 'datagrid');
			var opts = state.options;
			var rows = state.data.rows;
			var fields = $(target).datagrid('getColumnFields', frozen);
			
			var table = [];
			var index = 0;
			var groups = this.groups;
			for(var i=0; i<groups.length; i++){
				var group = groups[i];
				
				table.push('<div class="datagrid-group" group-index=' + i + ' style="height:25px;overflow:hidden;border-bottom:1px solid #ccc;">');
				table.push('<table cellspacing="0" cellpadding="0" border="0" style="height:100%"><tbody>');
				table.push('<tr>');
				table.push('<td style="border:0;">');
				if (!frozen){
					table.push('<span style="color:#666;font-weight:bold;">');
					table.push(opts.groupFormatter.call(target, group.fvalue, group.rows));
					table.push('</span>');
				}
				table.push('</td>');
				table.push('</tr>');
				table.push('</tbody></table>');
				table.push('</div>');
				
				table.push('<table class="datagrid-btable" cellspacing="0" cellpadding="0" border="0"><tbody>');
				for(var j=0; j<group.rows.length; j++) {
					// get the class and style attributes for this row
					var cls = (index % 2 && opts.striped) ? 'class="datagrid-row datagrid-row-alt"' : 'class="datagrid-row"';
					var styleValue = opts.rowStyler ? opts.rowStyler.call(target, index, group.rows[j]) : '';
					var style = styleValue ? 'style="' + styleValue + '"' : '';
					var rowId = state.rowIdPrefix + '-' + (frozen?1:2) + '-' + index;
					table.push('<tr id="' + rowId + '" datagrid-row-index="' + index + '" ' + cls + ' ' + style + '>');
					table.push(this.renderRow.call(this, target, fields, frozen, index, group.rows[j]));
					table.push('</tr>');
					index++;
				}
				table.push('</tbody></table>');
			}
			
			$(container).html(table.join(''));
		},
		
		onAfterRender: function(target){
			var opts = $.data(target, 'datagrid').options;
			var dc = $.data(target, 'datagrid').dc;
			var view = dc.view;
			var view1 = dc.view1;
			var view2 = dc.view2;
			
			$.fn.datagrid.defaults.view.onAfterRender.call(this, target);
			
			if (opts.rownumbers || opts.frozenColumns.length){
				var group = view1.find('div.datagrid-group');
			} else {
				var group = view2.find('div.datagrid-group');
			}
			$('<td style="border:0;text-align:center;width:25px"><span class="datagrid-row-expander datagrid-row-collapse" style="display:inline-block;width:16px;height:16px;cursor:pointer">&nbsp;</span></td>').insertBefore(group.find('td'));
			
			view.find('div.datagrid-group').each(function(){
				var groupIndex = $(this).attr('group-index');
				$(this).find('span.datagrid-row-expander').bind('click', {groupIndex:groupIndex}, function(e){
					if ($(this).hasClass('datagrid-row-collapse')){
						$(target).datagrid('collapseGroup', e.data.groupIndex);
					} else {
						$(target).datagrid('expandGroup', e.data.groupIndex);
					}
				});
			});
		},
		
		onBeforeRender: function(target, rows){
			var opts = $.data(target, 'datagrid').options;
			var groups = [];
			for(var i=0; i<rows.length; i++){
				var row = rows[i];
				var group = getGroup(row[opts.groupField]);
				if (!group){
					group = {
						fvalue: row[opts.groupField],
						rows: [row],
						startRow: i
					};
					groups.push(group);
				} else {
					group.rows.push(row);
				}
			}
			
			function getGroup(fvalue){
				for(var i=0; i<groups.length; i++){
					var group = groups[i];
					if (group.fvalue == fvalue){
						return group;
					}
				}
				return null;
			}
			
			this.groups = groups;
			
			var newRows = [];
			for(var i=0; i<groups.length; i++){
				var group = groups[i];
				for(var j=0; j<group.rows.length; j++){
					newRows.push(group.rows[j]);
				}
			}
			$.data(target, 'datagrid').data.rows = newRows;
		}
	});

	$.extend($.fn.datagrid.methods, {
	    expandGroup:function(jq, groupIndex){
	        return jq.each(function(){
	            var view = $.data(this, 'datagrid').dc.view;
	            if (groupIndex!=undefined){
	                var group = view.find('div.datagrid-group[group-index="'+groupIndex+'"]');
	            } else {
	                var group = view.find('div.datagrid-group');
	            }
	            var expander = group.find('span.datagrid-row-expander');
	            if (expander.hasClass('datagrid-row-expand')){
	                expander.removeClass('datagrid-row-expand').addClass('datagrid-row-collapse');
	                group.next('table').show();
	            }
	            $(this).datagrid('fixRowHeight');
	        });
	    },
	    collapseGroup:function(jq, groupIndex){
	        return jq.each(function(){
	            var view = $.data(this, 'datagrid').dc.view;
	            if (groupIndex!=undefined){
	                var group = view.find('div.datagrid-group[group-index="'+groupIndex+'"]');
	            } else {
	                var group = view.find('div.datagrid-group');
	            }
	            var expander = group.find('span.datagrid-row-expander');
	            if (expander.hasClass('datagrid-row-collapse')){
	                expander.removeClass('datagrid-row-collapse').addClass('datagrid-row-expand');
	                group.next('table').hide();
	            }
	            $(this).datagrid('fixRowHeight');
	        });
	    }
	});
	// end of group view definition
	
	$.fn.propertygrid.defaults = $.extend({}, $.fn.datagrid.defaults, {
		singleSelect:true,
		remoteSort:false,
		fitColumns:true,
		loadMsg:'',
		frozenColumns:[[
		    {field:'f',width:16,resizable:false}
		]],
		columns:[[
		    {field:'name',title:'Name',width:100,sortable:true},
		    {field:'value',title:'Value',width:100,resizable:false}
		]],
		
		showGroup:false,
		groupField:'group',
		groupFormatter:function(fvalue,rows){return fvalue}
	});
})(jQuery);
/**
 * treegrid - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php
 * 
 * Dependencies: datagrid
 * 
 */
(function($){
	/**
	 * Get the index of array item, return -1 when the item is not found.
	 */
// function indexOfArray(a,o){
// for(var i=0,len=a.length; i<len; i++){
// if (a[i] == o) return i;
// }
// return -1;
// }
	/**
	 * Remove array item, 'o' parameter can be item object or id field name.
	 * When 'o' parameter is the id field name, the 'id' parameter is valid.
	 */
// function removeArrayItem(a,o){
// var index = indexOfArray(a,o);
// if (index != -1){
// a.splice(index, 1);
// }
// }
	
	function buildGrid(target){
		var state = $.data(target, 'treegrid')
		var opts = state.options;
		$(target).datagrid($.extend({}, opts, {
			url: null,
			data: null,
			loader: function(){
				return false;
			},
			onBeforeLoad: function(){return false},
			onLoadSuccess: function(){},
			onResizeColumn: function(field, width){
				setRowHeight(target);
				opts.onResizeColumn.call(target, field, width);
			},
			onSortColumn: function(sort,order){
				opts.sortName = sort;
				opts.sortOrder = order;
				if (opts.remoteSort){
					request(target);
				} else {
					var data = $(target).treegrid('getData');
					loadData(target, 0, data);
				}
				opts.onSortColumn.call(target, sort, order);
			},
			onBeforeEdit: function(index, row){
				if (opts.onBeforeEdit.call(target, row) == false) return false;
			},
			onAfterEdit:function(index,row,changes){
				opts.onAfterEdit.call(target, row, changes);
			},
			onCancelEdit:function(index,row){
				opts.onCancelEdit.call(target, row);
			},
			onSelect:function(index){
				opts.onSelect.call(target, find(target, index));
			},
			onUnselect:function(index){
				opts.onUnselect.call(target, find(target, index));
			},
			onSelectAll:function(){
				opts.onSelectAll.call(target, $.data(target, 'treegrid').data);
			},
			onUnselectAll:function(){
				opts.onUnselectAll.call(target, $.data(target, 'treegrid').data);
			},
			onCheck:function(index){
				opts.onCheck.call(target, find(target, index));
			},
			onUncheck:function(index){
				opts.onUncheck.call(target, find(target, index));
			},
			onCheckAll:function(){
				opts.onCheckAll.call(target, $.data(target, 'treegrid').data);
			},
			onUncheckAll:function(){
				opts.onUncheckAll.call(target, $.data(target, 'treegrid').data);
			},
			onClickRow:function(index){
				opts.onClickRow.call(target, find(target, index));
			},
			onDblClickRow:function(index){
				opts.onDblClickRow.call(target, find(target, index));
			},
			onClickCell:function(index,field){
				opts.onClickCell.call(target, field, find(target, index));
			},
			onDblClickCell:function(index,field){
				opts.onDblClickCell.call(target, field, find(target, index));
			},
			onRowContextMenu:function(e,index){
				opts.onContextMenu.call(target, e, find(target, index));
			}
		}));
		if (!opts.columns){
			var dgOpts = $.data(target, 'datagrid').options;
			opts.columns = dgOpts.columns;
			opts.frozenColumns = dgOpts.frozenColumns;
		}
		state.dc = $.data(target, 'datagrid').dc;
		if (opts.pagination){
			var pager = $(target).datagrid('getPager');
			pager.pagination({
				pageNumber:opts.pageNumber,
				pageSize:opts.pageSize,
				pageList:opts.pageList,
				onSelectPage: function(pageNum, pageSize){
					// save the page state
					opts.pageNumber = pageNum;
					opts.pageSize = pageSize;
					
					request(target);	// request new page data
				}
			});
			opts.pageSize = pager.pagination('options').pageSize;	// repare
																	// the
																	// pageSize
																	// value
		}
	}
	
	function setRowHeight(target, idValue){
		var opts = $.data(target, 'datagrid').options;
		var dc = $.data(target, 'datagrid').dc;
		if (!dc.body1.is(':empty') && (!opts.nowrap || opts.autoRowHeight)){
			if (idValue != undefined){
				var children = getChildren(target, idValue);
				for(var i=0; i<children.length; i++){
					setHeight(children[i][opts.idField]);
				}
			}
		}
		$(target).datagrid('fixRowHeight', idValue);
		
		function setHeight(idValue){
			var tr1 = opts.finder.getTr(target, idValue, 'body', 1);
			var tr2 = opts.finder.getTr(target, idValue, 'body', 2);
			tr1.css('height', '');
			tr2.css('height', '');
			var height = Math.max(tr1.height(), tr2.height());
			tr1.css('height', height);
			tr2.css('height', height);
		}
	}
	
	function setRowNumbers(target){
		var dc = $.data(target, 'datagrid').dc;
		var opts = $.data(target, 'treegrid').options;
		if (!opts.rownumbers) return;
		dc.body1.find('div.datagrid-cell-rownumber').each(function(i){
			$(this).html(i+1);
		});
	}
	
	function bindEvents(target){
		var dc = $.data(target, 'datagrid').dc;
		
		var body = dc.body1.add(dc.body2);
		var clickHandler = ($.data(body[0],'events')||$._data(body[0],'events')).click[0].handler;
// var clickHandler = dc.body1.add(dc.body2).data('events').click[0].handler;
		dc.body1.add(dc.body2).bind('mouseover', function(e){
			var tt = $(e.target);
			var tr = tt.closest('tr.datagrid-row');
			if (!tr.length){return;}
			if (tt.hasClass('tree-hit')){
				tt.hasClass('tree-expanded') ? tt.addClass('tree-expanded-hover') : tt.addClass('tree-collapsed-hover');
			}
			e.stopPropagation();
		}).bind('mouseout', function(e){
			var tt = $(e.target);
			var tr = tt.closest('tr.datagrid-row');
			if (!tr.length){return;}
			if (tt.hasClass('tree-hit')){
				tt.hasClass('tree-expanded') ? tt.removeClass('tree-expanded-hover') : tt.removeClass('tree-collapsed-hover');
			}
			e.stopPropagation();
		}).unbind('click').bind('click', function(e){
			var tt = $(e.target);
			var tr = tt.closest('tr.datagrid-row');
			if (!tr.length){return;}
			if (tt.hasClass('tree-hit')){
				toggle(target, tr.attr('node-id'));
			} else {
				clickHandler(e);
			}
			e.stopPropagation();
		});
	}
	
	/**
	 * create sub tree parentId: the node id value
	 */
	function createSubTree(target, parentId){
		var opts = $.data(target, 'treegrid').options;
		var tr1 = opts.finder.getTr(target, parentId, 'body', 1);
		var tr2 = opts.finder.getTr(target, parentId, 'body', 2);
		var colspan1 = $(target).datagrid('getColumnFields', true).length + (opts.rownumbers?1:0);
		var colspan2 = $(target).datagrid('getColumnFields', false).length;

		_create(tr1, colspan1);
		_create(tr2, colspan2);
		
		function _create(tr, colspan){
			$('<tr class="treegrid-tr-tree">' +
					'<td style="border:0px" colspan="' + colspan + '">' +
					'<div></div>' +
					'</td>' +
				'</tr>').insertAfter(tr);
		}
	}
	
	/**
	 * load data to specified node.
	 */
	function loadData(target, parentId, data, append){
		var state = $.data(target, 'treegrid');
		var opts = state.options;
		var dc = state.dc;
		data = opts.loadFilter.call(target, data, parentId);
		
		var node = find(target, parentId);
		if (node){
			var node1 = opts.finder.getTr(target, parentId, 'body', 1);
			var node2 = opts.finder.getTr(target, parentId, 'body', 2);
			var cc1 = node1.next('tr.treegrid-tr-tree').children('td').children('div');
			var cc2 = node2.next('tr.treegrid-tr-tree').children('td').children('div');
			if (!append){node.children = [];}
		} else {
			var cc1 = dc.body1;
			var cc2 = dc.body2;
			if (!append){state.data = [];}
		}
		if (!append){
// state.data = [];
			cc1.empty();
			cc2.empty();
		}
		
		if (opts.view.onBeforeRender){
			opts.view.onBeforeRender.call(opts.view, target, parentId, data);
		}
		opts.view.render.call(opts.view, target, cc1, true);
		opts.view.render.call(opts.view, target, cc2, false);
		if (opts.showFooter){
			opts.view.renderFooter.call(opts.view, target, dc.footer1, true);
			opts.view.renderFooter.call(opts.view, target, dc.footer2, false);
		}
		if (opts.view.onAfterRender){
			opts.view.onAfterRender.call(opts.view, target);
		}
		
		opts.onLoadSuccess.call(target, node, data);
		
		// reset the pagination
		if (!parentId && opts.pagination){
			var total = $.data(target, 'treegrid').total;
			var pager = $(target).datagrid('getPager');
			if (pager.pagination('options').total != total){
				pager.pagination({total:total});
			}
		}
		
		setRowHeight(target);
		setRowNumbers(target);
		$(target).treegrid('autoSizeColumn');
	}
	
	function request(target, parentId, params, append, callback){
		var opts = $.data(target, 'treegrid').options;
		var body = $(target).datagrid('getPanel').find('div.datagrid-body');
		
		if (params) opts.queryParams = params;
		var param = $.extend({}, opts.queryParams);
		if (opts.pagination){
			$.extend(param, {
				page: opts.pageNumber,
				rows: opts.pageSize
			});
		}
		if (opts.sortName){
			$.extend(param, {
				sort: opts.sortName,
				order: opts.sortOrder
			});
		}
		
		var row = find(target, parentId);
		
		if (opts.onBeforeLoad.call(target, row, param) == false) return;
// if (!opts.url) return;
		
		var folder = body.find('tr[node-id="' + parentId + '"] span.tree-folder');
		folder.addClass('tree-loading');
		$(target).treegrid('loading');
		var result = opts.loader.call(target, param, function(data){
			folder.removeClass('tree-loading');
			$(target).treegrid('loaded');
			loadData(target, parentId, data, append);
			if (callback) {
				callback();
			}
		}, function(){
			folder.removeClass('tree-loading');
			$(target).treegrid('loaded');
			opts.onLoadError.apply(target, arguments);
			if (callback){
				callback();
			}
		});
		if (result == false){
			folder.removeClass('tree-loading');
			$(target).treegrid('loaded');
		}
	}
	
	function getRoot(target){
		var rows = getRoots(target);
		if (rows.length){
			return rows[0];
		} else {
			return null;
		}
	}
	
	function getRoots(target){
		return $.data(target, 'treegrid').data;
	}
	
	function getParent(target, idValue){
		var row = find(target, idValue);
		if (row._parentId){
			return find(target, row._parentId);
		} else {
			return null;
		}
	}
	
	function getChildren(target, parentId){
		var opts = $.data(target, 'treegrid').options;
		var body = $(target).datagrid('getPanel').find('div.datagrid-view2 div.datagrid-body');
		var nodes = [];
		if (parentId){
			getNodes(parentId);
		} else {
			var roots = getRoots(target);
			for(var i=0; i<roots.length; i++){
				nodes.push(roots[i]);
				getNodes(roots[i][opts.idField]);
			}
		}
		
		function getNodes(parentId){
			var pnode = find(target, parentId);
			if (pnode && pnode.children){
				for(var i=0,len=pnode.children.length; i<len; i++){
					var cnode = pnode.children[i];
					nodes.push(cnode);
					getNodes(cnode[opts.idField]);
				}
			}
		}
		
		return nodes;
	}
	
	function getSelected(target){
		var rows = getSelections(target);
		if (rows.length){
			return rows[0];
		} else {
			return null;
		}
	}
	
	function getSelections(target){
		var rows = [];
		var panel = $(target).datagrid('getPanel');
		panel.find('div.datagrid-view2 div.datagrid-body tr.datagrid-row-selected').each(function(){
			var id = $(this).attr('node-id');
			rows.push(find(target, id));
		});
		return rows;
	}
	
	function getLevel(target, idValue){
		if (!idValue) return 0;
		var opts = $.data(target, 'treegrid').options;
		var view = $(target).datagrid('getPanel').children('div.datagrid-view');
		var node = view.find('div.datagrid-body tr[node-id="' + idValue + '"]').children('td[field="' + opts.treeField + '"]');
		return node.find('span.tree-indent,span.tree-hit').length;
	}
	
	function find(target, idValue){
		var opts = $.data(target, 'treegrid').options;
		var data = $.data(target, 'treegrid').data;
		var cc = [data];
		while(cc.length){
			var c = cc.shift();
			for(var i=0; i<c.length; i++){
				var node = c[i];
				if (node[opts.idField] == idValue){
					return node;
				} else if (node['children']){
					cc.push(node['children']);
				}
			}
		}
		return null;
	}
	
	function collapse(target, idValue){
		var opts = $.data(target, 'treegrid').options;
		var row = find(target, idValue);
		var tr = opts.finder.getTr(target, idValue);
		var hit = tr.find('span.tree-hit');
		
		if (hit.length == 0) return;	// is leaf
		if (hit.hasClass('tree-collapsed')) return;	// has collapsed
		if (opts.onBeforeCollapse.call(target, row) == false) return;
		
		hit.removeClass('tree-expanded tree-expanded-hover').addClass('tree-collapsed');
		hit.next().removeClass('tree-folder-open');
		row.state = 'closed';
		tr = tr.next('tr.treegrid-tr-tree');
		var cc = tr.children('td').children('div');
		if (opts.animate){
			cc.slideUp('normal', function(){
				$(target).treegrid('autoSizeColumn');
				setRowHeight(target, idValue);
				opts.onCollapse.call(target, row);
			});
		} else {
			cc.hide();
			$(target).treegrid('autoSizeColumn');
			setRowHeight(target, idValue);
			opts.onCollapse.call(target, row);
		}
	}
	
	function expand(target, idValue){
		var opts = $.data(target, 'treegrid').options;
		var tr = opts.finder.getTr(target, idValue);
		var hit = tr.find('span.tree-hit');
		var row = find(target, idValue);
		
		if (hit.length == 0) return;	// is leaf
		if (hit.hasClass('tree-expanded')) return;	// has expanded
		if (opts.onBeforeExpand.call(target, row) == false) return;
		
		hit.removeClass('tree-collapsed tree-collapsed-hover').addClass('tree-expanded');
		hit.next().addClass('tree-folder-open');
		var subtree = tr.next('tr.treegrid-tr-tree');
		if (subtree.length){
			var cc = subtree.children('td').children('div');
			_expand(cc);
		} else {
			createSubTree(target, row[opts.idField]);
			var subtree = tr.next('tr.treegrid-tr-tree');
			var cc = subtree.children('td').children('div');
			cc.hide();
			
// var params = opts.queryParams || {};
			var params = $.extend({}, opts.queryParams || {});
			params.id = row[opts.idField];
			request(target, row[opts.idField], params, true, function(){
				if (cc.is(':empty')){
					subtree.remove();
				} else {
					_expand(cc);
				}
			});
		}
		
		function _expand(cc){
			row.state = 'open';
			if (opts.animate){
				cc.slideDown('normal', function(){
					$(target).treegrid('autoSizeColumn');
					setRowHeight(target, idValue);
					opts.onExpand.call(target, row);
				});
			} else {
				cc.show();
				$(target).treegrid('autoSizeColumn');
				setRowHeight(target, idValue);
				opts.onExpand.call(target, row);
			}
		}
	}
	
	function toggle(target, idValue){
		var opts = $.data(target, 'treegrid').options;
		var tr = opts.finder.getTr(target, idValue);
		var hit = tr.find('span.tree-hit');
		if (hit.hasClass('tree-expanded')){
			collapse(target, idValue);
		} else {
			expand(target, idValue);
		}
	}
	
	function collapseAll(target, idValue){
		var opts = $.data(target, 'treegrid').options;
		var nodes = getChildren(target, idValue);
		if (idValue){
			nodes.unshift(find(target, idValue));
		}
		for(var i=0; i<nodes.length; i++){
			collapse(target, nodes[i][opts.idField]);
		}
	}
	
	function expandAll(target, idValue){
		var opts = $.data(target, 'treegrid').options;
		var nodes = getChildren(target, idValue);
		if (idValue){
			nodes.unshift(find(target, idValue));
		}
		for(var i=0; i<nodes.length; i++){
			expand(target, nodes[i][opts.idField]);
		}
	}
	
	function expandTo(target, idValue){
		var opts = $.data(target, 'treegrid').options;
		var ids = [];
		var p = getParent(target, idValue);
		while(p){
			var id = p[opts.idField];
			ids.unshift(id);
			p = getParent(target, id);
		}
		for(var i=0; i<ids.length; i++){
			expand(target, ids[i]);
		}
	}
	
	function append(target, param){
		var opts = $.data(target, 'treegrid').options;
		if (param.parent){
			var tr = opts.finder.getTr(target, param.parent);
			if (tr.next('tr.treegrid-tr-tree').length == 0){
				createSubTree(target, param.parent);
			}
			var cell = tr.children('td[field="' + opts.treeField + '"]').children('div.datagrid-cell');
			var nodeIcon = cell.children('span.tree-icon');
			if (nodeIcon.hasClass('tree-file')){
				nodeIcon.removeClass('tree-file').addClass('tree-folder tree-folder-open');
// nodeIcon.removeClass('tree-file').addClass('tree-folder');
				var hit = $('<span class="tree-hit tree-expanded"></span>').insertBefore(nodeIcon);
				if (hit.prev().length){
					hit.prev().remove();
				}
			}
		}
		loadData(target, param.parent, param.data, true);
	}
	
	function insert(target, param){
		var ref = param.before || param.after;
		var opts = $.data(target, 'treegrid').options;
		var pnode = getParent(target, ref);
		append(target, {
			parent: (pnode?pnode[opts.idField]:null),
			data: [param.data]
		});
		_move(true);
		_move(false);
		setRowNumbers(target);
		
		function _move(frozen){
			var serno = frozen?1:2;
			var tr = opts.finder.getTr(target, param.data[opts.idField], 'body', serno);
			var table = tr.closest('table.datagrid-btable');
			tr = tr.parent().children();
			var dest = opts.finder.getTr(target, ref, 'body', serno);
			if (param.before){
				tr.insertBefore(dest);
			} else {
				var sub = dest.next('tr.treegrid-tr-tree');
				tr.insertAfter(sub.length?sub:dest);
			}
			table.remove();
		}
	}
	
	/**
	 * remove the specified node
	 */
	function remove(target, idValue){
		var opts = $.data(target, 'treegrid').options;
		var tr = opts.finder.getTr(target, idValue);
		tr.next('tr.treegrid-tr-tree').remove();
		tr.remove();
		
		var pnode = del(idValue);
		if (pnode){
			if (pnode.children.length == 0){
				tr = opts.finder.getTr(target, pnode[opts.idField]);
				tr.next('tr.treegrid-tr-tree').remove();
				var cell = tr.children('td[field="' + opts.treeField + '"]').children('div.datagrid-cell');
				cell.find('.tree-icon').removeClass('tree-folder').addClass('tree-file');
				cell.find('.tree-hit').remove();
				$('<span class="tree-indent"></span>').prependTo(cell);
			}
		}
		
		setRowNumbers(target);
		
		/**
		 * delete the specified node, return its parent node
		 */
		function del(id){
			var cc;
			var pnode = getParent(target, idValue);
			if (pnode){
				cc = pnode.children;
			} else {
				cc = $(target).treegrid('getData');
			}
			for(var i=0; i<cc.length; i++){
				if (cc[i][opts.idField] == id){
					cc.splice(i, 1);
					break;
				}
			}
			return pnode;
		}
	}
	
	
	$.fn.treegrid = function(options, param){
		if (typeof options == 'string'){
			var method = $.fn.treegrid.methods[options];
			if (method){
				return method(this, param);
			} else {
				return this.datagrid(options, param);
			}
		}
		
		options = options || {};
		return this.each(function(){
			var state = $.data(this, 'treegrid');
			if (state){
				$.extend(state.options, options);
			} else {
				state = $.data(this, 'treegrid', {
					options: $.extend({}, $.fn.treegrid.defaults, $.fn.treegrid.parseOptions(this), options),
					data:[]
				});
			}
			
			buildGrid(this);
			
			if (state.options.data){
				$(this).treegrid('loadData', state.options.data);
			}
			
			request(this);
			bindEvents(this);
		});
	};
	
	$.fn.treegrid.methods = {
		options: function(jq){
			return $.data(jq[0], 'treegrid').options;
		},
		resize: function(jq, param){
			return jq.each(function(){
				$(this).datagrid('resize', param);
			});
		},
		fixRowHeight: function(jq, idValue){
			return jq.each(function(){
				setRowHeight(this, idValue);
			});
		},
		loadData: function(jq, data){
			return jq.each(function(){
				loadData(this, data.parent, data);
// loadData(this, null, data);
			});
		},
		load: function(jq, params){
			return jq.each(function(){
				$(this).treegrid('options').pageNumber = 1;
				$(this).treegrid('getPager').pagination({pageNumber:1});
				$(this).treegrid('reload', params);
			});
		},
		reload: function(jq, id){
			return jq.each(function(){
				var opts = $(this).treegrid('options');
// var params = typeof id == 'object' ? id :
// $.extend({},opts.queryParams,{id:id});
				var params = {};
				if (typeof id == 'object'){
					params = id;
				} else {
					params = $.extend({}, opts.queryParams);
					params.id = id;
				}
				
// var params = typeof id == 'object' ? id : {id:id};
				if (params.id){
					var node = $(this).treegrid('find', params.id);
					if (node.children){
						node.children.splice(0, node.children.length);
					}
// var opts = $(this).treegrid('options');
					opts.queryParams = params;
					var tr = opts.finder.getTr(this, params.id);
					tr.next('tr.treegrid-tr-tree').remove();
					tr.find('span.tree-hit').removeClass('tree-expanded tree-expanded-hover').addClass('tree-collapsed');
					expand(this, params.id);
				} else {
					request(this, null, params);
				}
// if (id){
// var node = $(this).treegrid('find', id);
// if (node.children){
// node.children.splice(0, node.children.length);
// }
// var body = $(this).datagrid('getPanel').find('div.datagrid-body');
// var tr = body.find('tr[node-id=' + id + ']');
// tr.next('tr.treegrid-tr-tree').remove();
// var hit = tr.find('span.tree-hit');
// hit.removeClass('tree-expanded
// tree-expanded-hover').addClass('tree-collapsed');
// expand(this, id);
// } else {
// request(this, null, {});
// }
			});
		},
		reloadFooter: function(jq, footer){
			return jq.each(function(){
				var opts = $.data(this, 'treegrid').options;
				var dc = $.data(this, 'datagrid').dc;
				if (footer){
					$.data(this, 'treegrid').footer = footer;
				}
				if (opts.showFooter){
					opts.view.renderFooter.call(opts.view, this, dc.footer1, true);
					opts.view.renderFooter.call(opts.view, this, dc.footer2, false);
					if (opts.view.onAfterRender){
						opts.view.onAfterRender.call(opts.view, this);
					}
					$(this).treegrid('fixRowHeight');
				}
			});
		},
		getData: function(jq){
			return $.data(jq[0], 'treegrid').data;
		},
		getFooterRows: function(jq){
			return $.data(jq[0], 'treegrid').footer;
		},
		getRoot: function(jq){
			return getRoot(jq[0]);
		},
		getRoots: function(jq){
			return getRoots(jq[0]);
		},
		getParent: function(jq, id){
			return getParent(jq[0], id);
		},
		getChildren: function(jq, id){
			return getChildren(jq[0], id);
		},
		getSelected: function(jq){
			return getSelected(jq[0]);
		},
		getSelections: function(jq){
			return getSelections(jq[0]);
		},
		getLevel: function(jq, id){
			return getLevel(jq[0], id);
		},
		find: function(jq, id){
			return find(jq[0], id);
		},
		isLeaf: function(jq, id){
			var opts = $.data(jq[0], 'treegrid').options;
			var tr = opts.finder.getTr(jq[0], id);
			var hit = tr.find('span.tree-hit');
			return hit.length == 0;
		},
		select: function(jq, id){
			return jq.each(function(){
				$(this).datagrid('selectRow', id);
			});
		},
		unselect: function(jq, id){
			return jq.each(function(){
				$(this).datagrid('unselectRow', id);
			});
		},
		collapse: function(jq, id){
			return jq.each(function(){
				collapse(this, id);
			});
		},
		expand: function(jq, id){
			return jq.each(function(){
				expand(this, id);
			});
		},
		toggle: function(jq, id){
			return jq.each(function(){
				toggle(this, id);
			});
		},
		collapseAll: function(jq, id){
			return jq.each(function(){
				collapseAll(this, id);
			});
		},
		expandAll: function(jq, id){
			return jq.each(function(){
				expandAll(this, id);
			});
		},
		expandTo: function(jq, id){
			return jq.each(function(){
				expandTo(this, id);
			});
		},
		append: function(jq, param){
			return jq.each(function(){
				append(this, param);
			});
		},
		insert: function(jq, param){
			return jq.each(function(){
				insert(this, param);
			});
		},
		remove: function(jq, id){
			return jq.each(function(){
				remove(this, id);
			});
		},
		pop: function(jq, id){
			var row = jq.treegrid('find', id);
			jq.treegrid('remove', id);
			return row;
		},
		refresh: function(jq, id){
			return jq.each(function(){
				var opts = $.data(this, 'treegrid').options;
				opts.view.refreshRow.call(opts.view, this, id);
			});
		},
		update: function(jq, param){
			return jq.each(function(){
				var opts = $.data(this, 'treegrid').options;
				opts.view.updateRow.call(opts.view, this, param.id, param.row);
			});
		},
		beginEdit: function(jq, id){
			return jq.each(function(){
				$(this).datagrid('beginEdit', id);
				$(this).treegrid('fixRowHeight', id);
			});
		},
		endEdit: function(jq, id){
			return jq.each(function(){
				$(this).datagrid('endEdit', id);
			});
		},
		cancelEdit: function(jq, id){
			return jq.each(function(){
				$(this).datagrid('cancelEdit', id);
			});
		}
	};
	
	$.fn.treegrid.parseOptions = function(target){
		return $.extend({}, $.fn.datagrid.parseOptions(target), $.parser.parseOptions(target,['treeField',{animate:'boolean'}]));
	};
	
	var defaultView = $.extend({}, $.fn.datagrid.defaults.view, {
		render: function(target, container, frozen){
			var opts = $.data(target, 'treegrid').options;
			var fields = $(target).datagrid('getColumnFields', frozen);
			var rowIdPrefix = $.data(target, 'datagrid').rowIdPrefix;
			
			if (frozen){
				if (!(opts.rownumbers || (opts.frozenColumns && opts.frozenColumns.length))){
					return;
				}
			}
			
			var index = 0;
			var view = this;
			var table = getTreeData(frozen, this.treeLevel, this.treeNodes);
			$(container).append(table.join(''));
			
			function getTreeData(frozen, depth, children){
				var table = ['<table class="datagrid-btable" cellspacing="0" cellpadding="0" border="0"><tbody>'];
				for(var i=0; i<children.length; i++){
					var row = children[i];
					if (row.state != 'open' && row.state != 'closed'){
						row.state = 'open';
					}
					var css = opts.rowStyler ? opts.rowStyler.call(target, row) : '';
					var classValue = '';
					var styleValue = '';
					if (typeof css == 'string'){
						styleValue = css;
					} else if (css){
						classValue = css['class'] || '';
						styleValue = css['style'] || '';
					}
					var cls = 'class="datagrid-row ' + (index++ % 2 && opts.striped ? 'datagrid-row-alt ' : ' ') + classValue + '"';
					var style = styleValue ? 'style="' + styleValue + '"' : '';
					
// var cls = (index++ % 2 && opts.striped) ? 'class="datagrid-row
// datagrid-row-alt"' : 'class="datagrid-row"';
// var styleValue = opts.rowStyler ? opts.rowStyler.call(target, row) : '';
// var style = styleValue ? 'style="' + styleValue + '"' : '';
					var rowId = rowIdPrefix + '-' + (frozen?1:2) + '-' + row[opts.idField];
					table.push('<tr id="' + rowId + '" node-id="' + row[opts.idField] + '" ' + cls + ' ' + style + '>');
					table = table.concat(view.renderRow.call(view, target, fields, frozen, depth, row));
					table.push('</tr>');
					
					if (row.children && row.children.length){
						var tt = getTreeData(frozen, depth+1, row.children);
						var v = row.state == 'closed' ? 'none' : 'block';
						
						table.push('<tr class="treegrid-tr-tree"><td style="border:0px" colspan=' + (fields.length + (opts.rownumbers?1:0)) + '><div style="display:' + v + '">');
						table = table.concat(tt);
						table.push('</div></td></tr>');
					}
				}
				table.push('</tbody></table>');
				return table;
			}
		},
		
		renderFooter: function(target, container, frozen){
			var opts = $.data(target, 'treegrid').options;
			var rows = $.data(target, 'treegrid').footer || [];
			var fields = $(target).datagrid('getColumnFields', frozen);
			
			var table = ['<table class="datagrid-ftable" cellspacing="0" cellpadding="0" border="0"><tbody>'];
			
			for(var i=0; i<rows.length; i++){
				var row = rows[i];
				row[opts.idField] = row[opts.idField] || ('foot-row-id'+i);
				
				table.push('<tr class="datagrid-row" node-id="' + row[opts.idField] + '">');
				table.push(this.renderRow.call(this, target, fields, frozen, 0, row));
				table.push('</tr>');
			}
			
			table.push('</tbody></table>');
			$(container).html(table.join(''));
		},
		
		
		renderRow: function(target, fields, frozen, depth, row){
			var opts = $.data(target, 'treegrid').options;
			
			var cc = [];
			if (frozen && opts.rownumbers){
				cc.push('<td class="datagrid-td-rownumber"><div class="datagrid-cell-rownumber">0</div></td>');
			}
			for(var i=0; i<fields.length; i++){
				var field = fields[i];
				var col = $(target).datagrid('getColumnOption', field);
				if (col){
					var css = col.styler ? (col.styler(row[field], row)||'') : '';
					var classValue = '';
					var styleValue = '';
					if (typeof css == 'string'){
						styleValue = css;
					} else if (cc){
						classValue = css['class'] || '';
						styleValue = css['style'] || '';
					}
					var cls = classValue ? 'class="' + classValue + '"' : '';
					var style = col.hidden ? 'style="display:none;' + styleValue + '"' : (styleValue ? 'style="' + styleValue + '"' : '');
					
					cc.push('<td field="' + field + '" ' + cls + ' ' + style + '>');
					
					if (col.checkbox){
						var style = '';
					} else {
						var style = styleValue;
						if (col.align){style += ';text-align:' + col.align + ';'}
						if (!opts.nowrap){
							style += ';white-space:normal;height:auto;word-break: break-all;';
						} else if (opts.autoRowHeight){
							style += ';height:auto;';
						}
					}
					
					cc.push('<div style="' + style + '" ');
					if (col.checkbox){
						cc.push('class="datagrid-cell-check ');
					} else {
						cc.push('class="datagrid-cell ' + col.cellClass);
					}
					cc.push('">');
					
					if (col.checkbox){
						if (row.checked){
							cc.push('<input type="checkbox" checked="checked"');
						} else {
							cc.push('<input type="checkbox"');
						}
						cc.push(' name="' + field + '" value="' + (row[field]!=undefined ? row[field] : '') + '"/>');
					} else {
						var val = null;
						if (col.formatter){
							val = col.formatter(row[field], row);
						} else {
							val = row[field];
// val = row[field] || '&nbsp;';
						}
						if (field == opts.treeField){
							for(var j=0; j<depth; j++){
								cc.push('<span class="tree-indent"></span>');
							}
							if (row.state == 'closed'){
								cc.push('<span class="tree-hit tree-collapsed"></span>');
								cc.push('<span class="tree-icon tree-folder ' + (row.iconCls?row.iconCls:'') + '"></span>');
							} else {
								if (row.children && row.children.length){
									cc.push('<span class="tree-hit tree-expanded"></span>');
									cc.push('<span class="tree-icon tree-folder tree-folder-open ' + (row.iconCls?row.iconCls:'') + '"></span>');
								} else {
									cc.push('<span class="tree-indent"></span>');
									cc.push('<span class="tree-icon tree-file ' + (row.iconCls?row.iconCls:'') + '"></span>');
								}
							}
							cc.push('<span class="tree-title">' + val + '</span>');
						} else {
							cc.push(val);
						}
					}
					
					cc.push('</div>');
					cc.push('</td>');
				}
			}
			return cc.join('');
		},
		
		refreshRow: function(target, id){
			this.updateRow.call(this, target, id, {});
		},
		
		updateRow: function(target, id, row){
			var opts = $.data(target, 'treegrid').options;
			var rowData = $(target).treegrid('find', id);
			$.extend(rowData, row);
			var depth = $(target).treegrid('getLevel', id) - 1;
			var styleValue = opts.rowStyler ? opts.rowStyler.call(target, rowData) : '';
			
			function _update(frozen){
				var fields = $(target).treegrid('getColumnFields', frozen);
				var tr = opts.finder.getTr(target, id, 'body', (frozen?1:2));
				var rownumber = tr.find('div.datagrid-cell-rownumber').html();
				var checked = tr.find('div.datagrid-cell-check input[type=checkbox]').is(':checked');
				tr.html(this.renderRow(target, fields, frozen, depth, rowData));
				tr.attr('style', styleValue || '');
				tr.find('div.datagrid-cell-rownumber').html(rownumber);
				if (checked){
					tr.find('div.datagrid-cell-check input[type=checkbox]')._propAttr('checked', true);
				}
			}
			
			_update.call(this, true);
			_update.call(this, false);
			$(target).treegrid('fixRowHeight', id);
		},
		
		onBeforeRender: function(target, parentId, data){
			if ($.isArray(parentId)){
				data = {total:parentId.length, rows:parentId};
				parentId = null;
			}
			if (!data) return false;
			
			var state = $.data(target, 'treegrid');
			var opts = state.options;
			if (data.length == undefined){
				if (data.footer){
					state.footer = data.footer;
				}
				if (data.total){
					state.total = data.total;
				}
				data = this.transfer(target, parentId, data.rows);
			} else {
				function setParent(children, parentId){
					for(var i=0; i<children.length; i++){
						var row = children[i];
						row._parentId = parentId;
						if (row.children && row.children.length){
							setParent(row.children, row[opts.idField]);
						}
					}
				}
				setParent(data, parentId);
			}
			
			var node = find(target, parentId);
			if (node){
				if (node.children){
					node.children = node.children.concat(data);
				} else {
					node.children = data;
				}
			} else {
				state.data = state.data.concat(data);
			}
			
			this.sort(target, data);
			this.treeNodes = data;
			this.treeLevel = $(target).treegrid('getLevel', parentId);
		},
		
		sort: function(target, data){
			var opts = $.data(target, 'treegrid').options;
			if (!opts.remoteSort && opts.sortName){
				var names = opts.sortName.split(',');
				var orders = opts.sortOrder.split(',');
				_sort(data);
			}
			function _sort(rows){
				rows.sort(function(r1,r2){
					var r = 0;
					for(var i=0; i<names.length; i++){
						var sn = names[i];
						var so = orders[i];
						var col = $(target).treegrid('getColumnOption', sn);
						var sortFunc = col.sorter || function(a,b){
							return a==b ? 0 : (a>b?1:-1);
						};
						r = sortFunc(r1[sn], r2[sn]) * (so=='asc'?1:-1);
						if (r != 0){
							return r;
						}
					}
					return r;
				});
				for(var i=0; i<rows.length; i++){
					var children = rows[i].children;
					if (children && children.length){
						_sort(children);
					}
				}
			}
		},
		
		transfer: function(target, parentId, data){
			var opts = $.data(target, 'treegrid').options;
			
			// clone the original data rows
			var rows = [];
			for(var i=0; i<data.length; i++){
				rows.push(data[i]);
			}
			
			var nodes = [];
			// get the top level nodes
			for(var i=0; i<rows.length; i++){
				var row = rows[i];
				if (!parentId){
					if (!row._parentId){
						nodes.push(row);
// removeArrayItem(rows,row);
						rows.splice(i, 1);
						i--;
					}
				} else {
					if (row._parentId == parentId){
						nodes.push(row);
// removeArrayItem(rows,row);
						rows.splice(i, 1);
						i--;
					}
				}
			}
			
			var toDo = [];
			for(var i=0; i<nodes.length; i++){
				toDo.push(nodes[i]);
			}
			while(toDo.length){
				var node = toDo.shift();	// the parent node
				// get the children nodes
				for(var i=0; i<rows.length; i++){
					var row = rows[i];
					if (row._parentId == node[opts.idField]){
						if (node.children){
							node.children.push(row);
						} else {
							node.children = [row];
						}
						toDo.push(row);
// removeArrayItem(rows,row);
						rows.splice(i, 1);
						i--;
					}
				}
			}
			return nodes;
		}
	});
	
	$.fn.treegrid.defaults = $.extend({}, $.fn.datagrid.defaults, {
		treeField:null,
		animate: false,
		singleSelect: true,
		view: defaultView,
		loader: function(param, success, error){
			var opts = $(this).treegrid('options');
			if (!opts.url) return false;
			$.ajax({
				type: opts.method,
				url: opts.url,
				data: param,
				dataType: 'json',
				success: function(data){
					success(data);
				},
				error: function(){
					error.apply(this, arguments);
				}
			});
		},
		loadFilter: function(data, parentId){
			return data;
		},
		finder:{
			getTr:function(target, id, type, serno){
				type = type || 'body';
				serno = serno || 0;
				var dc = $.data(target, 'datagrid').dc;	// data container
				if (serno == 0){
					var opts = $.data(target, 'treegrid').options;
					var tr1 = opts.finder.getTr(target, id, type, 1);
					var tr2 = opts.finder.getTr(target, id, type, 2);
					return tr1.add(tr2);
				} else {
					if (type == 'body'){
						var tr = $('#' + $.data(target, 'datagrid').rowIdPrefix + '-' + serno + '-' + id);
						if (!tr.length){
							tr = (serno==1?dc.body1:dc.body2).find('tr[node-id="'+id+'"]');
						}
						return tr;
					} else if (type == 'footer'){
						return (serno==1?dc.footer1:dc.footer2).find('tr[node-id="'+id+'"]');
					} else if (type == 'selected'){
						return (serno==1?dc.body1:dc.body2).find('tr.datagrid-row-selected');
					} else if (type == 'highlight'){
						return (serno==1?dc.body1:dc.body2).find('tr.datagrid-row-over');
					} else if (type == 'checked'){
						return (serno==1?dc.body1:dc.body2).find('tr.datagrid-row:has(div.datagrid-cell-check input:checked)');
					} else if (type == 'last'){
						return (serno==1?dc.body1:dc.body2).find('tr:last[node-id]');
					} else if (type == 'allbody'){
						return (serno==1?dc.body1:dc.body2).find('tr[node-id]');
					} else if (type == 'allfooter'){
						return (serno==1?dc.footer1:dc.footer2).find('tr[node-id]');
					}
				}
			},
			getRow:function(target, p){	// p can be the row id or tr object
				var id = (typeof p == 'object') ? p.attr('node-id') : p;
				return $(target).treegrid('find', id);
			}
		},
		
		onBeforeLoad: function(row, param){},
		onLoadSuccess: function(row, data){},
		onLoadError: function(){},
		onBeforeCollapse: function(row){},
		onCollapse: function(row){},
		onBeforeExpand: function(row){},
		onExpand: function(row){},
		onClickRow: function(row){},
		onDblClickRow: function(row){},
		onClickCell: function(field, row){},
		onDblClickCell: function(field, row){},
		onContextMenu: function(e, row){},
		onBeforeEdit: function(row){},
		onAfterEdit: function(row, changes){},
		onCancelEdit: function(row){}
	});
})(jQuery);
/**
 * combo - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php
 * 
 * Dependencies: panel validatebox
 * 
 */
(function($){
	function setSize(target, width){
		var state = $.data(target, 'combo');
		var opts = state.options;
		var combo = state.combo;
		var panel = state.panel;

		if (width){opts.width = width;}
		if (isNaN(opts.width)){
			var c = $(target).clone();
			c.css('visibility','hidden');
			c.appendTo('body');
			opts.width = c.outerWidth();
			c.remove();
		}
		
		combo.appendTo('body');
		
		var input = combo.find('input.combo-text');
		var arrow = combo.find('.combo-arrow');
		var arrowWidth = opts.hasDownArrow ? arrow._outerWidth() : 0;
		
		combo._outerWidth(opts.width)._outerHeight(opts.height);
		input._outerWidth(combo.width() - arrowWidth);
		input.css({
			height: combo.height()+'px',
			lineHeight: combo.height()+'px'
		});
		arrow._outerHeight(combo.height());
		
		panel.panel('resize', {
			width: (opts.panelWidth ? opts.panelWidth : combo.outerWidth()),
			height: opts.panelHeight
		});
		
		combo.insertAfter(target);
	}
	
	/**
	 * create the combo component.
	 */
	function init(target){
		$(target).addClass('combo-f').hide();
		var span = $(
				'<span class="combo">' +
				'<input type="text" class="combo-text" autocomplete="off">' +
				'<span><span class="combo-arrow"></span></span>' +
				'<input type="hidden" class="combo-value">' +
				'</span>'
				).insertAfter(target);
		
// var span = $('<span class="combo"></span>').insertAfter(target);
// var input = $('<input type="text" class="combo-text">').appendTo(span);
// $('<span><span class="combo-arrow"></span></span>').appendTo(span);
// $('<input type="hidden" class="combo-value">').appendTo(span);
		var panel = $('<div class="combo-panel"></div>').appendTo('body');
		panel.panel({
			doSize:false,
			closed:true,
			cls:'combo-p',
			style:{
				position:'absolute',
				zIndex:10
			},
			onOpen:function(){
				$(this).panel('resize');
			},
			onClose:function(){
				var state = $.data(target, 'combo');
				if (state){
					state.options.onHidePanel.call(target);
				}
			}
		});
		
		var name = $(target).attr('name');
		if (name){
			span.find('input.combo-value').attr('name', name);
			$(target).removeAttr('name').attr('comboName', name);
		}
// input.attr('autocomplete', 'off');
		
		return {
			combo: span,
			panel: panel
		};
	}
	
	function buildCombo(target){
		var state = $.data(target, 'combo');
		var opts = state.options;
		var combo = state.combo;
		if (opts.hasDownArrow){
			combo.find('.combo-arrow').show();
		} else {
			combo.find('.combo-arrow').hide();
		}
		setDisabled(target, opts.disabled);
		setReadonly(target, opts.readonly);
	}
	
	function destroy(target){
		var state = $.data(target, 'combo');
		var input = state.combo.find('input.combo-text');
		input.validatebox('destroy');
		state.panel.panel('destroy');
		state.combo.remove();
		$(target).remove();
	}
	
	function bindEvents(target){
		var state = $.data(target, 'combo');
		var opts = state.options;
		var panel = state.panel;
		var combo = state.combo;
		var input = combo.find('.combo-text');
		var arrow = combo.find('.combo-arrow');
		
		$(document).unbind('.combo').bind('mousedown.combo', function(e){
			var p = $(e.target).closest('span.combo,div.combo-panel');
			if (p.length){return;}
			$('body>div.combo-p>div.combo-panel:visible').panel('close');
		});
		
// combo.unbind('.combo');
// panel.unbind('.combo');
		input.unbind('.combo');
		arrow.unbind('.combo');
		
		if (!opts.disabled && !opts.readonly){
			input.bind('mousedown.combo', function(e){
				var p = $(this).closest('div.combo-panel');	// the parent combo
															// panel
				$('div.combo-panel').not(panel).not(p).panel('close');
				e.stopPropagation();
			}).bind('keydown.combo', function(e){
				switch(e.keyCode){
					case 38:	// up
						opts.keyHandler.up.call(target);
						break;
					case 40:	// down
						opts.keyHandler.down.call(target);
						break;
					case 37:	// left
						opts.keyHandler.left.call(target);
						break;
					case 39:	// right
						opts.keyHandler.right.call(target);
						break;
					case 13:	// enter
						e.preventDefault();
						opts.keyHandler.enter.call(target);
						return false;
					case 9:		// tab
					case 27:	// esc
						hidePanel(target);
						break;
					default:
						if (opts.editable){
							if (state.timer){
								clearTimeout(state.timer);
							}
							state.timer = setTimeout(function(){
								var q = input.val();
								if (state.previousValue != q){
									state.previousValue = q;
									$(target).combo('showPanel');
									opts.keyHandler.query.call(target, input.val());
									$(target).combo('validate');
								}
							}, opts.delay);
						}
				}
			});
			
			arrow.bind('click.combo', function(){
				if (panel.is(':visible')){
					hidePanel(target);
				} else {
					var p = $(this).closest('div.combo-panel');	// the parent
																// combo panel
					$('div.combo-panel:visible').not(p).panel('close');
					$(target).combo('showPanel');
				}
				input.focus();
			}).bind('mouseenter.combo', function(){
				$(this).addClass('combo-arrow-hover');
			}).bind('mouseleave.combo', function(){
				$(this).removeClass('combo-arrow-hover');
			});
		}
	}
	
	/**
	 * show the drop down panel.
	 */
	function showPanel(target){
		var opts = $.data(target, 'combo').options;
		var combo = $.data(target, 'combo').combo;
		var panel = $.data(target, 'combo').panel;
		/* wangkun 修改2014-09-23 采用事件创建 */
		if(opts.dynamicpanel!=null&&opts.auto==false){
		    panel=opts.dynamicpanel.call();	
            $(target).combo('panel',panel);	
        	$(target).combo('dynamicpanel',null);
		}
		
		if ($.fn.window){
			if(panel.is('ul')){
				panel  = panel.parent();
			}
			panel.panel('panel').css('z-index', $.fn.window.defaults.zIndex++);
		}
		
		panel.panel('move', {
			left:combo.offset().left,
			top:getTop()
		});
		if (panel.panel('options').closed){
			if(opts.percentWidth){
				panel.panel('resize',{
					width:(opts.panelWidth ? opts.panelWidth : combo.outerWidth())
				});
			}
			panel.panel('open');
			opts.onShowPanel.call(target);
		}
		
		(function(){
			if (panel.is(':visible')){
				panel.panel('move', {
					left:getLeft(),
					top:getTop()
				});
				setTimeout(arguments.callee, 200);
			}
		})();
		
		function getLeft(){
			var left = combo.offset().left;
			if (left + panel._outerWidth() > $(window)._outerWidth() + $(document).scrollLeft()){
				left = $(window)._outerWidth() + $(document).scrollLeft() - panel._outerWidth();
			}
			if (left < 0){
				left = 0;
			}
			return left;
		}
		function getTop(){
			var top = combo.offset().top + combo._outerHeight();
			if (top + panel._outerHeight() > $(window)._outerHeight() + $(document).scrollTop()){
				top = combo.offset().top - panel._outerHeight();
			}
			if (top < $(document).scrollTop()){
				top = combo.offset().top + combo._outerHeight();
			}
			return top;
		}
	}
	
	/**
	 * hide the drop down panel.
	 */
	function hidePanel(target){
// var opts = $.data(target, 'combo').options;
		var panel = $.data(target, 'combo').panel;
		panel.panel('close');
// opts.onHidePanel.call(target);
	}
	
	function validate(target){
		var opts = $.data(target, 'combo').options;
		var input = $(target).combo('textbox');
		input.validatebox($.extend({}, opts, {
			deltaX: (opts.hasDownArrow ? opts.deltaX : (opts.deltaX>0?1:-1))
		}));
	}
	
	function setDisabled(target, disabled){
		var state = $.data(target, 'combo');
		var opts = state.options;
		var combo = state.combo;
		if (disabled){
			opts.disabled = true;
			$(target).attr('disabled', true);
			combo.find('.combo-value').attr('disabled', true);
			combo.find('.combo-text').attr('disabled', true);
		} else {
			opts.disabled = false;
			$(target).removeAttr('disabled');
			combo.find('.combo-value').removeAttr('disabled');
			combo.find('.combo-text').removeAttr('disabled');
		}
	}
	
	function setReadonly(target, mode){
		var state = $.data(target, 'combo');
		var opts = state.options;
		opts.readonly = mode==undefined ? true : mode;
		state.combo.find('.combo-text').attr('readonly', opts.readonly ? true : (!opts.editable));
	}
	
	function clear(target){
		var state = $.data(target, 'combo');
		var opts = state.options;
		var combo = state.combo;
		if (opts.multiple){
			combo.find('input.combo-value').remove();
		} else {
			combo.find('input.combo-value').val('');
		}
		combo.find('input.combo-text').val('');
	}
	function setDynamicpanel(target, callback){
	    var state = $.data(target, 'combo');
		var opts = state.options;
	    opts.dynamicpanel=callback;
	}
	
	function getText(target){
		var combo = $.data(target, 'combo').combo;
		return combo.find('input.combo-text').val();
	}
	
	function setText(target, text){
		var state = $.data(target, 'combo');
		var input = state.combo.find('input.combo-text');
		if (input.val() != text){
			input.val(text);
			$(target).combo('validate');
			state.previousValue = text;
		}
	}
	
	function getValues(target){
		var values = [];
		var combo = $.data(target, 'combo').combo;
		combo.find('input.combo-value').each(function(){
			values.push($(this).val());
		});
		return values;
	}
	
	function setValues(target, values){
		var opts = $.data(target, 'combo').options;
		var oldValues = getValues(target);
		
		var combo = $.data(target, 'combo').combo;
		combo.find('input.combo-value').remove();
		var name = $(target).attr('comboName');
		for(var i=0; i<values.length; i++){
			var input = $('<input type="hidden" class="combo-value">').appendTo(combo);
			if (name) input.attr('name', name);
			input.val(values[i]);
		}
		
		var tmp = [];
		for(var i=0; i<oldValues.length; i++){
			tmp[i] = oldValues[i];
		}
		var aa = [];
		for(var i=0; i<values.length; i++){
			for(var j=0; j<tmp.length; j++){
				if (values[i] == tmp[j]){
					aa.push(values[i]);
					tmp.splice(j, 1);
					break;
				}
			}
		}
		
		if (aa.length != values.length || values.length != oldValues.length){
			if (opts.multiple){
				opts.onChange.call(target, values, oldValues);
			} else {
				opts.onChange.call(target, values[0], oldValues[0]);
			}
		}
	}
	
	function getValue(target){
		var values = getValues(target);
		return values[0];
	}
	
	function setValue(target, value){
		setValues(target, [value]);
	}
	
	/**
	 * set the initialized value
	 */
	function initValue(target){
		var opts = $.data(target, 'combo').options;
		var fn = opts.onChange;
		opts.onChange = function(){};
		if (opts.multiple){
			if (opts.value){
				if (typeof opts.value == 'object'){
					setValues(target, opts.value);
				} else {
					setValue(target, opts.value);
				}
			} else {
				setValues(target, []);
			}
			opts.originalValue = getValues(target);
		} else {
			setValue(target, opts.value);	// set initialize value
			opts.originalValue = opts.value;
		}
		opts.onChange = fn;
	}
	
	$.fn.combo = function(options, param){
		if (typeof options == 'string'){
// return $.fn.combo.methods[options](this, param);
			var method = $.fn.combo.methods[options];
			if (method){
				return method(this, param);
			} else {
				return this.each(function(){
					var input = $(this).combo('textbox');
					input.validatebox(options, param);
				});
			}
		}
		
		options = options || {};
		return this.each(function(){
			var state = $.data(this, 'combo');
			if (state){
				$.extend(state.options, options);
			} else {
				var r = init(this);
				state = $.data(this, 'combo', {
					options: $.extend({}, $.fn.combo.defaults, $.fn.combo.parseOptions(this), options),
					combo: r.combo,
					panel: r.panel,
					previousValue: null
				});
				$(this).removeAttr('disabled');
			}
			buildCombo(this);
			
// $('input.combo-text', state.combo).attr('readonly', !state.options.editable);
// setDownArrow(this);
// setDisabled(this, state.options.disabled);
			
			setSize(this);
			bindEvents(this);
			validate(this);
			initValue(this);
		});
	};
	
	$.fn.combo.methods = {
		options: function(jq){
			return $.data(jq[0], 'combo').options;
		},
	   dynamicpanel: function(jq,callback){
				return jq.each(function(){
					setDynamicpanel(this, callback);
				});
			},	
		panel: function(jq){
			return $.data(jq[0], 'combo').panel;
		},
		textbox: function(jq){
			return $.data(jq[0], 'combo').combo.find('input.combo-text');
		},
		destroy: function(jq){
			return jq.each(function(){
				destroy(this);
			});
		},
		resize: function(jq, width){
			return jq.each(function(){
				setSize(this, width);
			});
		},
		showPanel: function(jq){
			return jq.each(function(){
				showPanel(this);
			});
		},
		hidePanel: function(jq){
			return jq.each(function(){
				hidePanel(this);
			});
		},
		disable: function(jq){
			return jq.each(function(){
				setDisabled(this, true);
				bindEvents(this);
			});
		},
		enable: function(jq){
			return jq.each(function(){
				setDisabled(this, false);
				bindEvents(this);
			});
		},
		readonly: function(jq, mode){
			return jq.each(function(){
				setReadonly(this, mode);
				bindEvents(this);
			});
		},
// validate: function(jq){
// return jq.each(function(){
// $(this).combo('textbox').validatebox('validate');
// });
// },
// isValid: function(jq){
// var input = $.data(jq[0], 'combo').combo.find('input.combo-text');
// return input.validatebox('isValid');
// },
		clear: function(jq){
			return jq.each(function(){
				clear(this);
			});
		},
		reset: function(jq){
			return jq.each(function(){
				var opts = $.data(this, 'combo').options;
				if (opts.multiple){
					$(this).combo('setValues', opts.originalValue);
				} else {
					$(this).combo('setValue', opts.originalValue);
				}
			});
		},
		getText: function(jq){
			return getText(jq[0]);
		},
		setText: function(jq, text){
			return jq.each(function(){
				setText(this, text);
			});
		},
		getValues: function(jq){
			return getValues(jq[0]);
		},
		setValues: function(jq, values){
			return jq.each(function(){
				setValues(this, values);
			});
		},
		getValue: function(jq){
			return getValue(jq[0]);
		},
		setValue: function(jq, value){
			return jq.each(function(){
				setValue(this, value);
			});
		}
	};
	
	$.fn.combo.parseOptions = function(target){
		var t = $(target);
		var opts =  $.extend({}, $.fn.validatebox.parseOptions(target), $.parser.parseOptions(target, [
			'separator','height',
			{panelWidth:'number',editable:'boolean',hasDownArrow:'boolean',delay:'number',selectOnNavigation:'boolean'}
		]), {
			panelHeight: (t.attr('panelHeight')=='auto' ? 'auto' : parseInt(t.attr('panelHeight')) || undefined),
			multiple: (t.attr('multiple') ? true : undefined),
			disabled: (t.attr('disabled') ? true : undefined),
			readonly: (t.attr('readonly') ? true : undefined),
			value: (t.val() || undefined)
		});
		//2015-5-27 冯超 设置下拉组件宽度可为百分比
			var s = target.style['width'];
			if(s){
				if(s.indexOf('%')!=-1){
					opts['width'] = $(target).width();
					opts.percentWidth = s;//如果使用百分比，则设置percentWidth属性为对应的百分比
				}else{
					opts['width'] = parseInt(s)||153;
					opts.percentWidth = null;
				}
		}
		return opts;
	};
	
	//处理百分比宽度
	$.fn.combo.setPercentWidth = function(target,options){
		if(options.width){
			var width = options.width;
			var combo =  $.data(target, 'combo').combo;
			if(width.toString().indexOf('%')!=-1){
				combo.hide();
				var _this = $(target);
				_this.css('width',width);
				options.width = _this.show().width();
				_this.hide();
				combo.show();
				options.percentWidth = width;
			}else{
				options.percentWidth = null;
			}
		}
		return options;
	};
	
	// Inherited from $.fn.validatebox.defaults
	$.fn.combo.defaults = $.extend({}, $.fn.validatebox.defaults, {
		width: 'auto',
		height:'auto',/* update:2014.3.23; 22 update :auto */
		panelWidth: null,
		panelHeight: 200,
		auto:false,
		multiple: false,
		selectOnNavigation: true,
		separator: ',',
		editable: true,
		disabled: false,
		readonly: false,
		hasDownArrow: true,
		dynamicpanel:null,
		value: '',
		delay: 200,	// delay to do searching from the last key input event.
		deltaX: 19,
		keyHandler: {
			up: function(){},
			down: function(){},
			left: function(){},
			right: function(){},
			enter: function(){},
			query: function(q){}
		},
		
		onShowPanel: function(){},
		onHidePanel: function(){},
		onChange: function(newValue, oldValue){}
	});
})(jQuery);
/**
 * combobox - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php
 * 
 * Dependencies: combo
 * 
 */
(function($){
	function findDataItem(data,key,value){
		if(data){
			for(var i=0; i<data.length; i++){
				var item = data[i];
				if(value === '') return null;
				if(key === 'attributes.code'){
					if (item['attributes']['code'] && item['attributes']['code'] == value){return item}
				}else{
					if (item[key]!=='' && item[key] == value ){return item}
				}
			}
		}
		return null;
	}
	
	/**
	 * scroll panel to display the specified item
	 */
	function scrollTo(target, value){
		var panel = $(target).combo('panel');
		var item = panel.find('div.combobox-item[value="' + value + '"]');
		if (item.length){
			if (item.position().top <= 0){
				var h = panel.scrollTop() + item.position().top;
				panel.scrollTop(h);
			} else if (item.position().top + item.outerHeight() > panel.height()){
				var h = panel.scrollTop() + item.position().top + item.outerHeight() - panel.height();
				panel.scrollTop(h);
			}
		}
	}
	
	function nav(target, dir){
		var opts = $(target).combobox('options');
		var panel = $(target).combobox('panel');
		var item = panel.children('div.combobox-item-hover');
		if (!item.length){
			item = panel.children('div.combobox-item-selected');
		}
		item.removeClass('combobox-item-hover');
		if (!item.length){
			item = panel.children('div.combobox-item:visible:' + (dir=='next'?'first':'last'));
		} else {
			if (dir == 'next'){
				item = item.nextAll('div.combobox-item:visible:first');
				if (!item.length){
					item = panel.children('div.combobox-item:visible:first');
				}
			} else {
				item = item.prevAll('div.combobox-item:visible:first');
				if (!item.length){
					item = panel.children('div.combobox-item:visible:last');
				}
			}
		}
		if (item.length){
			item.addClass('combobox-item-hover');
			scrollTo(target, item.attr('value'));
			if (opts.selectOnNavigation){
				select(target, item.attr('value'));
			}
		}
	}
	
	/**
	 * select the specified value
	 */
	function select(target, value){
		var opts = $.data(target, 'combobox').options;
		var data = $.data(target, 'combobox').data;
	
		if(opts.lookupcode){
			data = $.data(target, 'combobox').allData;
		}
		var item;
		if (opts.multiple){
			var values = $(target).combo('getValues');
			for(var i=0; i<values.length; i++){
				if (values[i] == value) return;
			}
			values.push(value);
//			setValues(target, values);
		} else {
//			setValues(target, [value]);
		}
		 
		var item = findDataItem(data, opts.valueField, value);
		//冯超 2015-4-3，添加onBeforeSelect
		var beforeSelect = opts.onBeforeSelect.call(target,item);
		if(!beforeSelect&&beforeSelect!=undefined){
			return false;
		}
		if(opts.multiple){
			setValues(target, values);
		}else{
			setValues(target, [value]);
		}
		if (item){
			opts.onSelect.call(target, item);
		}
	}
	
	/**
	 * unselect the specified value
	 */
	function unselect(target, value){
		var state = $.data(target, 'combobox');
		var opts = state.options;
		var values = $(target).combo('getValues');
// var index = values.indexOf(value+'');
		var index = $.inArray(value+'', values);
		if (index >= 0){
			values.splice(index, 1);
			setValues(target, values);
		}
		var data = state.data;
		if(opts.lookupcode){
			data = state.allData;
		}
		var item = findDataItem(data, opts.valueField, value);
		if (item){
			opts.onUnselect.call(target, item);
		}
	}
	
	/**
	 * set values
	 */
	function setValues(target, values, remainText){
		var opts = $.data(target, 'combobox').options;
		var data = $.data(target, 'combobox').data;
		var panel = $(target).combo('panel');
		if(opts.lookupcode){
			data = $.data(target, 'combobox').allData;
		}
		//combobox如果是多选，值是string则需要使用 opts.separator分隔   --2015.01.16
		if( typeof(values)=='string' && opts.multiple!=null && opts.separator!=null ){
			values =  values?values.split(opts.separator):[];
	    }else if(values == null){
	    	values = [];
	    }
		panel.find('div.combobox-item-selected').removeClass('combobox-item-selected');
		var vv = [], ss = [];
		for(var i=0; i<values.length; i++){
			var v = values[i];
			var s = v;
			var item = findDataItem(data, opts.valueField, v);
			if (item){
				s = item[opts.textField];
			}
			vv.push(v);
			ss.push(s);
			panel.find('div.combobox-item[value="' + v + '"]').addClass('combobox-item-selected');
		}
		
		$(target).combo('setValues', vv);
		if (!remainText){
			$(target).combo('setText', ss.join(opts.separator));
		}
	}
	
	/**
	 * load data, the old list items will be removed.
	 */
	function loadData(target, data, remainText){
		var state = $.data(target, 'combobox');
		var opts = state.options;
		state.data = opts.loadFilter.call(target, data);
		data = state.data;
		var selected = $(target).combobox('getValues');
		var dd = [];
		var group = undefined;
		
		if(!opts.lookupcode && !opts.required){
			var nullfield = {};
			nullfield[opts.textField] = '【空】';
			nullfield[opts.valueField] = '';
			data = $.merge([nullfield],data);
		}
		state.data = data;
	 
		for(var i=0; i<data.length; i++){
			var item = data[i];
			var v;
			if(opts.valueField === 'attributes.code'){
				v = item['attributes']['code'];
			}else{
				v = item[opts.valueField];
			}
			var s = item[opts.textField];
			var g = item[opts.groupField];
			
			if (g){
				if (group != g){
					group = g;
					dd.push('<div class="combobox-group" value="' + g + '">');
					dd.push(opts.groupFormatter ? opts.groupFormatter.call(target, g) : g);
					dd.push('</div>');
				}
			} else {
				group = undefined;
			}
			
			dd.push('<div class="combobox-item' + (g ? ' combobox-gitem' : '') + '" value="' + v + '"' + (g ? ' group="' + g + '"' : '') + '>');
			dd.push(opts.formatter ? opts.formatter.call(target, item) : s);
			dd.push('</div>');
			
			if (item['selected']){
				(function(){
					for(var i=0; i<selected.length; i++){
						if (v == selected[i]) return;
					}
					selected.push(v);
				})();
			}
		}
		$(target).combo('panel').html(dd.join(''));
		
		if (opts.multiple){
			setValues(target, selected, remainText);
		} else {
			if (selected.length){
				setValues(target, [selected[selected.length-1]], remainText);
			} else {
				setValues(target, [], remainText);
			}
		}
		
		opts.onLoadSuccess.call(target, data);
	}
	
	/**
	 * request remote data if the url property is setted.
	 */
	function request(target, url, param, remainText){
		var opts = $.data(target, 'combobox').options;
		if (url){
			opts.url = url;
		}
// if (!opts.url) return;
		param = param || {};
		
		if (opts.onBeforeLoad.call(target, param) == false) return;

		opts.loader.call(target, param, function(data){
			loadData(target, data, remainText);
		}, function(){
			opts.onLoadError.apply(this, arguments);
		});
	}
	
	/**
	 * do the query action
	 */
	function doQuery(target, q){
		var state = $.data(target, 'combobox');
		var opts = state.options;
		
		if (opts.multiple && !q){
			setValues(target, [], true);
		} else {
			setValues(target, [q], true);
		}
		
		if (opts.mode == 'remote'){
			request(target, null, {q:q}, true);
		} else {
			var panel = $(target).combo('panel');
			panel.find('div.combobox-item,div.combobox-group').hide();
			var data = state.data;
			var group = undefined;
			for(var i=0; i<data.length; i++){
				var item = data[i];
				if (opts.filter.call(target, q, item)){
					var v;
					if(opts.valueField === 'attributes.code'){
						v = item['attributes']['code'];
					}else{
						v = item[opts.valueField];
					}
					var s = item[opts.textField];
					var g = item[opts.groupField];
					var item = panel.find('div.combobox-item[value="' + v + '"]');
					item.show();
					if (s == q){
						setValues(target, [v], true);
						item.addClass('combobox-item-selected');
					}
					if (opts.groupField && group != g){
						panel.find('div.combobox-group[value="' + g + '"]').show();
						group = g;
					}
				}
			}
		}
	}
	
	function doEnter(target){
		var t = $(target);
		var panel = t.combobox('panel');
		var opts = t.combobox('options');
		var data = t.combobox('getData');
		var item = panel.children('div.combobox-item-hover');
		if (!item.length){
			item = panel.children('div.combobox-item-selected');
		}
		if (!item.length){return}
		if (opts.multiple){
			if (item.hasClass('combobox-item-selected')){
				t.combobox('unselect', item.attr('value'));
			} else {
				t.combobox('select', item.attr('value'));
			}
		} else {
			t.combobox('select', item.attr('value'));
			t.combobox('hidePanel');
		}
		var vv = [];
		var values = t.combobox('getValues');
		for(var i=0; i<values.length; i++){
			if (findDataItem(data, opts.valueField, values[i])){
				vv.push(values[i]);
			}
		}
		t.combobox('setValues', vv);
	}
	
	/**
	 * create the component
	 */
	function create(target){
		var opts = $.data(target, 'combobox').options;
		$(target).addClass('combobox-f');
		var comboOpts = $.extend({}, opts, {
			onShowPanel: function(){
				$(target).combo('panel').find('div.combobox-item').show();
				scrollTo(target, $(target).combobox('getValue'));
				opts.onShowPanel.call(target);
			}
		});
		
		$(target).combo(comboOpts);
		
		$(target).combo('panel').unbind().bind('mouseover', function(e){
			$(this).children('div.combobox-item-hover').removeClass('combobox-item-hover');
			$(e.target).closest('div.combobox-item').addClass('combobox-item-hover');
			e.stopPropagation();
		}).bind('mouseout', function(e){
			$(e.target).closest('div.combobox-item').removeClass('combobox-item-hover');
			e.stopPropagation();
		}).bind('click', function(e){
			var item = $(e.target).closest('div.combobox-item');
			if (!item.length){return}
			var value = item.attr('value');
			if (opts.multiple){
				if (item.hasClass('combobox-item-selected')){
					unselect(target, value);
				} else {
					select(target, value);
				}
			} else {
				select(target, value);
				$(target).combo('hidePanel');
			}
			e.stopPropagation();
		});
	}
	/**
	 * 获取字典值
	 */
	function createLookupCombo(lookupcode, target){
		var data = lookupUtils.getLookupEnable(lookupcode);
		var allData = lookupUtils.getLookup(lookupcode)
		var state = $.data(target, 'combobox');
		var opts = state.options;
		if(data && data.children){
			var wrapData = data.children;
			var wrapAllData = allData.children;
			if(!opts.required){
				wrapData = $.merge([{text:'【空】',attributes:{code: ''}}],data.children);
				wrapAllData = $.merge([{text:'【空】',attributes:{code: ''}}],allData.children);
			}
			//数据字典的valueField为attributes.code,所以，如果在加载数据时过滤wrapData的code，需要使用attributes.code进行过滤
			state.data =state.data = opts.loadFilter.call(target, wrapData);
			state.allData = wrapAllData;
			$.extend(state.options, {valueField: 'attributes.code', textField: 'text'});
			$.data(target, 'combobox', state);
		}
		loadData(target, state.data);
	}
	
	$.fn.combobox = function(options, param){
		if (typeof options == 'string'){
			var method = $.fn.combobox.methods[options];
			if (method){
				return method(this, param);
			} else {
				return this.combo(options, param);
			}
		}
		
		options = options || {};
		return this.each(function(){
			var state = $.data(this, 'combobox');
			if (state){
				//处理如果修改宽度为百分比的宽度时
				options = $.fn.combo.setPercentWidth(this,options);
				$.extend(state.options, options);
				create(this);
			} else {
				state = $.data(this, 'combobox', {
					options: $.extend({}, $.fn.combobox.defaults, $.fn.combobox.parseOptions(this), options),
					data: []
				});
				if(state.options.lookupcode){
					state.options.lookupType = state.options.lookupcode;
				}else{
					state.options.lookupcode = state.options.lookupType
				}
				create(this);
				var data = $.fn.combobox.parseData(this);
				if (data.length){
					loadData(this, data);
				}
			}
			
			
			if (state.options.data){
				loadData(this, state.options.data);
			}
			
			request(this);
			
			// 如果是数据字典
			if(state.options.lookupcode){
				createLookupCombo(state.options.lookupcode, this)
			}
		});
	};
	
	
	$.fn.combobox.methods = {
		options: function(jq){
			var copts = jq.combo('options');
			return $.extend($.data(jq[0], 'combobox').options, {
				originalValue: copts.originalValue,
				disabled: copts.disabled,
				readonly: copts.readonly
			});
		},
		getData: function(jq){
			return $.data(jq[0], 'combobox').data;
		},
		setValues: function(jq, values){
			return jq.each(function(){
				setValues(this, values);
			});
		},
		setValue: function(jq, value){
			return jq.each(function(){
				setValues(this, [value]);
			});
		},
		clear: function(jq){
			return jq.each(function(){
				$(this).combo('clear');
				var panel = $(this).combo('panel');
				panel.find('div.combobox-item-selected').removeClass('combobox-item-selected');
			});
		},
		reset: function(jq){
			return jq.each(function(){
				var opts = $(this).combobox('options');
				if (opts.multiple){
					$(this).combobox('setValues', opts.originalValue);
				} else {
					$(this).combobox('setValue', opts.originalValue);
				}
			});
		},
		loadData: function(jq, data){
			return jq.each(function(){
				loadData(this, data);
			});
		},
		reload: function(jq, url){
			return jq.each(function(){
				request(this, url);
			});
		},
		select: function(jq, value){
			return jq.each(function(){
				select(this, value);
			});
		},
		unselect: function(jq, value){
			return jq.each(function(){
				unselect(this, value);
			});
		}
	};
	
	$.fn.combobox.parseOptions = function(target){
		var t = $(target);
		return $.extend({}, $.fn.combo.parseOptions(target), $.parser.parseOptions(target,[
			'valueField','textField','groupField','mode','method','url','lookupcode','value'
		]));
	};
	
	$.fn.combobox.parseData = function(target){
		var data = [];
		var opts = $(target).combobox('options');
		$(target).children().each(function(){
			if (this.tagName.toLowerCase() == 'optgroup'){
				var group = $(this).attr('label');
				$(this).children().each(function(){
					_parseItem(this, group);
				});
			} else {
				_parseItem(this);
			}
		});
		return data;
		
		function _parseItem(el, group){
			var t = $(el);
			var item = {};
			item[opts.valueField] = t.attr('value')!=undefined ? t.attr('value') : t.html();
			item[opts.textField] = t.html();
			item['selected'] = t.is(':selected');
			if (group){
				opts.groupField = opts.groupField || 'group';
				item[opts.groupField] = group;
			}
			data.push(item);
		}
	};
	
	$.fn.combobox.defaults = $.extend({}, $.fn.combo.defaults, {
		valueField: 'value',
		textField: 'text',
		groupField: null,
		groupFormatter: function(group){return group;},
		mode: 'local',	// or 'remote'
		method: 'post',
		url: null,
		data: null,
		
		keyHandler: {
			up: function(){nav(this,'prev')},
			down: function(){nav(this,'next')},
			enter: function(){doEnter(this)},
			query: function(q){doQuery(this, q)},
			left:function(){},
			right:function(){}
		},
		filter: function(q, row){
			var opts = $(this).combobox('options');
			return row[opts.textField].indexOf(q) >= 0;
		},
		formatter: function(row){
			var opts = $(this).combobox('options');
			return row[opts.textField];
		},
		loader: function(param, success, error){
			var opts = $(this).combobox('options');
			if (!opts.url) return false;
			$.ajax({
				type: opts.method,
				url: opts.url,
				data: param,
				dataType: 'json',
				success: function(data){
					success(data);
				},
				error: function(){
					error.apply(this, arguments);
				}
			});
		},
		loadFilter: function(data){
			return data;
		},
		
		onBeforeLoad: function(param){},
		onLoadSuccess: function(){},
		onLoadError: function(){},
		onSelect: function(record){},
		onUnselect: function(record){},
		onBeforeSelect:function(record){}
	});
})(jQuery);
/**
 * combotree - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php
 * 
 * Dependencies: combo tree
 * 
 */
(function($){
	/**
	 * create the combotree component.
	 */
	function create(target){
		var opts = $.data(target, 'combotree').options;
		var tree = $.data(target, 'combotree').tree;
		$(target).addClass('combotree-f');
		$(target).combo(opts);
		var panel = $(target).combo('panel');
		if (!tree){
			tree = $('<ul></ul>').appendTo(panel);
			$.data(target, 'combotree').tree = tree;
		}
		
		var treeOpts = $.extend({}, opts, {
			checkbox: opts.multiple,
			onLoadSuccess: function(node, data){
				var values = $(target).combotree('getValues');
				if (opts.multiple){
					var nodes = tree.tree('getChecked');
					for(var i=0; i<nodes.length; i++){
						var id = nodes[i].id;
						(function(){
							for(var i=0; i<values.length; i++){
								if (id == values[i]) return;
							}
							values.push(id);
						})();
					}
				}
				$(target).combotree('setValues', values);
				opts.onLoadSuccess.call(this, node, data);
			},
			onClick: function(node){
				retrieveValues(target);
				$(target).combo('hidePanel');
				opts.onClick.call(this, node);
			},
			onCheck: function(node, checked){
				retrieveValues(target);
				opts.onCheck.call(this, node, checked);
			}
		})
		/**
		 * 如果是下拉字典树
		 */
		if(opts.lookupcode){
			createLookupTree(opts.lookupcode, target, treeOpts);
		}else{
			if(opts.auto){
				 tree.tree(treeOpts);
			}else{
				$(target).combo('dynamicpanel',createtree);
			}
		}
		
		function createtree(){
			return tree.tree(treeOpts);
		}
	}
	
	function createLookupTree(lookupcode, target, treeOpts){
		var tree = $.data(target, 'combotree').tree;
		var opts = $.data(target, 'combotree').options;
		var data = lookupUtils.getLookupEnable(lookupcode);
		var allData = lookupUtils.getLookup(lookupcode)
		if(data && data.children){
			$.extend(treeOpts, {data:data.children});
			$.extend(opts, {data:data.children, allData: allData.children});
			$.data(target, 'combotree').options = opts;
		}
		tree.tree(treeOpts);
	}
	
	/**
	 * retrieve values from tree panel.
	 */
	function retrieveValues(target){
		var opts = $.data(target, 'combotree').options;
		var tree = $.data(target, 'combotree').tree;
		var vv = [], ss = [];
		if (opts.multiple){
			var nodes = tree.tree('getChecked');
			for(var i=0; i<nodes.length; i++){
				// 添加树节点选择字段
				if(opts.lookupcode){
					vv.push(nodes[i].attributes.code);
					ss.push(nodes[i].text);
				}else{
					vv.push(opts.valueField || nodes[i].id);
					ss.push(opts.displayField || nodes[i].text);
				}
			}
		} else {
			var node = tree.tree('getSelected');
			if (node){
				if(opts.lookupcode){
					vv.push(node.attributes.code);
					ss.push(node.text);
				}else{
					vv.push(node.id);
					ss.push(node.text);
				}
			}
		}
		$(target).combo('setValues', vv).combo('setText', ss.join(opts.separator));
	}
	
	function findTreeNodeByParam(data, key, value){
		if(data){
			for(var i = 0; i<data.length; i++){
				if(data[i][key] === value || data[i].attributes[key] === value) return data[i];
				if(data[i].children)return findTreeNodeByParam(data[i].children, key, value);
			}
		}
		return null;
	}
	
	function setValues(target, values){
		var opts = $.data(target, 'combotree').options;
		var tree = $.data(target, 'combotree').tree;
		var comboOpts = $.data(target,'combo').options;
		//冯超 2014-10-17 初始化加载值时取消延迟加载
		if(!opts.auto&&comboOpts.dynamicpanel!=null){
			opts.auto = true;
			comboOpts.dynamicpanel.call();
			$(target).combo('dynamicpanel',null);
		}
		tree.find('span.tree-checkbox').addClass('tree-checkbox0').removeClass('tree-checkbox1 tree-checkbox2');
		var vv = [], ss = [];
		for(var i=0; i<values.length; i++){
			var v = values[i];
			var s = v;
			var node;
			
// var node = tree.tree('find', v) || node?tree.tree('find', node.id):null;
// //bug 2014-5-27 @sukui
			var node = tree.tree('find', v) || null;
			
			if (node){
				s = node.text;
				tree.tree('check', node.target);
				tree.tree('select', node.target);
			}
			if(opts.lookupcode){
				node = findTreeNodeByParam(opts.allData, 'code', v);
				if(node){
					vv.push(v);
					ss.push(node.text);
				}
			}else{
				vv.push(v);
				ss.push(s);
			}
		}
		$(target).combo('setValues', vv).combo('setText', ss.join(opts.separator));
	}
	
	$.fn.combotree = function(options, param){
		
		if (typeof options == 'string'){
			var method = $.fn.combotree.methods[options];
			if (method){
				return method(this, param);
			} else {
				return this.combo(options, param);
			}
		}
		
		options = options || {};
		return this.each(function(){
			var state = $.data(this, 'combotree');
			if (state){
				//处理如果修改宽度为百分比的宽度时
				options = $.fn.combo.setPercentWidth(this,options);
				$.extend(state.options, options);
			} else {
				state = $.data(this, 'combotree', {
					options: $.extend({}, $.fn.combotree.defaults, $.fn.combotree.parseOptions(this), options)
				});
			}
			
			if(state.options.lookupcode){
				state.options.lookupType = state.options.lookupcode;
			}else{
				state.options.lookupcode = state.options.lookupType
			}
		   
			create(this);
		});
	};
	
	
	$.fn.combotree.methods = {
		options: function(jq){
			var copts = jq.combo('options');
			return $.extend($.data(jq[0], 'combotree').options, {
				originalValue: copts.originalValue,
				disabled: copts.disabled,
				readonly: copts.readonly
			});
		},
		tree: function(jq){
			return $.data(jq[0], 'combotree').tree;
		},
		loadData: function(jq, data){
			return jq.each(function(){
				var opts = $.data(this, 'combotree').options;
				opts.data = data;
				var tree = $.data(this, 'combotree').tree;
				tree.tree('loadData', data);
			});
		},
		reload: function(jq, url){
			return jq.each(function(){
				var opts = $.data(this, 'combotree').options;
				var tree = $.data(this, 'combotree').tree;
				if (url) opts.url = url;
				tree.tree({url:opts.url});
			});
		},
		setValues: function(jq, values){
			return jq.each(function(){
				setValues(this, values);
			});
		},
		setValue: function(jq, value){
			return jq.each(function(){
				setValues(this, [value]);
			});
		},
		clear: function(jq){
			return jq.each(function(){
				var tree = $.data(this, 'combotree').tree;
				tree.find('div.tree-node-selected').removeClass('tree-node-selected');
				var cc = tree.tree('getChecked');
				for(var i=0; i<cc.length; i++){
					tree.tree('uncheck', cc[i].target);
				}
				$(this).combo('clear');
			});
		},
		reset: function(jq){
			return jq.each(function(){
				var opts = $(this).combotree('options');
				if (opts.multiple){
					$(this).combotree('setValues', opts.originalValue);
				} else {
					$(this).combotree('setValue', opts.originalValue);
				}
			});
		}
	};
	
	$.fn.combotree.parseOptions = function(target){
		return $.extend({}, $.fn.combo.parseOptions(target), $.fn.tree.parseOptions(target));
	};
	
	$.fn.combotree.defaults = $.extend({}, $.fn.combo.defaults, $.fn.tree.defaults, {
		editable: false
	});
})(jQuery);
/**
 * combogrid - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php
 * 
 * Dependencies: combo datagrid
 * 
 */
(function($){
	/**
	 * create this component.
	 */
	function create(target){
		var state = $.data(target, 'combogrid');
		var opts = state.options;
		var grid = state.grid;
		$(target).addClass('combogrid-f').combo(opts);
		var panel = $(target).combo('panel');
		
		
		if (!grid){
			grid = $('<table></table>').appendTo(panel);
			state.grid = grid;
		}
		grid.datagrid($.extend({}, opts, {
			border: false,
			fit: true,
			singleSelect: (!opts.multiple),
			onLoadSuccess: function(data){
				var values = $(target).combo('getValues');
				// prevent from firing onSelect event.
				var oldOnSelect = opts.onSelect;
				opts.onSelect = function(){};
				setValues(target, values, state.remainText);
				opts.onSelect = oldOnSelect;
				
				opts.onLoadSuccess.apply(target, arguments);
			},
			onClickRow: onClickRow,
			onSelect: function(index, row){retrieveValues(); opts.onSelect.call(this, index, row);},
			onUnselect: function(index, row){retrieveValues(); opts.onUnselect.call(this, index, row);},
			onSelectAll: function(rows){retrieveValues(); opts.onSelectAll.call(this, rows);},
			onUnselectAll: function(rows){
				if (opts.multiple) retrieveValues(); 
				opts.onUnselectAll.call(this, rows);
			}
		}));
		
		function onClickRow(index, row){
			state.remainText = false;
			retrieveValues();
			if (!opts.multiple){
				$(target).combo('hidePanel');
			}
			opts.onClickRow.call(this, index, row);
		}
		
		/**
		 * retrieve values from datagrid panel.
		 */
		function retrieveValues(){
			var rows = grid.datagrid('getSelections');
			var vv = [],ss = [];
			for(var i=0; i<rows.length; i++){
				vv.push(rows[i][opts.idField]);
				ss.push(rows[i][opts.textField]);
			}
			if (!opts.multiple){
				$(target).combo('setValues', (vv.length ? vv : ['']));
			} else {
				$(target).combo('setValues', vv);
			}
			// $(target).combo('setValues', vv);
			// if (!vv.length && !opts.multiple){
			// $(target).combo('setValues', ['']);
			// }	
			if (!state.remainText){
				$(target).combo('setText', ss.join(opts.separator));
			}
		}
	}
	
	function nav(target, dir){
		var state = $.data(target, 'combogrid');
		var opts = state.options;
		var grid = state.grid;
		var rowCount = grid.datagrid('getRows').length;
		if (!rowCount){return}
		
		var tr = opts.finder.getTr(grid[0], null, 'highlight');
		if (!tr.length){
			tr = opts.finder.getTr(grid[0], null, 'selected');;
		}
		var index;
		if (!tr.length){
			index = (dir == 'next' ? 0 : rowCount-1);
		} else {
			var index = parseInt(tr.attr('datagrid-row-index'));
			index += (dir == 'next' ? 1 : -1);
			if (index < 0) {index = rowCount - 1}
			if (index >= rowCount) {index = 0}
		}
		
		grid.datagrid('highlightRow', index);
		if (opts.selectOnNavigation){
			state.remainText = false;
			grid.datagrid('selectRow', index);
		}
	}
	
	/**
	 * set combogrid values
	 */
	function setValues(target, values, remainText){
		var state = $.data(target, 'combogrid');
		var opts = state.options;
		var grid = state.grid;
		var rows = grid.datagrid('getRows');
		var ss = [];
		
		var oldValues = $(target).combo('getValues');
		var cOpts = $(target).combo('options');
		var oldOnChange = cOpts.onChange;
		cOpts.onChange = function(){};	// prevent from triggering onChange
										// event
		
		grid.datagrid('clearSelections');
		for(var i=0; i<values.length; i++){
			var index = grid.datagrid('getRowIndex', values[i]);
			if (index >= 0){
				grid.datagrid('selectRow', index);
				ss.push(rows[index][opts.textField]);
			} else {
				ss.push(values[i]);
			}
		}
		$(target).combo('setValues', oldValues);
		cOpts.onChange = oldOnChange;	// restore to trigger onChange event
		
		$(target).combo('setValues', values);
		if (!remainText){
			var s = ss.join(opts.separator);
			if ($(target).combo('getText') != s){
				$(target).combo('setText', s);
			}
		}
		
// if ($(target).combo('getValues').join(',') == values.join(',')){
// return;
// }
// $(target).combo('setValues', values);
// if (!remainText){
// $(target).combo('setText', ss.join(opts.separator));
// }
	}
	
	/**
	 * do the query action
	 */
	function doQuery(target, q){
		var state = $.data(target, 'combogrid');
		var opts = state.options;
		var grid = state.grid;
		state.remainText = true;
		
		if (opts.multiple && !q){
			setValues(target, [], true);
		} else {
			setValues(target, [q], true);
		}
		
		if (opts.mode == 'remote'){
			grid.datagrid('clearSelections');
			grid.datagrid('load', $.extend({}, opts.queryParams, {q:q}));
		} else {
			if (!q) return;
			var rows = grid.datagrid('getRows');
			for(var i=0; i<rows.length; i++){
				if (opts.filter.call(target, q, rows[i])){
					grid.datagrid('clearSelections');
					grid.datagrid('selectRow', i);
					return;
				}
			}
		}
	}
	
	function doEnter(target){
		var state = $.data(target, 'combogrid');
		var opts = state.options;
		var grid = state.grid;
		var tr = opts.finder.getTr(grid[0], null, 'highlight');
		if (!tr.length){
			tr = opts.finder.getTr(grid[0], null, 'selected');
		}
		if (!tr.length){return}
		
		state.remainText = false;
		var index = parseInt(tr.attr('datagrid-row-index'));
		if (opts.multiple){
			if (tr.hasClass('datagrid-row-selected')){
				grid.datagrid('unselectRow', index);
			} else {
				grid.datagrid('selectRow', index);
			}
		} else {
			grid.datagrid('selectRow', index);
			$(target).combogrid('hidePanel');
		}
	}
	
	$.fn.combogrid = function(options, param){
		if (typeof options == 'string'){
			var method = $.fn.combogrid.methods[options];
			if (method){
				return method(this, param);
			} else {
				return $.fn.combo.methods[options](this, param);
			}
		}
		
		options = options || {};
		return this.each(function(){
			var state = $.data(this, 'combogrid');
			if (state){
				//处理如果修改宽度为百分比的宽度时
				options = $.fn.combo.setPercentWidth(this,options);
				$.extend(state.options, options);
			} else {
				state = $.data(this, 'combogrid', {
					options: $.extend({}, $.fn.combogrid.defaults, $.fn.combogrid.parseOptions(this), options)
				});
			}
			
			create(this);
		});
	};
	
	$.fn.combogrid.methods = {
		options: function(jq){
			var copts = jq.combo('options');
			return $.extend($.data(jq[0], 'combogrid').options, {
				originalValue: copts.originalValue,
				disabled: copts.disabled,
				readonly: copts.readonly
			});
		},
		// get the datagrid object.
		grid: function(jq){
			return $.data(jq[0], 'combogrid').grid;
		},
		setValues: function(jq, values){
			return jq.each(function(){
				setValues(this, values);
			});
		},
		setValue: function(jq, value){
			return jq.each(function(){
				setValues(this, [value]);
			});
		},
		clear: function(jq){
			return jq.each(function(){
				$(this).combogrid('grid').datagrid('clearSelections');
				$(this).combo('clear');
			});
		},
		reset: function(jq){
			return jq.each(function(){
				var opts = $(this).combogrid('options');
				if (opts.multiple){
					$(this).combogrid('setValues', opts.originalValue);
				} else {
					$(this).combogrid('setValue', opts.originalValue);
				}
			});
		}
	};
	
	$.fn.combogrid.parseOptions = function(target){
		var t = $(target);
		return $.extend({}, $.fn.combo.parseOptions(target), $.fn.datagrid.parseOptions(target), 
				$.parser.parseOptions(target, ['idField','textField','mode']));
	};
	
	$.fn.combogrid.defaults = $.extend({}, $.fn.combo.defaults, $.fn.datagrid.defaults, {
		loadMsg: null,
		idField: null,
		textField: null,	// the text field to display.
		mode: 'local',	// or 'remote'
		
		keyHandler: {
			up: function(){nav(this, 'prev');},
			down: function(){nav(this, 'next');},
			enter: function(){doEnter(this);},
			query: function(q){doQuery(this, q);}
		},
		filter: function(q, row){
			var opts = $(this).combogrid('options');
			return row[opts.textField].indexOf(q) == 0;
		}
	});
})(jQuery);
/**
 * datebox - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php
 * 
 * Dependencies: calendar combo
 * 
 */
(function($){
	/**
	 * create date box
	 */
	function createBox(target){
		var state = $.data(target, 'datebox');
		var opts = state.options;
		
		$(target).addClass('datebox-f').combo($.extend({}, opts, {
			onShowPanel:function(){
				setCalendarSize();
				opts.onShowPanel.call(target);
			}
		}));
		$(target).combo('textbox').parent().addClass('datebox');
		
	    if(opts.auto){	
	    	if (!state.calendar){
				createCalendar();
	    	}
	    }
	    else{
	    	$(target).combo('dynamicpanel',createNewCalendar);
	    }
	    // 设置默认值 start 2014.12.22
	    if(target.value){
	    	setValue(target, target.value);
	    }
	    ///end
		/**
		 * if the calendar isn't created, create it.
		 */
	
		if(opts.format){
			opts.formatter = function(date){
				if(date && $.type(date) === "date"){
					var text ;
					try{
						text =  date.Format(opts.format);
					}catch(err){
						text = '';
					}
					return text;
				}else{
					return '';
				}
			}
		}
		function createCalendar(){
			var panel = $(target).combo('panel');
			state.calendar = $('<div></div>').appendTo(panel).wrap('<div class="datebox-calendar-inner"></div>');
			state.calendar.calendar({
				fit:true,
				border:false,
				startDay:opts.startDay||new Date(1900,0,1),
				endDay:opts.endDay||new Date(2100,0,1),
				onSelect:function(date){
					var value = opts.formatter(date);
					setValue(target, value);
					$(target).combo('hidePanel');
					opts.onSelect.call(target, date);
				}
			});
			
			
			setValue(target, opts.value);
			
			var button = $('<div class="datebox-button"></div>').appendTo(panel);
			var current_btn = $('<a href="javascript:void(0)" class="datebox-current"></a>').html(opts.currentText).appendTo(button);
			var close_btn = $('<a href="javascript:void(0)" class="datebox-close"></a>').html(opts.closeText).appendTo(button);
			var reset_btn = $('<a href="javascript:void(0)" class="datebox-reset"></a>').html(opts.resetText).appendTo(button);

			current_btn.click(function(){
// state.calendar.calendar({
// year:new Date().getFullYear(),
// month:new Date().getMonth()+1,
// current:new Date()
// });
				$(target).datebox('setValue', new Date());
				$(target).combo('hidePanel');
			});
			close_btn.click(function(){
				$(target).combo('hidePanel');
			});
			reset_btn.click(function(){
				$(target).datebox('setValue', '');
				$(target).combo('hidePanel');
			});
			/* 2014.09.23修改 wangkun */
			return panel;
		}
		
		
		function createNewCalendar(){
			var panel = $(target).combo('panel');
			state.calendar = $('<div></div>').appendTo(panel).wrap('<div class="datebox-calendar-inner"></div>');
			state.calendar.calendar({
				fit:true,
				border:false,
				startDay:opts.startDay||new Date(1900,0,1),
				endDay:opts.endDay||new Date(2100,0,1),
				onSelect:function(date){
					var value = opts.formatter(date);
					setValue(target, value);
					$(target).combo('hidePanel');
					opts.onSelect.call(target, date);
				}
			});
			
			

		    value=$(target).combo('getValue');
			value = value?opts.formatter(opts.parser(value)):'';
			$(target).combo('setValue', value).combo('setText', value);
			 state.calendar.calendar('moveTo', opts.parser(value));
			
			var button = $('<div class="datebox-button"></div>').appendTo(panel);
			var current_btn = $('<a href="javascript:void(0)" class="datebox-current"></a>').html(opts.currentText).appendTo(button);
			var close_btn = $('<a href="javascript:void(0)" class="datebox-close"></a>').html(opts.closeText).appendTo(button);
			var reset_btn = $('<a href="javascript:void(0)" class="datebox-reset"></a>').html(opts.resetText).appendTo(button);

			current_btn.click(function(){
// state.calendar.calendar({
// year:new Date().getFullYear(),
// month:new Date().getMonth()+1,
// current:new Date()
// });
				$(target).datebox('setValue', new Date());
				$(target).combo('hidePanel');
			});
			close_btn.click(function(){
				$(target).combo('hidePanel');
			});
			reset_btn.click(function(){
				$(target).datebox('setValue', '');
				$(target).combo('hidePanel');
			});
			/* 2014.09.23修改 wangkun */
			return panel;
		}
		
		function setCalendarSize(){
			if (opts.panelHeight != 'auto'){
				var panel = $(target).combo('panel');
				var ci = panel.children('div.datebox-calendar-inner');
				var height = panel.height();
				panel.children().not(ci).each(function(){
					height -= $(this).outerHeight();
				});
				ci._outerHeight(height);
			}
			state.calendar.calendar('resize');
		}
	}
	
	/**
	 * called when user inputs some value in text box
	 */
	function doQuery(target, q){
		setValue(target, q);
	}
	
	/**
	 * called when user press enter key
	 */
	function doEnter(target){
		var state = $.data(target, 'datebox');
		var opts = state.options;
		var c = state.calendar;
		var value = opts.formatter(c.calendar('options').current);
		setValue(target, value);
		$(target).combo('hidePanel');
	}
	
	function setValue(target, value){
		var state = $.data(target,'datetimebox')?$.data(target,'datetimebox'):$.data(target, 'datebox');
		var opts = state.options;
		
		value = value?opts.formatter(opts.parser(value)):'';
		$(target).combo('setValue', value).combo('setText', value);
		 
		/*
		 * 2014.9.24修改
		 */
	   if(opts.auto)
		   state.calendar.calendar('moveTo', opts.parser(value));
		   
	}
	
	$.fn.datebox = function(options, param){
		if (typeof options == 'string'){
			var method = $.fn.datebox.methods[options];
			if (method){
				return method(this, param);
			} else {
				return this.combo(options, param);
			}
		}
		
		options = options || {};
		return this.each(function(){
			var state = $.data(this, 'datebox');
			if (state){
				//处理如果修改宽度为百分比的宽度时
				options = $.fn.combo.setPercentWidth(this,options);
				$.extend(state.options, options);
			} else {
				$.data(this, 'datebox', {
					options: $.extend({}, $.fn.datebox.defaults, $.fn.datebox.parseOptions(this), options)
				});
			}
			createBox(this);
		});
	};
	
	$.fn.datebox.methods = {
		options: function(jq){
			var copts = jq.combo('options');
			return $.extend($.data(jq[0], 'datebox').options, {
				originalValue: copts.originalValue,
				disabled: copts.disabled,
				readonly: copts.readonly
			});
		},
		calendar: function(jq){	// get the calendar object
			return $.data(jq[0], 'datebox').calendar;
		},
		setValue: function(jq, value){
			return jq.each(function(){
				setValue(this, value);
			});
		},
		reset: function(jq){
			return jq.each(function(){
				var opts = $(this).datebox('options');
				$(this).datebox('setValue', opts.originalValue);
			});
		}
	};
	
	$.fn.datebox.parseOptions = function(target){
		var t = $(target);
		return $.extend({}, $.fn.combo.parseOptions(target), {
		});
	};
	
	$.fn.datebox.defaults = $.extend({}, $.fn.combo.defaults, {
		panelWidth:180,
		panelHeight:'auto',
		
		keyHandler: {
			up:function(){},
			down:function(){},
			enter:function(){doEnter(this);},
			query:function(q){doQuery(this, q);}
		},
		
		currentText:'Today',
		closeText:'Close',
		okText:'Ok',
		resetText:'reset',
		
		formatter:function(date){
			var y = date.getFullYear();
			var m = date.getMonth()+1;
			var d = date.getDate();
			return m+'/'+d+'/'+y;
		},
		
		parser:function(s){
			
			if($.isNumeric(s)) return new Date(parseInt(s));//2014-12-08冯超改，将s格式化为int类型
			var t = Date.parse(s);
			if (!isNaN(t)){
				return new Date(t);
			} else {
				return new Date();
			}
		},
		
		onSelect:function(date){}
	});
})(jQuery);
/**
 * datetimebox - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php
 * 
 * Dependencies: datebox timespinner
 * 
 */
(function($){
	function createBox(target){
		var state = $.data(target, 'datetimebox');
		var opts = state.options;
		var startDay = opts.stateDay||new Date(1900,0,0);
		var endDay = opts.endDay||new Date(2100,0,0);
		$(target).datebox($.extend({}, opts, {
			onShowPanel:function(){
				var value = $(target).datetimebox('getValue');
				setValue(target, value, true);
				opts.onShowPanel.call(target);
			},
			formatter: $.fn.datebox.defaults.formatter,
			parser: $.fn.datebox.defaults.parser
		}));
	
		$(target).removeClass('datebox-f').addClass('datetimebox-f');
		// 日期格式的格式化方法
		if(opts.format){
			opts.formatter = function(date){
				if(date && $.type(date) === "date"){
					var text ;
					try{
					 text =  date.Format(opts.format);
					}catch(err){
						text =  '';
					}
					return text;
				}
				return '';
			}
		}
		/*
		 * 2014.9.23修改，时间日期选择框加载
		 */
		// override the calendar onSelect event, don't close panel when selected
		if(opts.auto){
			createDatetime();
		}else{			
		
			$(target).combo('dynamicpanel',createAllDatetime);
		}
	    //设置默认值 start 2014.12.22
	    if(target.value){
	    	setValue(target, target.value);
	    }
	    //end
		function createDatetime(){
			 $(target).datebox('calendar').calendar({
				 	startDay:startDay||new Date(1900,0,1),
					endDay:endDay||new Date(2100,0,1),
					onSelect:function(date){
						opts.onSelect.call(target, date);
					}
				});
				var panel = $(target).datebox('panel');
				if (!state.spinner){
					var p = $('<div style="padding:2px"><input style="width:80px"></div>').insertAfter(panel.children('div.datebox-calendar-inner'));
					state.spinner = p.children('input');

					
					var button = panel.children('div.datebox-button');
					button.children('.datebox-reset').removeClass("datebox-reset").addClass("datebox-timereset");
					var ok = $('<a href="javascript:void(0)" class="datebox-ok"></a>').html(opts.okText).appendTo(button);
					ok.click(function(){
						doEnter(target);
					});
				}
				state.spinner.timespinner({
					showSeconds: opts.showSeconds,
					separator: opts.timeSeparator,
					min:opts.min||null,
					max:opt.max||null
				}).unbind('.datetimebox').bind('mousedown.datetimebox',function(e){
					e.stopPropagation();
				});
				setValue(target, opts.value);
		}
		
		
	function createAllDatetime(){
	    var newstate = $.data(target, 'datebox');
		var panel = $(target).combo('panel');
		newstate.calendar = $('<div></div>').appendTo(panel).wrap('<div class="datebox-calendar-inner"></div>');
		newstate.calendar.calendar({
			fit:true,
			border:false,
			startDay:opts.startDay||new Date(1900,0,1),
			endDay:opts.endDay||new Date(2100,0,1),
			onSelect:function(date){
				var value = opts.formatter(date);
				setValue(target, value);
				$(target).combo('hidePanel');
				opts.onSelect.call(target, date);
			}
		});
	
		
		var button = $('<div class="datebox-button"></div>').appendTo(panel);
		var current_btn = $('<a href="javascript:void(0)" class="datebox-current"></a>').html(opts.currentText).appendTo(button);
		var close_btn = $('<a href="javascript:void(0)" class="datebox-close"></a>').html(opts.closeText).appendTo(button);
		var reset_btn = $('<a href="javascript:void(0)" class="datebox-reset"></a>').html(opts.resetText).appendTo(button);

		current_btn.click(function(){
			$(target).datebox('setValue', new Date());
			$(target).combo('hidePanel');
		});
		close_btn.click(function(){
			$(target).combo('hidePanel');
		});
		reset_btn.click(function(){
			$(target).datebox('setValue', '');
			$(target).combo('hidePanel');
		});
		
		newstate.calendar.calendar({
				startDay:opts.startDay||new Date(1900,0,1),
				endDay:opts.endDay||new Date(2100,0,1),
				onSelect:function(date){
					opts.onSelect.call(target, date);
				}
		 });
		
		
		var panel = $(target).datebox('panel');
		if (!state.spinner){
			var p = $('<div style="padding:2px"><input style="width:80px"></div>').insertAfter(panel.children('div.datebox-calendar-inner'));
			state.spinner = p.children('input');

			
			var button = panel.children('div.datebox-button');
			button.children('.datebox-reset').removeClass("datebox-reset").addClass("datebox-timereset");
			var ok = $('<a href="javascript:void(0)" class="datebox-ok"></a>').html(opts.okText).appendTo(button);
			ok.click(function(){
				doEnter(target);
			});
		}
		state.spinner.timespinner({
			showSeconds: opts.showSeconds,
			separator: opts.timeSeparator,
			min:opts.min||null,
			max:opts.max||null
		}).unbind('.datetimebox').bind('mousedown.datetimebox',function(e){
			e.stopPropagation();
		});
		
		/*
		 * 2014.9.24修改，获取时间框的值，并修改显示的日期时间
		 */
		opts.value=$(target).datetimebox("getValue");
		setValue(target, opts.value,null,true);
		return  panel;
	}
	}
	
	/**
	 * get current date, including time
	 */
	function getCurrentDate(target){
		var c = $(target).datetimebox('calendar');
		var t = $(target).datetimebox('spinner');
		var date = c.calendar('options').current;
		return new Date(date.getFullYear(), date.getMonth(), date.getDate(), t.timespinner('getHours'), t.timespinner('getMinutes'), t.timespinner('getSeconds'));
	}
	
	
	/**
	 * called when user inputs some value in text box
	 */
	function doQuery(target, q){
		setValue(target, q, true);
	}
	
	/**
	 * called when user press enter key
	 */
	function doEnter(target){
		var opts = $.data(target, 'datetimebox').options;
		var date = getCurrentDate(target);
		setValue(target, opts.formatter.call(target, date));
		$(target).combo('hidePanel');
	}
	
	/**
	 * set value, if remainText is assigned, don't change the text value
	 */
	function setValue(target, value, remainText,flag){
		
		var opts = $.data(target, 'datetimebox').options;
		
		$(target).combo('setValue', value);
		if (!remainText){
			if (value){
				var date = opts.parser.call(target, value);			
				$(target).combo('setValue', opts.formatter.call(target, date));
				$(target).combo('setText', opts.formatter.call(target, date));
			} else {
				$(target).combo('setText', value);
			}
		}
		
		var date = opts.parser.call(target, value);
		/*
		 * 2014.9.24修改
		 */
		if(opts.auto){
		  $(target).datetimebox('calendar').calendar('moveTo', date);
		  $(target).datetimebox('spinner').timespinner('setValue', getTimeS(date));
		}
		
		if(opts.auto==false&&flag==true)
		{
				//采用事件加载时设置时间
			  $(target).datetimebox('calendar').calendar('moveTo', date);
			  $(target).datetimebox('spinner').timespinner('setValue', getTimeS(date));
		}
		/**
		 * get the time formatted string such as '03:48:02'
		 */
		function getTimeS(date){
			function formatNumber(value){
				return (value < 10 ? '0' : '') + value;
			}
			
			var tt = [formatNumber(date.getHours()), formatNumber(date.getMinutes())];
			if (opts.showSeconds){
				tt.push(formatNumber(date.getSeconds()));
			}
			return tt.join($(target).datetimebox('spinner').timespinner('options').separator);
		}
	}
	
	$.fn.datetimebox = function(options, param){
		if (typeof options == 'string'){
			var method = $.fn.datetimebox.methods[options];
			if (method){
				return method(this, param);
			} else {
				return this.datebox(options, param);
			}
		}
		
		options = options || {};
		return this.each(function(){
			var state = $.data(this, 'datetimebox');
			if (state){
				//处理如果修改宽度为百分比的宽度时
				options = $.fn.combo.setPercentWidth(this,options);
				$.extend(state.options, options);
			} else {
				$.data(this, 'datetimebox', {
					options: $.extend({}, $.fn.datetimebox.defaults, $.fn.datetimebox.parseOptions(this), options)
				});
			}
			createBox(this);
		});
	}
	
	$.fn.datetimebox.methods = {
		options: function(jq){
			var copts = jq.datebox('options');
			return $.extend($.data(jq[0], 'datetimebox').options, {
				originalValue: copts.originalValue,
				disabled: copts.disabled,
				readonly: copts.readonly
			});
		},
		spinner: function(jq){
			return $.data(jq[0], 'datetimebox').spinner;
		},
		setValue: function(jq, value){
			return jq.each(function(){
				setValue(this, value);
			});
		},
		reset: function(jq){
			return jq.each(function(){
				var opts = $(this).datetimebox('options');
				$(this).datetimebox('setValue', opts.originalValue);
			});
		}
	};
	
	$.fn.datetimebox.parseOptions = function(target){
		var t = $(target);
		return $.extend({}, $.fn.datebox.parseOptions(target), $.parser.parseOptions(target, [
			'timeSeparator',{showSeconds:'boolean'}
		]));
	};
	
	$.fn.datetimebox.defaults = $.extend({}, $.fn.datebox.defaults, {
		showSeconds:true,
		timeSeparator:':',
		
		keyHandler: {
			up:function(){},
			down:function(){},
			enter:function(){doEnter(this);},
			query:function(q){doQuery(this, q);}
		},
		
		formatter:function(date){
			var h = date.getHours();
			var M = date.getMinutes();
			var s = date.getSeconds();
			function formatNumber(value){
				return (value < 10 ? '0' : '') + value;
			}
			/*
			 * 2014.9.24修改
			 */
			//获取分隔符
			var separator;
			//2014-10-30 冯超修改
			if(typeof this =='object'&&this.timeSeparator){
				separator = this.timeSeparator;
				var r = $.fn.datebox.defaults.formatter(date) + ' ' + formatNumber(h)+separator+formatNumber(M);
				if(this.showSeconds){
					r += separator+formatNumber(s);
				}
				return r;
			}else{
				if( $(this).datetimebox('spinner')!=undefined)
				    separator = $(this).datetimebox('spinner').timespinner('options').separator;
				else
					separator=$(this).datetimebox("options").timeSeparator;
				
				var r = $.fn.datebox.defaults.formatter(date) + ' ' + formatNumber(h)+separator+formatNumber(M);
				if ($(this).datetimebox('options').showSeconds){
					r += separator+formatNumber(s);
				}
				return r;	
			}
		},
		parser:function(s){
			if($.isNumeric(s)) return new Date(parseInt(s));
			if ($.trim(s) == ''){
				return new Date();
			}
			var separator;
			//2014-10-30 冯超修改
			if(typeof this =='object'&&this.timeSeparator){
				separator = this.timeSeparator;
				//2014-12-22 冯超修改
				if(typeof s =='string'){
					s = new Date(s);
				}
				var hour = s.getHours();
				var minute = s.getMinutes();
				var second = s.getSeconds();
				return new Date(s.getFullYear(), s.getMonth(), s.getDate(), hour, minute, second);
			}else{
				var dt = s.split(' ');
				var d = $.fn.datebox.defaults.parser(dt[0]);
				if (dt.length < 2){
					return d;
				}
				/*
				 * 2014.9.24修改
				 * 获取分隔符
				 */
			
				if( $(this).datetimebox('spinner')!=undefined)
			    	separator= $(this).datetimebox('spinner').timespinner('options').separator;
				else{				
					separator=$(this).datetimebox("options").timeSeparator;
				}
				var tt = dt[1].split(separator);
				var hour = parseInt(tt[0], 10) || 0;
				var minute = parseInt(tt[1], 10) || 0;
				var second = parseInt(tt[2], 10) || 0;
				return new Date(d.getFullYear(), d.getMonth(), d.getDate(), hour, minute, second);
			}
		}
	});
})(jQuery);
/**
 * slider - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php
 * 
 * Dependencies: draggable
 * 
 */
(function($){
	function init(target){
		var slider = $('<div class="slider">' +
				'<div class="slider-inner">' +
				'<a href="javascript:void(0)" class="slider-handle"></a>' +
				'<span class="slider-tip"></span>' +
				'</div>' +
				'<div class="slider-rule"></div>' +
				'<div class="slider-rulelabel"></div>' +
				'<div style="clear:both"></div>' +
				'<input type="hidden" class="slider-value">' +
				'</div>').insertAfter(target);
		var name = $(target).hide().attr('name');
		if (name){
			slider.find('input.slider-value').attr('name', name);
			$(target).removeAttr('name').attr('sliderName', name);
		}
		return slider;
	}
	
	/**
	 * set the slider size, for vertical slider, the height property is required
	 */
	function setSize(target, param){
		var state = $.data(target, 'slider');
		var opts = state.options;
		var slider = state.slider;
		
		if (param){
			if (param.width) opts.width = param.width;
			if (param.height) opts.height = param.height;
		}
		if (opts.mode == 'h'){
			slider.css('height', '');
			slider.children('div').css('height', '');
			if (!isNaN(opts.width)){
				slider.width(opts.width);
			}
		} else {
			slider.css('width', '');
			slider.children('div').css('width', '');
			if (!isNaN(opts.height)){
				slider.height(opts.height);
				slider.find('div.slider-rule').height(opts.height);
				slider.find('div.slider-rulelabel').height(opts.height);
				slider.find('div.slider-inner')._outerHeight(opts.height);
			}
		}
		initValue(target);
	}
	
	/**
	 * show slider rule if needed
	 */
	function showRule(target){
		var state = $.data(target, 'slider');
		var opts = state.options;
		var slider = state.slider;
		
		var aa = opts.mode == 'h' ? opts.rule : opts.rule.slice(0).reverse();
		if (opts.reversed){
			aa = aa.slice(0).reverse();
		}
		_build(aa);
		
		function _build(aa){
			var rule = slider.find('div.slider-rule');
			var label = slider.find('div.slider-rulelabel');
			rule.empty();
			label.empty();
			for(var i=0; i<aa.length; i++){
				var distance = i*100/(aa.length-1)+'%';
				var span = $('<span></span>').appendTo(rule);
				span.css((opts.mode=='h'?'left':'top'), distance);
				
				// show the labels
				if (aa[i] != '|'){
					span = $('<span></span>').appendTo(label);
					span.html(aa[i]);
					if (opts.mode == 'h'){
						span.css({
							left: distance,
							marginLeft: -Math.round(span.outerWidth()/2)
						});
					} else {
						span.css({
							top: distance,
							marginTop: -Math.round(span.outerHeight()/2)
						});
					}
				}
			}
		}
	}
	
	/**
	 * build the slider and set some properties
	 */
	function buildSlider(target){
		var state = $.data(target, 'slider');
		var opts = state.options;
		var slider = state.slider;
		
		slider.removeClass('slider-h slider-v slider-disabled');
		slider.addClass(opts.mode == 'h' ? 'slider-h' : 'slider-v');
		slider.addClass(opts.disabled ? 'slider-disabled' : '');
		
		slider.find('a.slider-handle').draggable({
			axis:opts.mode,
			cursor:'pointer',
			disabled: opts.disabled,
			onDrag:function(e){
				var left = e.data.left;
				var width = slider.width();
				if (opts.mode!='h'){
					left = e.data.top;
					width = slider.height();
				}
				if (left < 0 || left > width) {
					return false;
				} else {
					var value = pos2value(target, left);
					adjustValue(value);
					return false;
				}
			},
			onBeforeDrag:function(){
				state.isDragging = true;
			},
			onStartDrag:function(){
				opts.onSlideStart.call(target, opts.value);
			},
			onStopDrag:function(e){
				var value = pos2value(target, (opts.mode=='h'?e.data.left:e.data.top));
				adjustValue(value);
				opts.onSlideEnd.call(target, opts.value);
				opts.onComplete.call(target, opts.value);
				state.isDragging = false;
			}
		});
		slider.find('div.slider-inner').unbind('.slider').bind('mousedown.slider', function(e){
			if (state.isDragging){return}
			var pos = $(this).offset();
			var value = pos2value(target, (opts.mode=='h'?(e.pageX-pos.left):(e.pageY-pos.top)));
			adjustValue(value);
			opts.onComplete.call(target, opts.value);
		});
		
		function adjustValue(value){
			var s = Math.abs(value % opts.step);
			if (s < opts.step/2){
				value -= s;
			} else {
				value = value - s + opts.step;
			}
			setValue(target, value);
		}
	}
	
	/**
	 * set a specified value to slider
	 */
	function setValue(target, value){
		var state = $.data(target, 'slider');
		var opts = state.options;
		var slider = state.slider;
		var oldValue = opts.value;
		if (value < opts.min) value = opts.min;
		if (value > opts.max) value = opts.max;
		
		opts.value = value;
		$(target).val(value);
		slider.find('input.slider-value').val(value);
		
		var pos = value2pos(target, value);
		var tip = slider.find('.slider-tip');
		if (opts.showTip){
			tip.show();
			tip.html(opts.tipFormatter.call(target, opts.value));
		} else {
			tip.hide();
		}
		
		if (opts.mode == 'h'){
			var style = 'left:'+pos+'px;';
			slider.find('.slider-handle').attr('style', style);
			tip.attr('style', style +  'margin-left:' + (-Math.round(tip.outerWidth()/2)) + 'px');
		} else {
			var style = 'top:' + pos + 'px;';
			slider.find('.slider-handle').attr('style', style);
			tip.attr('style', style + 'margin-left:' + (-Math.round(tip.outerWidth())) + 'px');
		}
		
		if (oldValue != value){
			opts.onChange.call(target, value, oldValue);
		}
	}
	
	function initValue(target){
		var opts = $.data(target, 'slider').options;
		var fn = opts.onChange;
		opts.onChange = function(){};
		setValue(target, opts.value);
		opts.onChange = fn;
	}
	
	/**
	 * translate value to slider position
	 */
	function value2pos(target, value){
		var state = $.data(target, 'slider');
		var opts = state.options;
		var slider = state.slider;
		if (opts.mode == 'h'){
			var pos = (value-opts.min)/(opts.max-opts.min)*slider.width();
			if (opts.reversed){
				pos = slider.width() - pos;
			}
		} else {
			var pos = slider.height() - (value-opts.min)/(opts.max-opts.min)*slider.height();
			if (opts.reversed){
				pos = slider.height() - pos;
			}
		}
		return pos.toFixed(0);
	}
	
	/**
	 * translate slider position to value
	 */
	function pos2value(target, pos){
		var state = $.data(target, 'slider');
		var opts = state.options;
		var slider = state.slider;
		if (opts.mode == 'h'){
			var value = opts.min + (opts.max-opts.min)*(pos/slider.width());
		} else {
			var value = opts.min + (opts.max-opts.min)*((slider.height()-pos)/slider.height());
		}
		return opts.reversed ? opts.max - value.toFixed(0) : value.toFixed(0);
	}
	
	$.fn.slider = function(options, param){
		if (typeof options == 'string'){
			return $.fn.slider.methods[options](this, param);
		}
		
		options = options || {};
		return this.each(function(){
			var state = $.data(this, 'slider');
			if (state){
				$.extend(state.options, options);
			} else {
				state = $.data(this, 'slider', {
					options: $.extend({}, $.fn.slider.defaults, $.fn.slider.parseOptions(this), options),
					slider: init(this)
				});
				$(this).removeAttr('disabled');
			}
			
			var opts = state.options;
			opts.min = parseFloat(opts.min);
			opts.max = parseFloat(opts.max);
			opts.value = parseFloat(opts.value);
			opts.step = parseFloat(opts.step);
			
			buildSlider(this);
			showRule(this);
			setSize(this);
		});
	};
	
	$.fn.slider.methods = {
		options: function(jq){
			return $.data(jq[0], 'slider').options;
		},
		destroy: function(jq){
			return jq.each(function(){
				$.data(this, 'slider').slider.remove();
				$(this).remove();
			});
		},
		resize: function(jq, param){
			return jq.each(function(){
				setSize(this, param);
			});
		},
		getValue: function(jq){
			return jq.slider('options').value;
		},
		setValue: function(jq, value){
			return jq.each(function(){
				setValue(this, value);
			});
		},
		enable: function(jq){
			return jq.each(function(){
				$.data(this, 'slider').options.disabled = false;
				buildSlider(this);
			});
		},
		disable: function(jq){
			return jq.each(function(){
				$.data(this, 'slider').options.disabled = true;
				buildSlider(this);
			});
		}
	};
	
	$.fn.slider.parseOptions = function(target){
		var t = $(target);
		return $.extend({}, $.parser.parseOptions(target, [
			'width','height','mode',{reversed:'boolean',showTip:'boolean',min:'number',max:'number',step:'number'}
		]), {
			value: (t.val() || undefined),
			disabled: (t.attr('disabled') ? true : undefined),
			rule: (t.attr('rule') ? eval(t.attr('rule')) : undefined)
		});
	};
	
	$.fn.slider.defaults = {
		width: 'auto',
		height: 'auto',
		mode: 'h',	// 'h'(horizontal) or 'v'(vertical)
		reversed: false,
		showTip: false,
		disabled: false,
		value: 0,
		min: 0,
		max: 100,
		step: 1,
		rule: [],	// [0,'|',100]
		tipFormatter: function(value){return value},
		onChange: function(value, oldValue){},
		onSlideStart: function(value){},
		onSlideEnd: function(value){},
		onComplete: function(value){}
	};
})(jQuery);


// /**
// * upload - jQuery MUI
// *
// * Dependencies: none
// *
// */
// (function($){
// function submit(target, id, data, callback) {
// var opts = $.data(target, 'upload').options;
// var params = {
// 'mup_upload_id' : id
// };
// if (data) {
// if (typeof data == 'function') {
// opts.uploadSuccess = data;
// } else {
// params = $.extend(params, data);
// }
// }
// if (typeof callback == 'function') {
// opts.uploadSuccess = callback;
// }
// if (window['uploadify_' + $(opts.button).attr('id')].queueData.queueLength >
// 0) {
// opts.joinId = id;
// $(opts.button).uploadify('settings', 'formData', params);
// try{
// $(opts.button).uploadify('upload');
// }catch(e){
// console.log(e)
// }
// } else if(opts.deleteQueue.length>0){
// $.post(opts.deletePath, 'ids='
// + $.toJSON(opts.deleteQueue), function() {
// getSimpleFile($(target), opts, true);
// });
// } else {
// opts.uploadSuccess.call($(target), opts);
// }
// }
//
// function deleteFile(opts) {
// var selections = opts.list.datagrid('getSelections');
// if(selections.length>0){
// for ( var i = 0; i < selections.length; i++) {
// if ('已上传' === selections[i].status) {
// opts.deleteQueue.push(selections[i].id);
// opts.list.datagrid('updateRow', {
// index : opts.list.datagrid('getRowIndex', selections[i]),
// row : {
// status : '已删除',
// id : null
// }
// })
// } else if ('未上传' === selections[i].status) {
// var files = window['uploadify_' + $(opts.button).attr('id')].queueData.files;
// for ( var j in files) {
// if (selections[i].name == files[j].name) {
// opts.button.uploadify('cancel', files[j].id);
// opts.list.datagrid('deleteRow', opts.list.datagrid(
// 'getRowIndex', selections[i]));
// }
// }
// }
// }
// opts.list.datagrid('clearSelections');
// }else{
// $.messager.alert('警告','请选择要删除的附件！');
// }
// }
//
// function createUpload(target) {
// var opts = $.data(target, 'upload').options;
// var conf = opts.uploadConf = $.extend({}, $.fn.upload.defaults, opts);
// var t = $(target);
// t.empty();
// opts.list = $('<div class="mup_upload_list">').appendTo(target);
// if(opts.canEdit){
// opts.toolbar = $('<div>').appendTo(target)[0];
// opts.toolbarBody = $('<tr>').appendTo($('<table cellspacing="0"
// cellpadding="0" class="mup_upload_toolbar">').appendTo(opts.toolbar));
// opts.button =
// $('<a>').attr('href','#').html('上传').appendTo($('<td>').appendTo(opts.toolbarBody)).linkbutton({
// id:t.attr('id') + "_upload_button",
// iconCls:'icon-cancle'
// });
// $('<div
// class="datagrid-btn-separator"></div>').appendTo($('<td>').appendTo(opts.toolbarBody))
// $('<a>').attr('href','#').html('删除').appendTo($('<td>').appendTo(opts.toolbarBody)).linkbutton({
// iconCls:'icon-cancel',
// plain:true
// }).bind('click', function(){
// deleteFile(opts);
// });
// }
// conf.onQueueComplete = function(queue) {
// if (queue.queueLength === 0) {
// if (opts.deleteQueue.length > 0) {
// $.post(opts.deletePath, 'ids='
// + $.toJSON(opts.deleteQueue), function() {
// getSimpleFile(t, opts, true);
// });
// } else {
// getSimpleFile(t, opts, true);
// }
// } else {
// opts.button.uploadify('upload','*');
// }
// };
// conf.onSelect = function(file) {
// var flag = true;
// if (typeof opts.filter == 'function') {
// flag = opts.filter.call(window, file);
// }
// var rows = opts.list.datagrid('getData').rows;
// for ( var i = 0; i < rows.length; i++) {
// if(rows[i].name === file.name){
// flag = false;
// $.messager.alert('警告','<'+file.name+'>文件已经存在，无法重复上传！');
// }
// }
//			
// if (flag) {
// opts.list.datagrid('insertRow', {
// index : 0,
// row : {
// name : file.name,
// size : file.size,
// status : '未上传'
// }
// });
// } else {
// opts.button.uploadify('cancel', file.id);
// }
// }
// conf.onInit = function(){
// getSimpleFile(t, opts, false);
// }
// if (opts.canEdit) {
// opts.button.uploadify(conf);
// }else{
// getSimpleFile(t, opts, false);
// }
// }
//
// function getSimpleFile(t, opts, flag) {
// // if (opts.joinId) {
// var columns = [];
// var fileListColumns = {
// ck : {
// field : 'ck',
// checkbox : true
// },
// name : {
// field : 'name',
// title : '文件名',
// align : 'center',
// width : 45
// },
// size : {
// field : 'size',
// title : '文件大小',
// align : 'center',
// width : 15,
// formatter : function(val) {
// var size = val;
// var level = 0;
// while (size > 1024 || level > opts.fileSizeUnit.length){
// size = size / 1024;
// level++;
// }
// return size.toFixed(2) + opts.fileSizeUnit[level];
// }
// },
// createDate : {
// field : 'createDate',
// title : '上传时间',
// align : 'center',
// width : 30,
// formatter : function(val) {
// if (typeof val == 'number') {
// return new Date(val).toLocaleString();
// }
// return val;
// }
// },
// status : {
// field : 'status',
// title : '附件状态',
// align : 'center',
// width : 10
// },
// download : {
// field : 'id',
// title : '操作',
// align : 'center',
// width : 10,
// formatter : function(val) {
// if (val) {
// return '<a href="' + opts.downloadPath + val
// + '" target="_Blank">下载</a>';
// }
// }
// }
// };
// for ( var i in opts.listColumns) {
// columns.push(fileListColumns[opts.listColumns[i]]);
// }
// opts.list.datagrid({
// onLoadSuccess : function() {
// if (flag && opts.uploadSuccess
// && typeof opts.uploadSuccess == 'function') {
// setTimeout(function(){
// opts.uploadSuccess.call(t, opts);
// },100)
// }
// },
// url : opts.listPath + opts.joinId,
// toolbar : opts.toolbar,
// rownumbers : true,
// striped : true,
// fitColumns : true,
// columns : [ columns ]
// });
// // }
// }
//	
// function destroy(target){
// var opts = $.data(target, 'upload').options;
// $(opts.button).uploadify('destroy');
// }
//
// $.fn.upload = function(options, param) {
// if(!$.fn.upload.finish){
// return $.fn.upload.loading(arguments.callee, this, arguments, typeof options
// == 'string')
// }else{
// if (typeof options == 'string') {
// return $.fn.upload.methods[options].apply(this,
// Array.prototype.slice.call(arguments, 1));
// }
//
// options = options || {};
// return this.each(function() {
// var state = $.data(this, 'upload');
// if (state) {
// $.extend(state.options, options);
// } else {
// $.data(this, 'upload', {
// options : $.extend({}, $.fn.upload.defaults,$.fn.upload.parseOptions(this),
// options)
// });
// $(this).removeAttr('disabled');
// }
//
// createUpload(this);
// });
// }
//		
// };
//
// $.fn.upload.methods = {
// options : function() {
// return $.data(this[0], 'upload').options;
// },
// enable : function() {
// return this.each(function() {
// setDisabled(this, false);
// });
// },
// disable : function() {
// return this.each(function() {
// setDisabled(this, true);
// });
// },
// submit : function(id, data, callback) {
// return this.each(function() {
// submit(this, id, data, callback);
// });
// },
// destroy : function() {
// return this.each(function() {
// destroy(this);
// });
// },
// setJoinId : function(joinId) {
// $.data(this[0], 'upload').options.joinId = joinId;
// getSimpleFile(null, $.data(this[0], 'upload').options, false);
// return this;
// }
// };
//
// $.fn.upload.parseOptions = function(target) {
// var t = $(target);
// return $.extend({}, $.parser.parseOptions(target, [ 'fileSizeUnit',
// 'uploadSuccess',
// 'joinId', 'listColumns', {
// canEdit : 'boolean'
// } ]));
// };
//
// $.fn.upload.defaults = {
// fileSizeUnit : [ 'Bit', 'KB', 'MB', 'GB', 'TB' ],
// canEdit : true,
// joinId : 'null',
// uploadSuccess : false,
// listColumns : [ 'ck', 'name', 'size', 'createDate', 'status',
// 'download' ],
// buttonText : '上传',
// swf : contextPath + '/plugins/uploadify/uploadify.swf',
// listPath : contextPath + "/mvc/upload/service/getList/",
// deletePath : contextPath + '/mvc/upload/service/delete',
// downloadPath : contextPath + '/mvc/upload/service/download/',
// uploader : contextPath + '/mvc/upload/service/upload',
// deleteQueue : [],
// width : 61,
// height : 26,
// auto : false
// };
//	
// $.fn.upload.loading = function(func, context, args, inited){
// if(!$.fn.upload.finish){
// if(context && args && inited){
// $.fn.upload.blockqueue.push({'func':func,'context':context,'args':args})
// }else{
// using('/plugins/uploadify/jquery.uploadify.js', function(){
// $.fn.upload.finish = true;
// if(context){
// func.call(context, args);
// for ( var int = 0; int < $.fn.upload.blockqueue.length; int++) {
// if($.fn.upload.blockqueue[int] && $.fn.upload.blockqueue[int].context[0] ==
// context[0]){
// if($.fn.upload.blockqueue[int].args &&
// $.fn.upload.blockqueue[int].args.length>1){
// $.fn.upload.blockqueue[int].func.call($($.fn.upload.blockqueue[int].context),
// $.fn.upload.blockqueue[int].args[0],$.fn.upload.blockqueue[int].args[1])
// }else{
// $.fn.upload.blockqueue[int].func.call($($.fn.upload.blockqueue[int].context),
// $.fn.upload.blockqueue[int].args[0])
// }
// $.fn.upload.blockqueue[int] = null;
// }
// }
// }else{
// func();
// if($.fn.upload.blockqueue.length>0){
// for ( var int = 0; int < $.fn.upload.blockqueue.length; int++) {
// if($.fn.upload.blockqueue[int]){
// if($.fn.upload.blockqueue[int].args &&
// $.fn.upload.blockqueue[int].args.length>1){
// $.fn.upload.blockqueue[int].func.call($($.fn.upload.blockqueue[int].context),
// $.fn.upload.blockqueue[int].args[0],$.fn.upload.blockqueue[int].args[1])
// }else{
// $.fn.upload.blockqueue[int].func.call($($.fn.upload.blockqueue[int].context),
// $.fn.upload.blockqueue[int].args[0])
// }
// $.fn.upload.blockqueue[int] = null;
// }
// }
// }
// }
//					
// });
// }
// }
// }
//	
// $.fn.upload.finish = false;
// $.fn.upload.blockqueue = [];
// })(jQuery);


/**
 * commonselect - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php
 * 
 * Dependencies: window
 * 
 */
(function($){
	
	
	/**
	 * create the component
	 */
	var resetAll = function(){
		var state = $.data(this, 'commonselect');
		var opts = state.options;
		if(state.query){
			state.query.form('clear');
		}
		if(opts.mutiSelect){
			state.dTable.datagrid('loadData', []);
		}
		state.sTable.datagrid('loadData', []);
		
	}
	function create(target){
		var state = $.data(target, 'commonselect');
		var opts = state.options;
		$(target).show();
		// 初始化选择窗口
		$(target).window({closed: true,modal: true, minimizable: false,collapsible:false,resizable:false,maximizable: false,title: opts.title,onClose: resetAll});
		// 布局
		var layoutStr = '<div class="sel_border" data-roles="mui-layout" data-options="fit:true">'+
				'<div class="sel_tree" data-options="region:\'west\',title:\'类型树\',split:true" style="width:200px">'+
				'</div>'+
				'<div data-options="region:\'center\'">'+
					'<div class="sel_center_border" data-roles="mui-layout"  data-options="fit: true"> '+
						'<div class="sel_query_border" data-options="collapsed: true,region:\'north\',title:\'查询\',split:true" style="height:90px">'+
						'</div>'+  
						'<div class="sel_tab_1" data-options="region:\'center\'" style="height:200px"> '+ 
						'</div>'+  
						'<div class="sel_tab_2" data-options="region:\'south\'" style="height:200px"> '+ 
						'</div>'+  
					'</div>'+  
				'</div>'+ 
				'<div class="sel_tools" data-options="region:\'south\',border:false" style="height:40px;text-align:center;padding:5px 0;">'  +
	                '<a data-roles="mui-linkbutton" class="sel_ok"  data-options="iconCls:\'icon-ok\'" href="javascript:void(0)">确定</a> '+ 
	                '<a data-roles="mui-linkbutton" class="sel_cancle" data-options="iconCls:\'icon-cancel\'" href="javascript:void(0)">取消</a> '+  
                '</div>'+ 
			'</div>';
		
		if($(target).find('.sel_border').length == 0){
			$(layoutStr).appendTo($(target)).layout();
			// 初始化窗口按钮
			$(target).find('.sel_tools a').linkbutton();
		}
		
		// 初始化查询区
		createQuery(target);
		
		
		// 初始化树
		createTree(target);

		// 待选列表
		createSourceGrid(target);
		
		if(opts.mutiSelect){
			// 已选列表
			createDistinationGrid(target);
		}
		
		// 绑定事件
		bindEvent(target);
		
		
		// 查询区默认折叠
		if($(target).find('.sel_center_border').length>0){
			$(target).find('.sel_center_border').layout();
		}
		
	}
	
	function bindEvent(target){
		var state = $.data(target, 'commonselect');
		var opts = state.options;
		$(target).find('.sel_tools .sel_ok').unbind('click').bind('click',function(){
			 if($.isFunction(opts.selectedHandler)){
				 opts.selectedHandler(getResult(opts.mutiSelect));
				 $(target).window('close');
			 }
		});
		$(target).find('.sel_tools .sel_cancle').unbind('click').bind('click', function(){
			$(target).window('close')
		});
		
		// 查询事件
		if(state.query){
			var queryBtn = $(target).find('.sel_query');
			var resetBtn = $(target).find('.sel_reset');
			var sTable = $(target).find('.sel_s_grid');
			
			if(queryBtn.length > 0){
				queryBtn.unbind('click').bind('click',function(){
					var tempParam=$(target).find('form.queryform').form('getRecord');
					//查询下级组织人员
					var node = $(target).find(".sel_tree").tree('getSelected');
					if(node && opts.cascade){
						tempParam.queryAll = node.attributes.dLevelCode||'1';
					}
					sTable.datagrid('load',tempParam);
				});
			}
			if(resetBtn.length>0){
				resetBtn.unbind('click').bind('click',function(){
					var hiddenValue;
					var excludeNode;
					if($(this).parents('form.queryform').find(".queryHiddenField").length>0){
						hiddenValue = $(this).parents('form.queryform').find(".queryHiddenField").val(); // ie
																											// bug
					}
					if($(this).parents('form.queryform').find(".excludeNodeField").length>0){
						excludeNode = $(this).parents('form.queryform').find(".excludeNodeField").val(); // ie
																											// bug
					}
					$(this).parents('form.queryform').form('reset');
					$(this).parents('form.queryform').find('.queryHiddenField').val(hiddenValue);
					$(this).parents('form.queryform').find('.excludeNodeField').val(excludeNode);
					
				});
			}
		}
	}
	// 点击左侧树刷新列表
	function refreshSGrid(node, state){
		var sTable = state.sTable;
		var selType = state.options.selectType;
		var key = $.fn.commonselect.constants[selType]['filterGridParam'] || 'deptid';
		var value = node[$.fn.commonselect.constants[selType]['treePassParam']|| 'id'];
		var param ={};
		param[key] = value;
		if(state.options.excludeNode){
			param.excludeNode = state.options.excludeNode;
		}
		//查询下级组织人员
		if(state.options.cascade){
			param.queryAll = node.attributes.dLevelCode||'1';
		}
		if(state.query){
			state.query.find('.queryHiddenField').val(value);
		}
		sTable.datagrid('load', param);
	}
	
	function createTree(target){
		var state = $.data(target, 'commonselect');
		var opts = state.options;
		var selType = opts.selectType?opts.selectType: 'user'; 
		var filter = opts.treeRootId?('?root='+opts.treeRootId):'';
		if(!state.tree){
			var treeTarget = $('<ul class="sel_tree">').appendTo($('.sel_tree'));
			state.tree = treeTarget;
		}
		var loadedFilter;
		if(opts.excludeNode){
			loadedFilter = function(data){  
				var temp = [];
				if(data &&　data.length>0){
					$.each(data, function(){
						if(this.id != opts.excludeNode){
							temp.push(this);
						}
					});
				}
				return temp;
		    }   
		};
		if(loadedFilter){
			state.tree.tree({
				url: $.fn.commonselect.constants[selType].treeUrl + filter,
				onClick: function(node){
					refreshSGrid(node, state);
				},
				loadFilter: loadedFilter
			});
		}else{
			state.tree.tree({
				url: $.fn.commonselect.constants[selType].treeUrl + filter,
				onClick: function(node){
					refreshSGrid(node, state);
				}
			});
		}
	}
	
	function createQuery(target){
		var state = $.data(target, 'commonselect');
		var opts = state.options;
		if(!state.query){
			var query = $(target).find('form');
			if(query && query.length>0){
				var queryClone = query.clone();
				state.query = queryClone;
				$(target).find('.sel_query_border').append(queryClone);
				query.remove();
				$('<input type="hidden" class="queryHiddenField" name="deptid" />').appendTo(state.query);
				if(opts.excludeNode){
					$('<input type="hidden" class="excludeNodeField" name="excludeNode" />').appendTo(state.query);
				}
			}else{
				$(target).find('.sel_query_border').remove();
			}
		}
		if(opts.treeRootId){
			state.query.find(".queryHiddenField").val(opts.treeRootId);
		}
		if(opts.excludeNode){
			state.query.find(".excludeNodeField").val(opts.excludeNode);
		}
		
		if(opts.mutiSelect === false){
			$(target).find('.sel_tab_2').remove();
		}
	}
	
	function createSourceGrid(target){
		var state = $.data(target, 'commonselect');
		var opts = state.options;
		var selType = opts.selectType?opts.selectType: 'user'; 
		if(!state.sTable){
			var sTable = $('<table class="sel_s_grid">').appendTo($('.sel_tab_1'));
			state.sTable = sTable;
		}
		var queryParams = opts.treeRootId?{deptid:opts.treeRootId}:{};
		if(opts.excludeNode){
			queryParams.excludeNode = opts.excludeNode
		}
		var url = (opts.selectFor && $.fn.commonselect.constants[selType].sgridUrl[opts.selectFor])?
				$.fn.commonselect.constants[selType].sgridUrl[opts.selectFor]:
					$.fn.commonselect.constants[selType].sgridUrl.defaults;
		state.sTable.datagrid({   
			rownumbers: true,
			striped: true, 
			idField: 'id',
			fit: true,
			singleSelect : !opts.mutiSelect,
		    url: url,
		    queryParams:queryParams,
			title: '待选列表',
			pagination: true,
// fitColumns: true,
			unSelectAfterLoad: false,
			columns: $.fn.commonselect.constants[selType].scolumns,
			onLoadSuccess: function(){
				if(opts.mutiSelect){
					matchData(target);
				}
			},
			onSelect : function(index, data){
				if(opts.mutiSelect){
					insertOne(data, state.dTable);
				}
			},
			onUnselect: function(index, data){
				if(opts.mutiSelect){
					deleteOne(data, state.dTable);
				}
			},
			onSelectAll : function(datas){
				if(opts.mutiSelect){
					$.each(datas, function(){
						insertOne(this, state.dTable);
					})
				}
				
			},
			onUnselectAll : function(datas){
				if(opts.mutiSelect){
					$.each(datas, function(){
						deleteOne(this,state.dTable);
					})
				}
			}
		});  
	}
	
	function createDistinationGrid(target){
		var state = $.data(target, 'commonselect');
		var opts = state.options;
		var selType = opts.selectType?opts.selectType: 'user'; 
		if(!state.dTable){
			var dTable = $('<table class="sel_d_grid">').appendTo($('.sel_tab_2'));
			state.dTable = dTable;
		}
	
		var selectFor = opts.selectFor;
		var gridFilterId = opts.gridFilterId;
		var url = typeof($.fn.commonselect.constants[selType]['dgridUrl']) == 'string'?
					$.fn.commonselect.constants[selType]['dgridUrl']:
						$.fn.commonselect.constants[selType]['dgridUrl'][selectFor]+'?'+$.fn.commonselect.constants[selType]['dgridFilterKey'][selectFor]+'='+gridFilterId;
		var columns = $.merge([], $.fn.commonselect.constants[selType].dcolumns[0]);
		if(columns){
			var ck = $.extend({},columns[0],{hidden: true});
			columns[0] = ck;
		}
		state.dTable.datagrid({ 
			 rownumbers: true,
			 striped: true, 
			 dField: 'id',
			 url: url,
			 title: '已选列表',
			 fit: true,
// fitColumns: true,
			 unSelectAfterLoad: false,
			 columns: [columns],
			 onLoadSuccess: function(){
				if(opts.mutiSelect){
					matchData(target);
				}
			 },
			 onDblClickRow: function(rowIndex, rowData){
				 state.dTable.datagrid('deleteRow', rowIndex);
				 var index = state.sTable.datagrid('getRowIndex', rowData.id)
				 if(index > -1){
					 state.sTable.datagrid('unselectRow', index);
				 }
			 }
		}); 
	}
	
	function insertOne(data, target){
		var datas = target.datagrid('getData').rows;
		var flag = false;
		$.each(datas, function(){
			if(this.id === data.id){
				flag = true;
				return false;
			}
		})
		if(!flag){
			target.datagrid('appendRow',data);
		}
	}
	
	function deleteOne(data, target){
		var datas = target.datagrid('getData').rows;
		if(datas.length > 0 ){
			$.each(datas, function(){
				if(data.id == this.id){
					data = this;
					return false;
				}
			})
		}
		var row = target.datagrid('getRowIndex', data);
		if(row > -1){
			target.datagrid('deleteRow',row);
		}
	}
	
	function matchData(target){
		var state = $.data(target, 'commonselect');
		var opts = state.options;
		if(!opts.mutiSelect){
			state.sTable.datagrid('unselectAll');
		}else{
			
			var datas = state.dTable.datagrid('getData').rows;
			var sdatas = state.sTable.datagrid('getSelections');
			if(datas.length > 0 ){
				$.each(datas, function(){
					state.sTable.datagrid('selectRecord', this.id);
				})
			}else{
				state.sTable.datagrid('unselectAll');
			}
		}
		
	}
	
	function getResult(which){
		var dTable = $('.sel_d_grid');
		var sTable = $('.sel_s_grid');
		if(which){
			return dTable.datagrid('getData').rows;
		}else{
			return sTable.datagrid('getSelections')
		}
	}
	
	$.fn.commonselect = function(options, param){
		if (typeof options == 'string'){
			var method = $.fn.commonselect.methods[options];
			if (method){
				return method(this, param);
			} else {
				return this.window(options, param);
			}
		}
		
		options = options || {};
		return this.each(function(){
			var state = $.data(this, 'commonselect');
			if (state){
				$.extend(state.options, options);
				create(this);
			} else {
				state = $.data(this, 'commonselect', {
					options: $.extend({}, $.fn.commonselect.defaults, $.fn.commonselect.parseOptions(this), options)
				});
				create(this);
			}
		});
	};
	
	
	$.fn.commonselect.methods = {
			
	};
	$.fn.commonselect.parseOptions = function(target){
		var t = $(target);
		return $.extend({}, $.fn.combo.parseOptions(target), $.parser.parseOptions(target,[
			
		]));
	};
	
	
	$.fn.commonselect.defaults = $.extend({}, $.fn.window.defaults, {
		selectedHandler: null,
		mutiSelect:true,
		selectType:null, 
		mutiSelect:null,  
		treeRootId:null,  
		selectFor:null, 
		gridFilterId:null,
		selectType:'emp',
		cascade:false,//查询下级组织人员
		title: '人员选择'
	});
	
	$.fn.commonselect.constants = {
		emp:{
			scolumns:[[
			    {field:'ck',checkbox:true},
				{field:'id',title:'id',hidden: true},
				{field:'name',title:'名称',width:200},
				{field:'code',title:'编码', width:150},
				{field:'deptCode',title:'部门编号',width:150}
			]],
			dcolumns:[[
					    {field:'ck',checkbox:true},
						{field:'id',title:'id',hidden: true},
						{field:'name',title:'名称',width:200},
						{field:'code',title:'编码', width:150},
						{field:'deptCode',title:'部门编号',width:150}
					]],
			treePassParam: 'id',
			filterGridParam: 'deptid',
			sgridUrl: {
				defaults: contextPath + '/mvc/organization/emp/service/comppage',
				orgzs: contextPath + '/mvc/organization/emp/service/compDeptList',
				orgjz: contextPath + '/mvc/organization/emp/service/comppage',
				user: contextPath + '/mvc/organization/emp/service/compUserForEmp'
			},
			dgridUrl: {
				duty: contextPath + '/mvc/organization/duty/service/emp',
				category: contextPath + '/mvc/organization/category/service/listEmp',
				post: contextPath + '/mvc/organization/post/service/listEmp',
				role: contextPath + '/mvc/organization/role/service/emp',
				orgzs: contextPath + '/mvc/organization/org/service/listEmpZS',
				orgjz: contextPath + '/mvc/organization/org/service/listEmp',
				workgroup: contextPath + '/mvc/organization/workgroup/service/empPage'
			},
			dgridFilterKey: {
				duty: 'dutyId',
				category: 'categoryId',
				post: 'postId',
				role: 'roleId',
				orgzs: 'deptId',
				orgjz: 'deptId',
				workgroup:'groupId'
			},
			treeUrl: contextPath + '/mvc/organization/org/service/orgtree'
		}
	}
})(jQuery);


// /**
// * editor - jQuery EasyUI
// *
// * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
// *
// * Licensed under the GPL or commercial licenses To use it on other terms
// please
// * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
// * http://www.jeasyui.com/license_commercial.php
// *
// * Dependencies: none
// *
// */
// (function($){
// function create(target){
// var opts = $.data(target, 'editor').options;
// $(target).addClass('mui_editor');
// if(opts.name){
// opts.textarea = opts.name
// }
// return UE.getEditor(target,opts);
// }
// $.fn.editor = function(options, param){
// if(!window.UE){
// return $.fn.editor.loading(arguments.callee, this, arguments)
// }else{
// if (typeof options == 'string'){
// var method = $.fn.editor.methods[options];
// if (method){
// return method(this, param);
// }
// }
//			
// options = options || {};
// return this.each(function(){
// var state = $.data(this, 'editor');
// if (state){
// $.extend(state.options, options);
// } else {
// state = $.data(this, 'editor', {
// options: $.extend({}, $.fn.editor.defaults, $.fn.editor.parseOptions(this),
// options)
// });
// state.editor = create(this);
// }
// });
// }
// };
//	
//	
// // 获取编辑器的内容
// function getContent(target) {
// return $.data(target, 'editor').editor.getContent();
// }
//    
// // 获得编辑器的带格式的纯文本内容
// function getPlainTxt(target) {
// return $.data(target, 'editor').editor.getPlainTxt();
// }
//    
// // 设置编辑器的内容
// function setContent(target,content,isAppendTo) {
// $.data(target, 'editor').editor.setContent(content, isAppendTo);
// }
//
// // 获得编辑器的纯文本内容
// function getContentTxt(target) {
// return $.data(target, 'editor').editor.getContentTxt();
// }
//    
// // 判断编辑器里是否有内容
// function hasContent(target) {
// return $.data(target, 'editor').editor.hasContents();
// }
//    
// function destory(target) {
// $.data(target, 'editor').editor.destroy();
// }
//    
// function disable(target) {
// $.data(target, 'editor').editor.setDisabled();
// }
//    
// function enable(target) {
// $.data(target, 'editor').editor.setEnabled();
// }
//    
//    
// $.fn.editor.methods = {
// options: function(jq){
// return $.data(jq[0], 'editor').options;
// },
// getContent: function(jq){
// return getContent(jq[0]);
//			
// },
// getPlainTxt: function(jq){
// return getPlainTxt(jq[0]);
// },
// getContentTxt: function(jq){
// return getContentTxt(jq[0]);
// },
// disable: function(jq){
// return jq.each(function(){
// disable(this);
// });
// },
// enable: function(jq){
// return jq.each(function(){
// enable(this);
// });
// },
// hasContent: function(jq){
// return hasContent(jq[0]);
// },
// setContent: function(jq, content, isAppend){
// return jq.each(function(){
// setContent(this, content ,isAppend);
// });
// },
// destory: function(jq){
// return jq.each(function(){
// destory(this);
// });
// }
// };
//	
// $.fn.editor.parseOptions = function(target){
// return $.extend({}, $.parser.parseOptions(target, []));
// };
//	
// $.fn.editor.defaults = {
// toolbars:[
// ['fullscreen', 'source','|','undo', 'redo', '|',
// 'bold', 'italic', 'underline', 'fontborder', 'strikethrough', 'superscript',
// 'subscript', 'removeformat', 'formatmatch', 'autotypeset', 'blockquote',
// 'pasteplain', '|', 'forecolor', 'backcolor', 'insertorderedlist',
// 'insertunorderedlist', 'selectall', 'cleardoc', '|',
// 'rowspacingtop', 'rowspacingbottom', 'lineheight', '|',
// 'customstyle', 'paragraph', 'fontfamily', 'fontsize', '|',
// 'directionalityltr', 'directionalityrtl', 'indent', '|',
// 'justifyleft', 'justifycenter', 'justifyright', 'justifyjustify', '|',
// 'touppercase', 'tolowercase', '|',
// 'link', 'unlink', '|', 'imagenone', 'imageleft', 'imageright', 'imagecenter',
// '|',
// 'insertimage', 'insertcode', 'pagebreak', '|',
// 'horizontal', 'date', 'time', 'spechars', 'wordimage', '|',
// 'inserttable', 'deletetable', 'insertparagraphbeforetable', 'insertrow',
// 'deleterow', 'insertcol', 'deletecol', 'mergecells', 'mergeright',
// 'mergedown', 'splittocells', 'splittorows', 'splittocols', '|',
// 'print', 'searchreplace']
// ],
// autoHeightEnabled:false,
// initialFrameHeight: 300,
// zIndex: 9990,
// initialContent:''
// };
//	
// $.fn.editor.loading = function(func, context, args){
// if(window.UE){
// $.fn.editor.finish = true;
// if(context){
// if(args && args.length>0){
// func.call(context, args[0], args[1]);
// }else{
// func.call(context);
// }
// }else{
// func();
// }
// }else{
// using('/plugins/ueditor/ueditor.config.js', function(){
// using('/plugins/ueditor/ueditor.all.js', function(){
// using('/plugins/ueditor/lang/zh-cn/zh-cn.js', function(){
// $.fn.editor.finish = true;
// if(context){
// if(args && args.length>0){
// func.call(context, args[0], args[1]);
// }else{
// func.call(context);
// }
// }else{
// func();
// }
// })
// })
// });
// }
// }
//	
// $.fn.editor.finish = false;
// })(jQuery);


/**
 * userselect - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php
 * 
 * Dependencies: window
 * 
 */
(function($){
	
	
	/**
	 * create the component
	 */
	function create(target){
		var state = $.data(target, 'userselect');
		var opts = state.options;
		
		
		// 初始化选择窗口
		$(target).window({closed: true,minimizable: false,maximizable: false,title: opts.title,resizable:false,collapsible:false,modal: true});

		
		// 布局
		var layoutStr = '<div class="sel_border" data-roles="mui-layout" data-options="fit:true">'+
				'<div data-options="region:\'center\'" >'+
// '<div class="sel_center_border" data-roles="mui-layout"> '+
// '<div class="sel_query_border" data-options="collapsed: true,region:\'north\'
// style="height:80px">'+
// '<input class="user_sel_query" style="margin-left:10px;width:120px"
// name="node_name"/><a data-roles="mui-linkbutton" class="user_sel_query"
// style="margin-left:5px;" href="javascript:void(0)">查询</a>'+
// '</div>'+
// '<div data-options="region:\'center\'">'+
							'<ul class="user_sel_tree"></ul>'+
// '</div>'+
// '</div>'+
				'</div>'+ 
				'<div class="user_sel_tools" data-options="region:\'south\',border:false" style="height:40px;text-align:center;padding:5px 0;">'  +
	                '<a data-roles="mui-linkbutton" class="user_sel_ok"  data-options="iconCls:\'icon-ok\'" href="javascript:void(0)">确定</a> '+ 
	                '<a data-roles="mui-linkbutton" class="user_sel_cancle" data-options="iconCls:\'icon-cancel\'" href="javascript:void(0)">取消</a> '+  
                '</div>'+ 
			'</div>';
		$(layoutStr).appendTo($(target)).layout();
		
		
		// 初始化窗口按钮
		$(target).find('.user_sel_tools a').linkbutton();
		
// $(target).find('.user_sel_query').linkbutton();
		
		
		
		// 初始化树
		createTree(target);

		// 绑定事件
		bindEvent(target);
		
	}
	
	function bindEvent(target){
		var state = $.data(target, 'userselect');
		var opts = state.options;
		$(target).find('.user_sel_tools .user_sel_ok').unbind('click').bind('click',function(){
			 if($.isFunction(opts.selectedHandler)){
				 var flag = opts.selectedHandler(getResult(target));
				 if(flag  === false){
				 }else{
					 $(target).window('close');
				 }
			 }
		});
		$(target).find('.user_sel_tools .user_sel_cancle').unbind('click').bind('click', function(){
			$(target).window('close');
		});
		
		// 查询事件
// var queryBtn = $(target).find('.user_sel_query');
// var tree = state.tree;
//		
// queryBtn.click(function(){
// var value = $(target).find('.user_sel_query').val();
// var node = tree.tree('findByParam', {name: });
// tree.tree('select', node.target);
// });
	}
	
	function getResult(target){
		var state = $.data(target, 'userselect');
	
		if(state.tree) {
			if(state.options.checkbox){
				
				return $(state.tree).tree('getChecked');
			}else{
				return $(state.tree).tree('getSelected');

			}
		}else{
			return null;
		}
	}
	
	function createTree(target){
		var state = $.data(target, 'userselect');
		var opts = state.options;
		var selType = opts.selectType ? opts.selectType: 'user'; 
		var filter='';
/*
 * if(opts.treeRootId){ if($.isArray(opts.treeRootId)){ filter =
 * opts.treeRootId.join(","); }else{ filter = opts.treeRootId; } }
 */
		if(!state.tree){
			var treeTarget = $('ul.user_sel_tree', target);
			state.tree = treeTarget;
		}
		

		if(opts.param){
			var param = opts.param
			for(var key in param){
				filter += '&'+key+'='+param[key]
			}
			filter = filter.substr(1);
			filter = "?"+filter;
		}
		
		var treeopts = $.extend({}, opts.treeOpts, {
			url: $.fn.userselect.constants[selType].treeUrl + filter,
			checkbox: opts.checkbox === true?true:false,
			cascadeCheck: opts.cascadeCheck === true?true:false
		});
		state.tree.tree(treeopts);
		
	}
	
	$.fn.userselect = function(options, param){
		if (typeof options == 'string'){
			var method = $.fn.userselect.methods[options];
			if (method){
				return method(this, param);
			} else {
				return this.window(options, param);
			}
		}
		options = options || {};
		return this.each(function(){
			var state = $.data(this, 'userselect');
			if (state){
				$.extend(state.options, options);
				create(this);
			} else {
				state = $.data(this, 'userselect', {
					options: $.extend({}, $.fn.userselect.defaults, $.fn.userselect.parseOptions(this), options)
				});
				create(this);
			}
		});
	};
	
	
	$.fn.userselect.methods = {
			getTree: function(jq){
				return $(jq).find('.user_sel_tree');
			}
			
	};
	$.fn.userselect.parseOptions = function(target){
		var t = $(target);
		return $.extend({}, $.fn.combo.parseOptions(target), $.parser.parseOptions(target,[
		]));
	};
	
	
	$.fn.userselect.defaults = $.extend({}, $.fn.window.defaults, {
		selectedHandler: null,
		mutiSelect:true,
		treeRootId:null,
		title: '公共选择组件'
	});
	
	$.fn.userselect.constants = {
		dept:{
			treeUrl: contextPath + '/mvc/organization/org/service/orgtree'
		},
		role:{
			treeUrl: contextPath + '/mvc/organization/role/service/orgtree'
		},
		post:{
			treeUrl: contextPath + '/mvc/organization/post/service/posttree'
		},
		duty:{
			treeUrl: contextPath + '/mvc/organization/duty/service/dutytree'
		},
		categroy:{
			treeUrl: contextPath + '/mvc/organization/category/service/orgtree'
		},
		empPost:{
			treeUrl: contextPath + '/mvc/organization/emp/service/empInfoTree'
		}
	}
})(jQuery);


/**
 * griddialog - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php
 * 
 * Dependencies: window 列表对话框
 */
(function($){

	/**
	 * create the component
	 */
	
	function createCommon(){
		var opts = state.options;
		// 初始化选择窗口
		// 布局
		var layoutStr ='<div data-roles="mui-layout"  data-options="fit:true" class="griddialog_layout_grid" >'
		+'<div data-options="region:\'center\',title:\'列表\'" class="griddialog_grid">'
		+'<table class="griddialog_table"></table>'
		+'</div></div>';
		var target = $.topDialog({
		    title : opts.title,
		    content : layoutStr,
		    height: opts.height || 600,
		    width: opts.width || 830,
		    resizable: false,
			buttons:[{
				text:'保存',
				handler: function(){
					if(opts.selectedHandler && typeof(opts.selectedHandler) == 'function'){
						 var result = getResult(target);
							 opts.selectedHandler(result);
					}
					$.topDialog('close', target);
				}
			},{
				text:'关闭',
				handler:function(){
					$.topDialog('close', target);
				}
			}]
		});
		 
		 if(target){
		
				// 初始化查询区
				// 如果支持多选，则加载已选区
				if(!opts.singleSelect){
					target.find('.griddialog_layout_grid').layout('add',{
							region: 'south',   
						    height: 170,   
						    title: '已选列表',   
						    split: true,
						    content:'<table  class="griddialog_alreadyGrid_grid"><table>'

					});
					target.find('.griddialog_grid').panel({title:'待选列表'});
					alreadyGrid(target);
				}
				if(opts.queryParam!=null){
				var query = target.find('.griddialog_layout_grid').layout('add',{
							region: 'north',   
						    height: 117,   
						    title: '查询区',   
						    split: true,
						    content:getQuery(opts)
					});
				if(query){
					createQuery(target);
				}
			}
				// 初始化表
				creategrid(target);
				// 绑定事件
				bindEvent(target);
		 }


	}
	$.griddialog = function(options, param){
		if (typeof options == 'string'){
			var method = $.griddialog.methods[options];
			if (method){
				return method(this, param);
			} 
		}
		options = options || {};
		state = null;
		state =  {
				options: $.extend({}, $.griddialog.defaults, options)
			};
		createCommon(this);
	};
	
	function creategrid(target){
		var opts = state.options;
		if(!state.datagrid){
			var gridTarget = target.find('.griddialog_grid .griddialog_table',target);
			state.datagrid = gridTarget;
		}

					var gridopts = $.extend({}, opts.gridOpts, {
						columns:[structureColumn(target)],
						idField:opts.idField,
						rownumbers: true,
						striped: true, 
						url:opts.gridUrl,
						queryParams:opts.gridParam,
						fitColumns:true,
						fit:true,
						pagination:true,
						pageSize:10,
						unSelectAfterLoad:false,
						onLoadSuccess:function(data){
							if(!opts.singleSelect){
								if((opts.algridData||(state.aldatagrid.datagrid('getRows')))!=null){
									
								var aldata = state.aldatagrid?state.aldatagrid.datagrid('getRows'):opts.algridData.rows;
								for(var item in aldata){
									var d = aldata[item];
									var idField = d[opts.idField];
									state.datagrid.datagrid('selectRecord',idField);
									
								}
							}
								return false;
							}
						},
						onSelect:function(rowIndex, rowData){
							if(!opts.singleSelect){
								var idField = rowData[opts.idField];
								checkRow(idField,rowData);
							}else{
								var rows = state.datagrid.datagrid('getSelections');
								if(rows.length>1){
									state.datagrid.datagrid('clearSelections');
								    state.datagrid.datagrid('selectRow',rowIndex);
								}
						
							}
						},
						onSelectAll:function(rows){
							if(!opts.singleSelect){
								for(var item in rows){
									var row = rows[item];
									var idField = row[opts.idField];
									checkRow(idField,row);
								}
							}
							},
							onUnselect:function(rowIndex,rowData){
							if(!opts.singleSelect){
								var tidField = rowData[opts.idField];
								var alrows = state.aldatagrid.datagrid('getRows');
								for(var i in alrows){
									var d = alrows[i];
									var  idField =d[opts.idField];
									if(tidField==idField){
										state.aldatagrid.datagrid('deleteRow',state.aldatagrid.datagrid('getRowIndex',d));
										return false;
									}
								}	
							}
							},
							onUnselectAll:function(rows){
								if(!opts.singleSelect){
									for(var item =0;item<rows.length;item++){
										state.aldatagrid.datagrid('selectRecord',rows[item][opts.idField]);
										var select = state.aldatagrid.datagrid('getSelected');
										if(select!=null){
											state.aldatagrid.datagrid('deleteRow',state.aldatagrid.datagrid('getRowIndex',select));
										}
									}
								}
							}
						});
					state.datagrid.datagrid(gridopts);
					
	}
	
	function checkRow(idField,row){
		state.aldatagrid.datagrid('unselectAll');
		state.aldatagrid.datagrid('selectRecord',idField);
		if(state.aldatagrid.datagrid('getSelected')==null){
			state.aldatagrid.datagrid('appendRow',row);
		}
		state.aldatagrid.datagrid('unselectAll');
	}
	
	
	// 构建列表行
	function structureColumn(target){
		var opts = state.options;
		var columns=[];
		if(!opts.singleSelect){
			columns.push({field:'checkbox',width:50,checkbox:true});
		}
		for(var temp in opts.columns){
			var column = opts.columns[temp];
			var c = ',width:100,title:\''+temp+'\'';
			for(var item in column){
				if(item=='lookupType'||item=='lookupCode'){
					c+=','+item+':\''+column[item]+'\'';
					c+=',formatter:function(value,row,index){var lookup = lookupUtils.getLookup("'+column[item]+'");if(lookup){lookup=lookup.attributes.children;'
					+'for(var item in lookup){if(lookup[item].code==value){return lookup[item].name;}}}}';
				}else{
					if(typeof column[item]=='object'||typeof column[item]=='boolean'||typeof column[item]=='function'||typeof column[item]=='number'){
						c+=','+item+':'+column[item];
					}else{
						c+=','+item+':\''+column[item]+'\'';
					}	
				}
			}
			c = '{'+c.substring(1)+'}';
			eval('var col='+c);
		   columns.push(col);
		}
	return columns;
}
	
	// 已选区
	function alreadyGrid(target){
		var opts = state.options;
			// 给待选取添加单击表格事件
			if(!state.aldatagrid){
				state.aldatagrid = target.find('.griddialog_alreadyGrid_grid',target);
			}
			var columns = structureColumn(target);
			if(!opts.singleSelect){
				columns.splice(0,1);
			}
			var algridopts = $.extend({}, opts.algridOpts, {
				columns:[columns],
				fitColumns:true,
				fit:true,
				idField:opts.idField,
				onClickRow:function(rowIndex, rowData){
//					var  idField = eval('rowData.'+opts.idField);
					var idField = rowData[opts.idField];
					var rows = state.datagrid.datagrid('getSelections');
					state.aldatagrid.datagrid('deleteRow',state.aldatagrid.datagrid('getRowIndex',rowData));
					for(var item in rows){
						var data = rows[item];
						if(data[opts.idField]==idField){
							var getrow = state.datagrid.datagrid('getRowIndex',data);
							if(getrow!=-1){
								state.datagrid.datagrid('unselectRow',getrow);
							}else{
								rows.splice(item,1);
								state.datagrid.datagrid('getChecked').splice(item,1);
							}
						}
					}
					
				}	
			});
			state.aldatagrid.datagrid(algridopts);
			if(opts.algridData!=null){
				state.aldatagrid.datagrid('loadData',opts.algridData);
			}
	}
	
	function getQuery(opts){
		var str = '<form class="griddialog_form"><input type="hidden"/><table style="margin:0 auto"><tr>';
		var query =  opts.queryParam;
		var count = 0;
		var countquery = 0;
		for(var item in query){
			if( typeof query[item]=='string'){
				str+='<td><label for="'+query[item]+'">'+item+':</label></td><td><input type="text" name="'+query[item]+'"/></td>'
			}
			if(typeof query[item]=='object'){
				var param = query[item];
				str+='<td><label for="'+param.name+'">'+item+':</label></td><td>'
				+'<input name='+param.name+' data-roles="mui-'+param.type+'"';
				var s =' data-options="';
					for(var p in param ){
							if(p=='name' || p=='type'){
									continue;
								}else{
									if(typeof param[p]=="boolean"||typeof param[p]=="function"){
										s+=p+':'+param[p]+',';
									}else{
										s+=p+':\''+param[p]+'\',';
									}
									}
						}
						if(s!=' data-options="'){
								s = s.substring(0,s.length-1);
								str+=s+'"';
							}
				str+='/></td>';
				}
			count++;
			countquery++;
			if(count==2){
				str+='</tr><tr>';
				count=0;
			}
		}
		str+='</tr>';
		str+='<tr>'	 
		+'<td colspan="2" style="text-align:right;" >'
		+'<a class="griddialog_query" href="#" data-roles="mui-linkbutton" data-options="iconCls:\'icon-search\'">查询</a>'
		+'</td>'
		+'<td colspan="2" style="text-align:left">'
		+'	<a class="griddialog_queryreset" href="#"  data-roles="mui-linkbutton" data-options="iconCls:\'icon-reload\'">重置</a>'
		+'</td>'
		+'</tr></table></form>';
		return str;
	}
	// 查询区
	function createQuery(target){
		var opts = state.options;
	target.find('.griddialog_query').on('click',function(){
			var gridParam = opts.gridParam;
			var params = target.find('.griddialog_form').form('getRecord');
			$.extend(params,params,gridParam);
			state.datagrid.datagrid('load',params);
		});
	target.find('.griddialog_queryreset').on('click',function(){
		target.find('.griddialog_form').form('reset');
		});
	target.find('.griddialog_layout_grid').layout('collapse','north');
	}

	function bindEvent(target){
		var opts = state.options;
	}

	function getResult(target){

		var opts = state.options;
		if(!opts.singleSelect){
			return state.aldatagrid.datagrid('getRows');
		}else{
			return state.datagrid.datagrid('getSelections');
		}
		}

	
	$.griddialog.methods = {			
	};
	$.griddialog.parseOptions = function(target){
		var t = $(target);
		return $.extend({}, $.combo.parseOptions(target), $.parser.parseOptions(target,[
		]));
	};
	
	$.griddialog.defaults = {
		title:'列表对话框',
		selectedHandler:null,
		gridParam:{},// grid参数
		idField:null,
		gridUrl:null,
		algridUrl:null,
		singleSelect:true,
		hidden:null,
		queryParam:null,
		columns:{},
		algridParam:{},
		resizable:false,
		algridData:null
	};
})(jQuery);



/**
 * treegriddialog - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php
 * 
 * Dependencies: window 树列表对话框
 */
(function($){

	/**
	 * create the component
	 */
	
	function createCommon(){
		var opts = state.options;
		// 初始化选择窗口

		// 布局
		var layoutStr ='<div data-roles="mui-layout"  data-options="border:false,fit:true" class="treegriddialog_border" >'
		+'<div data-options="region:\'west\',title:\'树\',collapsed:false" style="width:150px;" >'
		+'<ul class="treegriddialog_tree"></ul>'
		+'</div>'
		+'<div data-options="region:\'center\',border:false" class="treegriddialog_layout_center">'
		+'<div data-roles="mui-layout" data-options="fit:true" class="treegriddialog_layout_grid">'
		+'<div data-options="region:\'center\',title:\'列表\'" class="treegriddialog_grid">'
		+'<table class="treegriddialog_table"></table>'
		+'</div>';
		layoutStr+='</div></div></div>';
		 var target = $.topDialog({
		    title : opts.title,
		    content : layoutStr,
		    height: opts.height || 600,
		    width: opts.width || 830,
		    resizable:opts.resizable || false,
			buttons:[{
				text:'保存',
				handler: function(){
					if(opts.selectedHandler && typeof(opts.selectedHandler) == 'function'){
						 var result = getResult(target);
							 opts.selectedHandler(result);
					}
					$.topDialog('close', target);
				}
			},{
				text:'关闭',
				handler:function(){
					$.topDialog('close', target);
				}
			}]
		});
		 
		 if(target){
		    	createTree(target);
				// 初始化表
				creategrid(target);
				
				bindEvent(target);
			
				
				// 如果支持多选，则加载已选区
				if(!opts.singleSelect){
					target.find('.treegriddialog_layout_grid').layout('add',{
						 region: 'south',   
						    height: 200,   
						    title: '已选列表',   
						    split: true,
						    content:'<table  class="treegriddialog_alreadyGrid_grid"></table>'

					});
					target.find('.treegriddialog_grid').panel({title:'待选列表'});
					alreadyGrid(target);
				}
				if(opts.queryParam!=null){
				var query = target.find('.treegriddialog_layout_grid').layout('add',{
						 region: 'north',   
						    height: 127,   
						    title: '查询区',   
						    split: true,
						    content:getQuery(opts)
					});
				if(query){
					createQuery(target);
				}
			}
	}
		// 初始化树
		
	}
	$.treegriddialog = function(options, param){
		if (typeof options == 'string'){
			var method = $.treegriddialog.methods[options];
			if (method){
				return method(this, param);
			} 
		}
		options = options || {};
		state = null;
		state =  {
				options: $.extend({}, $.treegriddialog.defaults, options)
			};
		createCommon(this);
	};
	function createTree(target){
		var opts = state.options;
		if(!state.tree){
			var treeTarget = target.find('ul.treegriddialog_tree', target);
			state.tree = treeTarget;
		}
		// 处理树参数
		var url = '';
		for(var item in opts.treeParam){
			url+='&'+item+'='+opts.treeParam[item];
		}
		url= opts.treeUrl+'?'+(url!=''?url.substring(1):url);
					var treeopts = $.extend({}, opts.treeOpts, {
						url:url,
						onClick:function(node){
							refreshGrid(node,target);
						}
					});
					state.tree.tree(treeopts);
	}

	function creategrid(target){
		var opts = state.options;
		if(!state.datagrid){
			var gridTarget = target.find('.treegriddialog_grid .treegriddialog_table',target);
			state.datagrid = gridTarget;
		}
		var param  = opts.gridParam;	
		var url = '{';
		for(var item in param){
			var p =null;
			if(param[item]=='id'){
				p = opts.root.id;
			}
			else if(param[item=='text']){
				p = opts.root.text;
			}else{
				p = param[item];
			}
			url+= item+':"'+p+'",';
		}
			if(url.length>1){
				url=url.substring(0,url.length-1);
			}
			url+='}';
			eval('var data='+url);
					var gridopts = $.extend({}, opts.gridOpts, {
						columns:[structureColumn(target)],
						url:opts.gridUrl,
						queryParams:data,
						rownumbers: true,
						striped: true, 
						fitColumns:true,
						fit:true,
						pagination:true,
						pageSize:10,
						idField:opts.idField,
						unSelectAfterLoad:false,
						onLoadSuccess:function(){
							if(!opts.singleSelect){
								if((opts.algridData||(state.aldatagrid.datagrid('getRows')))!=null){
									
								var aldata = state.aldatagrid?state.aldatagrid.datagrid('getRows'):opts.algridData.rows;
								for(var item in aldata){
									var d = aldata[item];
									var  idField = eval('d.'+opts.idField);
									state.datagrid.datagrid('selectRecord',idField);
									
								}
							}
								return false;
							}
//							if(!opts.singleSelect){
//								
//								var selected = state.datagrid.datagrid('getSelections');
//								for(var item =0;item<selected.length;item++){
//									state.datagrid.datagrid('unselectRow',item);
//									
//								}
//								if(opts.algridData!=null){
//								var aldata = opts.algridData.rows;
//								for(var item in aldata){
//									var d = aldata[item];
//									var  idField = eval('d.'+opts.idField);
//									state.datagrid.datagrid('selectRecord',idField);
//								}
//							  }
//							}
						},
						onSelect:function(rowIndex, rowData){
							if(!opts.singleSelect){
								var  idField = eval('rowData.'+opts.idField);
								checkRow(idField,rowData);
							}else{
								var rows = state.datagrid.datagrid('getSelections');
								if(rows.length>1){
									state.datagrid.datagrid('clearSelections');
								    state.datagrid.datagrid('selectRow',rowIndex);
								}
							}
						},
						onSelectAll:function(rows){
							if(!opts.singleSelect){
								for(var item in rows){
									var row = rows[item];
									var  idField = eval('row.'+opts.idField);
									checkRow(idField,row);
								}
							}
							},
							onUnselect:function(rowIndex,rowData){
							if(!opts.singleSelect){
								var tidField = eval('rowData.'+opts.idField);
								var alrows = state.aldatagrid.datagrid('getRows');
								for(var i in alrows){
									var d = alrows[i];
									var  idField = eval('d.'+opts.idField);
									if(tidField==idField){
										state.aldatagrid.datagrid('deleteRow',state.aldatagrid.datagrid('getRowIndex',d));
										return false;
									}
								}	
							}
							},
							onUnselectAll:function(rows){
								if(!opts.singleSelect){
									for(var item =0;item<rows.length;item++){
										state.aldatagrid.datagrid('selectRecord',eval('rows[item].'+opts.idField));
										var select = state.aldatagrid.datagrid('getSelected');
										if(select!=null){
											state.aldatagrid.datagrid('deleteRow',state.aldatagrid.datagrid('getRowIndex',select));
										}
									}
							}
							}
						});
					state.datagrid.datagrid(gridopts);
					
	}
	
	function checkRow(idField,row){
		state.aldatagrid.datagrid('unselectAll');
		state.aldatagrid.datagrid('selectRecord',idField);
	if(state.aldatagrid.datagrid('getSelected')==null){
		state.aldatagrid.datagrid('appendRow',row);
	}
	state.aldatagrid.datagrid('unselectAll');
	}
	
	
	// 构建列表行
	function structureColumn(target){
		var opts = state.options;
		var columns=[];
		if(!opts.singleSelect){
		columns.push({field:'checkbox',width:50,checkbox:true});
		}
		for(var temp in opts.columns){
			var column = opts.columns[temp];
			var c = ',width:100,title:\''+temp+'\'';
			for(var item in column){
				if(item=='lookupType'||item=='lookupCode'){
					c+=','+item+':\''+column[item]+'\'';
					c+=',formatter:function(value,row,index){var lookup = lookupUtils.getLookup("'+column[item]+'");if(lookup){lookup=lookup.attributes.children;'
					+'for(var item in lookup){if(lookup[item].code==value){return lookup[item].name;}}}}';
				}else{
					if(typeof column[item]=='object'||typeof column[item]=='boolean'||typeof column[item]=='function'||typeof column[item]=='number'){
						c+=','+item+':'+column[item];
					}else{
						c+=','+item+':\''+column[item]+'\'';
					}	
				}
			}
			c = '{'+c.substring(1)+'}';
			eval('col='+c);
		   columns.push(col);
		}
	return columns;
}
	// 刷新表格
	function refreshGrid(node,target){
		var opts = state.options;
		if(opts.gridUrl){
			var param  = opts.gridParam;	
			var url = '{';
			for(var item in param){
				var p =null;
				if(param[item]=='id'){
					p = node.id;
				}
				else if(param[item=='text']){
					p = node.text;
				}else{
					p = param[item];
				}
				url+= item+':\''+p+'\',';
			}
			if(url.length>1){
				url = url.substring(0,url.length-1);
			}
			url+='}';
			eval('var data='+url);
			state.datagrid.datagrid('load',data);
		}
	}
	
	// 已选区
	function alreadyGrid(target){
		var opts = state.options;
			// 给待选取添加单击表格事件
			if(!state.aldatagrid){
				state.aldatagrid = target.find('.treegriddialog_alreadyGrid_grid',target);
			}
			var columns = structureColumn(target);
			columns.splice(0,1);
			var algridopts = $.extend({}, opts.algridOpts, {
				columns:[columns],
				fitColumns:true,
				fit:true,
				idField:opts.idField,
				onClickRow:function(rowIndex, rowData){
					var  idField = eval('rowData.'+opts.idField);
					var rows = state.datagrid.datagrid('getSelections');
					state.aldatagrid.datagrid('deleteRow',state.aldatagrid.datagrid('getRowIndex',rowData));
					for(var item in rows){
						var data = rows[item];
						if(eval('data.'+opts.idField)==idField){
							var getrow = state.datagrid.datagrid('getRowIndex',data);
							if(getrow!=-1){
								state.datagrid.datagrid('uncheckRow',getrow);
							}else{
								rows.splice(item,1);
								state.datagrid.datagrid('getChecked').splice(item,1);
							}
							}
					}
				}	
			});
			state.aldatagrid.datagrid(algridopts);
			if(opts.algridData!=null){
				state.aldatagrid.datagrid('loadData',opts.algridData);
			}
	}
	
	function getQuery(opts){
		var str = '<form class="treegriddialog_form"><input type="hidden"/><table style="margin:0 auto">';
		str+='<tr>';
		var query =  opts.queryParam;
		var count = 0;
		var countquery = 0;
		for(var item in query){
			if( typeof query[item]=='string'){
				str+='<td style="width:90px;"><label for="'+query[item]+'">'+item+':</label></td><td style="width:200px;"><input type="text" name="'+query[item]+'"/></td>'
			}
			if(typeof query[item]=='object'){
				var param = query[item];
				str+='<td style="width:90px;"><label for="'+param.name+'">'+item+':</label></td><td style="width:200px;">'
				+'<input name='+param.name+' data-roles="mui-'+param.type+'"';
				var s =' data-options="';
					for(var p in param ){
							if(p=='name' || p=='type'){
									continue;
								}else{
									if(typeof param[p]=="boolean"||typeof param[p]=="function"){
										s+=p+':'+param[p]+',';
									}else{
										s+=p+':\''+param[p]+'\',';
									}
									}
						}
						if(s!=' data-options="'){
								s = s.substring(0,s.length-1);
								str+=s+'"';
							}
				str+='/></td>';
				}
			count++;
			countquery++;
			if(count==2){
				str+='</tr><tr>';
				count=0;
			}
		}
		str+='</tr>';
		str+='<tr style="50%;">'	 
		+'<td colspan="2" style="text-align:center;" >'
		+'<a class="treegriddialog_query" href="#" data-roles="mui-linkbutton" data-options="iconCls:\'icon-search\'">查询</a>'
		+'</td>'
		+'<td colspan="2" style="text-align:center">'
		+'	<a class="treegriddialog_queryreset" href="#"  data-roles="mui-linkbutton" data-options="iconCls:\'icon-reload\'">重置</a>'
		+'</td>'
		+'</tr></table></form>';
		return str;
	}
	// 查询区
	function createQuery(target){
		var opts = state.options;
	target.find('.treegriddialog_query').on('click',function(){
		if(opts.gridUrl){
			var root = opts.root;
			if(target.find('.treegriddialog_tree').tree('getSelected')!=null){
				root = target.find('.treegriddialog_tree').tree('getSelected');
			}
			var param  = opts.gridParam;	
			var url = '{';
			for(var item in param){
				if(param[item]=='id'){
					url+= item+':\''+root.id+'\',';
				}
				else if(param[item=='text']){
					url+= item+':\''+root.text+'\',';
				}else{
					url+=item+':\''+param[item]+'\',';
				}
			}
			if(url.length>1){
				url=url.substring(0,url.length-1);
			}
			url+='}';
			eval('var data='+url);
		}
			var params = target.find('.treegriddialog_form').form('getRecord');
			if(data){
				$.extend(params,params,data);
			}
			state.datagrid.datagrid('load',params);
		});
	target.find('.treegriddialog_queryreset').on('click',function(){
		target.find('.treegriddialog_form').form('reset');
		});
	target.find('.treegriddialog_layout_grid').layout('collapse','north');
	}

	function bindEvent(target){
		var opts = state.options;
	}

	function getResult(target){

		var opts = state.options;
		if(!opts.singleSelect){
			return state.aldatagrid.datagrid('getRows');
		}else{
			return state.datagrid.datagrid('getSelections');
		}
		}
	
	$.treegriddialog.methods = {			
	};
	$.treegriddialog.parseOptions = function(target){
		var t = target;
		return $.extend({}, $.combo.parseOptions(target), $.parser.parseOptions(target,[
		]));
	};
	
	
	$.treegriddialog.defaults = {
		title:'树列表对话框',
		selectedHandler:null,
		gridParam:null,// grid参数
		treeParam:null,// 树参数
		open:false,
		treeUrl:null,
		gridUrl:null,
		root:{id:null,text:'根节点'},
		singleSelect:true,
		hidden:null,
		queryParam:null,
		columns:{},
		algridUrl:null,
		algridParam:{},
		algridData:null,
		idField:null
	};
})(jQuery);




/**
 * importbutton - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php
 */
(function($){
	
	function createButton(target) {
		var state = $.data(target, 'importbutton');
		var opts = state.options;
		
		$(target).unbind('click').bind('click', createUploadWin);
		$(target).linkbutton(opts);
		
		
		
	}
	
	function createUploadWin(){
		var target = this;
		var state = $.data(target, 'importbutton');
		var opts = state.options;
		if(!state.uploadWin){
			var uploadWin = $('<div>').appendTo('body');
			var uploadButton = $('<a >下载模板</a>').appendTo(uploadWin).linkbutton({
				
				"iconCls":'icon-add',"plain":true
			});
			var uploadForm = $('<form class="comp_importForm" method="post" enctype="multipart/form-data"><input type="hidden" name="configId" /><label for="excel">选择文件:</label><input name="excel" type="file"/></form>').appendTo(uploadWin)
			state.uploadWin = uploadWin;
			state.downloadBtn = uploadButton;
		}

		state.uploadWin.dialog({   
		    title: $(this).text()||'数据导入',   
		    width: 400,   
		    height: 200,   
		    closed: false,   
		    modal: true,
		    buttons:[{
				text:'导入',
				handler:function(){
					//top. maskLoad('正在导入，请稍候。。。');
					maskLoad('正在导入，请稍候。。。');
					state.uploadWin.find('form [name="configId"]').val(opts.configId);
					state.uploadWin.find('form').form('submit', {   
					    url:contextPath+'/mvc/impexp/imp/service/import',   
					    onSubmit: function(){
					        
					    },
					    success:function(data){
					    	//top.maskDisplayLoad();
					    	   maskDisplayLoad();
					    	var msg = $.parseJSON(data);
					    	_errorDownload = function (errorId){
					    	     top.location = contextPath+'/mvc/impexp/imp/service/downloadError/'+errorId;
					    	    }
					    	function callSuccess(success){
					    		if(opts.onImpSuccess &&  typeof opts.onImpSuccess == 'function'){
						    		opts.onImpSuccess.call(state.uploadWin,success,msg);
						    	}
					    	}
				    		switch (msg.type) {
					    		case 'configError':
									$.messager.alert('警告',msg.message,'',function(){
										callSuccess('configError');
									});
									break;
					    		case 'error':
					    			var message = '导入时出现异常，其中'+msg.successCount+
					    			'条导入成功，'+msg.errorCount+'条导入失败，详细情况请'+
					    			'<a   href="#" onclick="_errorDownload(\''+msg.errorId+'\')">下载错误信息</a>。';
									$.messager.alert('警告',message,'',function(){
										callSuccess('error');
									});  
									break;
					    		case 'ok':
					    			$.messager.alert('提示',msg.message,'',function(){
										callSuccess('ok');
										//指定刷新的列表
										if($(opts.gridRef) && $(opts.gridRef).length>0){
											$(opts.gridRef).datagrid('reload');
										}
										state.uploadWin.find('form').form('reset');
										state.uploadWin.dialog('close');
									});
									break;
								default:
									break;
					    	}
					    }   
					});  

					
				}
			},{
				text:'取消',
				handler:function(){
					state.uploadWin.dialog('close');
				}
			}]
		});  
		
		state.downloadBtn.unbind('click').bind('click',function(){
			top.location = contextPath+'/mvc/impexp/imp/service/download?name='+opts.configId;
		})
		
	}
	$.fn.importbutton = function(options, param){
		if (typeof options == 'string'){
			return $.fn.importbutton.methods[options](this, param);
		}
		
		options = options || {};
		return this.each(function(){
			var state = $.data(this, 'importbutton');
			if (state){
				$.extend(state.options, options);
			} else {
				$.data(this, 'importbutton', {
					options: $.extend({}, $.fn.importbutton.defaults, $.fn.importbutton.parseOptions(this), options)
				});
			}
			createButton(this);
		});
	};
	
	$.fn.importbutton.methods = {
		options: function(jq){
			return $.data(jq[0], 'importbutton').options;
		}
	};
	
	$.fn.importbutton.parseOptions = function(target){
		var t = $(target);
		return $.extend({}, $.parser.parseOptions(target, []));
	};
	
	$.fn.importbutton.defaults = {
			configId:'',
			onImpSuccess:function(arg1,arg2,arg3){}
			
	};
	
})(jQuery);

/**
 * exportbutton - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php
 */
(function($){
	
	function createButton(target) {
		var state = $.data(target, 'exportbutton');
		var opts = state.options;
		$(target).unbind('click').bind('click', exports);
		$(target).linkbutton(opts);
	}
	
	function exports(){
		//top. maskLoad('正在导出，请稍候。。。');
		maskLoad('正在导出，请稍候。。。');
		var target = this;
		var state = $.data(target, 'exportbutton');
		var opts = state.options;
		var queryParams,columns=[];
		if(opts.gridRef){
			if($(opts.gridRef) && $(opts.gridRef).length>0){
				queryParams =  $(opts.gridRef).datagrid('options').queryParams;
				if(opts.onLineExportQueryParmas){
				queryParams =   $.extend({},queryParams,{'exportSql':opts.onLineExportQueryParmas});
				}
				if(opts.isExportBpm){
					$.ajax({
						type: 'POST',
						url: contextPath + "/mvc/bpm/procitem/service/getItemByProcId",
						data:{'procId':queryParams['procId']},
						async: false,
						success: function(privDatas) {
							queryParams['procManaPriv'] = privDatas.procManaPriv;
							queryParams['deptReadPriv'] = privDatas.deptReadPriv;
							queryParams['deptReadProcIds'] = privDatas.deptReadProcIds;
							queryParams['deptId'] = privDatas.deptId;
							if(sessionUtils){
								queryParams['userId'] = sessionUtils.getUserCode();								
							}
						}
					});
				}
				columns = $(opts.gridRef).datagrid('options').columns;
			}
		}
		var lookups = [];
	 
		var k = 0;
		for(var i = 0 ; i< columns.length; i++){
			for(var j=0; j< columns[0].length; j++){
				if(columns[i][j].lookupType){
					
					lookups[k] = {};
					lookups[k].lookupType =columns[i][j].lookupType;
					lookups[k].field =columns[i][j].field;
					k++;
				}
				
			}
			
		} 
		queryParams.serviceMethod = opts.serviceMethod?opts.serviceMethod:'';
		queryParams.template = opts.template?opts.template:'';
		queryParams.columns = lookups;
		queryParams.handlerBean = opts.handlerBean||'';
	 
		$.ajax({
			url: contextPath +'/mvc/impexp/exp/service/export',
			data:queryParams,
			type:'post',
			success: function(result){
				var targetPath = result.targetPath;
				
				var outFileName = opts.outFileName?opts.outFileName:'exports.xls';
				location.href = contextPath +'/mvc/impexp/exp/service/download?targetPath='+targetPath+'&outFileName='+outFileName;
				//top.maskDisplayLoad();
				maskDisplayLoad();
			}
		});
	}
	

	$.fn.exportbutton = function(options, param){
		if (typeof options == 'string'){
			return $.fn.exportbutton.methods[options](this, param);
		}
		
		options = options || {};
		return this.each(function(){
			var state = $.data(this, 'exportbutton');
			if (state){
				$.extend(state.options, options);
			} else {
				$.data(this, 'exportbutton', {
					options: $.extend({}, $.fn.exportbutton.defaults, $.fn.exportbutton.parseOptions(this), options)
				});
			}
			createButton(this);
		});
	};
	
	$.fn.exportbutton.methods = {
		options: function(jq){
			return $.data(jq[0], 'exportbutton').options;
		}
	};
	
	$.fn.exportbutton.parseOptions = function(target){
		var t = $(target);
		return $.extend({}, $.parser.parseOptions(target, []));
	};
	
	$.fn.exportbutton.defaults = {
			isExportBpm:false,//是否导出的是流程列表
			handlerBean:null
	};
	
})(jQuery);






/**
 * checkbox - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php checkbox
 */


(function($){
	
	function createCheckBox(target) {
		var state = $.data(target, 'checkbox');
		var opts = state.options;
		var texts = opts.text;
		var values = opts.value;
		var isReadOnly = false;
		var isDisabled = false;
		if(opts.lookupcode){
			opts.lookupType = opts.lookupcode;
		}else{
			opts.lookupcode = opts.lookupType;
		}
		$(target).hide();
		if(!$(target).next().is('div.addcheckbox')){
			$(target).after('<div class="addcheckbox"></div>');
		}else{
			$(target).next().empty();
		}
		if($(target).attr('readonly')=='readonly'){isReadOnly=true;};
		if($(target).attr('disabled')=='disabled'){isDisabled=true;};
		if(lookupUtils || ('undefined' != typeof(texts) && 'undefined' != typeof(values))) {
			if(opts.lookupcode&&null != (s=lookupUtils.getLookupEnable(opts.lookupcode))) {
				for (var o  in s.children){
					value =s.children[o].attributes.code; 	
					name =s.children[o].attributes.name;
//					if(!opts.checked){
//						opts.checked = s.children[0].attributes.code; 	
//					}
					var html = '<input  type="checkbox" name="'+$(target).attr('name')+'" ';
					if(opts.checked != null) {
						if($.inArray(value,opts.checked.split(","))!=-1){
							html+=' checked="checked"';
						}
					}
					if($(target).attr('value') != null) {
						if($.inArray(value+'',$(target).attr('value').split(','))!=-1){
							html+=' checked="checked" ';
						}
					}
					html+='  value="'+value+'">'+name+'</input>';
						$(target).next('.addcheckbox').append(html);
				}
			} 
			if('undefined' != typeof(texts) && 'undefined' != typeof(values)) {
				var texts = texts.split(",");
				var values = values.split(",");
				for ( var int = 0; int < texts.length; int++) {
					var html = '<input  type="checkbox" name="'+$(target).attr('name')+'" ';
					if(opts.checked != null) {
						if($.inArray(values[int],opts.checked.split(","))!=-1){
							html+=' checked="checked"';
						}
					}
					if($(target).attr('value') != null) {
						if($.inArray(values[int]+'',$(target).attr('value').split(','))!=-1){
							html+=' checked="checked" ';
						}
					}
					html+='  value="'+values[int]+'">'+texts[int]+'</input>';
						$(target).next('.addcheckbox').append(html);
//					if(0 == int) {
//						$(target).next('.addcheckbox').append('<input  type="checkbox" name="'+$(target).attr('name')+'"  value="'+values[int]+'" checked="checked">'+texts[int]+'</input>');
//					} else {
//						$(target).next('.addcheckbox').append('<input  type="checkbox" name="'+$(target).attr('name')+'"  value="'+values[int]+'">'+texts[int]+'</input>');
//					}
				}
			}
			//2014-11-14冯超  使组件支持url 及data
			else if(opts.valueField&&opts.textField){
				var param = {};
				if(opts.onBeforeLoad.call(target,param)==false){return}
				if(!$.isEmptyObject(opts.queryParams)){
					param = opts.queryParams;
				}
				if(opts.url&&opts.url!=''){
					$.ajax({
						url:opts.url,
						type:'post',
						data:param,
						async:false,
						success:function(data){
							if(data==null||data==''){return}
//							if(data[0]&&!opts.checked){
//								opts.checked = data[0][opts.valueField];
//							}
							for(var item in data){
								var html = '<input  type="checkbox" name="'+$(target).attr('name')+'" ';
								if(opts.checked != null) {
									if($.inArray(data[item][opts.valueField], opts.checked.split(","))!=-1){
										html+=' checked="checked"';
									}
								}
								if($(target).attr('value') != null) {
									if($.inArray(data[item][opts.valueField]+'',$(target).attr('value').split(','))!=-1){
										html+=' checked="checked" ';
									}
								}
								html+='  value="'+data[item][opts.valueField]+'">'+data[item][opts.textField]+'</input>';
									$(target).next('.addcheckbox').append(html);
							}
						}
					})
				}else if(opts.data){
					for(var item in opts.data){
						var html = '<input  type="checkbox" name="'+$(target).attr('name')+'" ';
						if($(target).attr('value') != null) {
							if($.inArray(opts.data[item][opts.valueField]+'',$(target).attr('value').split(','))!=-1){
								html+=' checked="checked" ';
							}
						}
						if(opts.checked != null) {
							if($.inArray(opts.data[item][opts.valueField], opts.checked.split(","))!=-1){
								html+=' checked="checked"';
							}
						}
						html+=' value="'+opts.data[item][opts.valueField]+'">'+opts.data[item][opts.textField]+'</input>';
						$(target).next('.addcheckbox').append(html);
						
//						if(!!opts.data[item]['checked']){
//							$(target).next('.addcheckbox').find(':checkbox:last').attr('checked','checked');
//						}
					}
				}
			} 
			if(isReadOnly){//如果是只读，将未选中的设置为disabled
				$(target).next('.addcheckbox').find(':checkbox').not(':checked').attr('disabled','disabled');
			}
			if(isDisabled){//如果是禁用，将所有的选项都设置为disabled
				$(target).next('.addcheckbox').find(':checkbox').attr('disabled','disabled');
			}
		bindEvent(target);
	}else {
		$(target).next('.addcheckbox').append('<input  type="checkbox" name="'+$(target).attr('name')+'"></input>');
	}
	}
	//2014-11-12 冯超 为radio添加点击事件
	function bindEvent(target){
		var state = $.data(target, 'checkbox');
		var opts = state.options;
		$(target).next('.addcheckbox').find('input[type="checkbox"]').unbind('click').bind('click',function(e){
			validate(target);
			opts.onClick.call(target,$(this).val());
		});
	}

	//添加checkbox必填校验
	function validate(target){
		if ($.fn.validatebox){
			var opts = $.data(target, 'checkbox')?$.data(target, 'checkbox').options:target.checkbox('options');
			if(opts.required){
				var box = $(target).next();
				value = box.find('input:checked').val();
				if(value == ''||value == undefined){
					box.addClass('validatebox-invalid');
					box.tooltip({
						position:'right',
						content:'该输入项为必选项',
						onShow:function(){
							$(this).tooltip('tip').css({
								backgroundColor:'rgb(255, 255, 204)',
								borderColor:'rgb(204, 153, 51)'
							});
						}
					}).tooltip('show');
				}else{
					box.removeClass('validatebox-invalid');
					if(box.tooltip){
						box.tooltip('destroy');
					}
				}
			}
		}
	}
	
	$.fn.checkbox = function(options, param){
		if (typeof options == 'string'){
			return $.fn.checkbox.methods[options](this, param);
		}
		
		options = options || {};
		return this.each(function(){
			var state = $.data(this, 'checkbox');
			if (state){
				$.extend(state.options, options);
			} else {
				$.data(this, 'checkbox', {
					options: $.extend({}, $.fn.checkbox.defaults, $.fn.checkbox.parseOptions(this), options)
				});
			}
			createCheckBox(this);
			validate(this);
		});
	};
	
	function _setValue(target,value){
		var vals = [];
		if(typeof value =='string'){
			if(value!=null||value!=''){
				vals = value.split(',');
			}
		}else if($.isArray(value)){
			vals = value;
		}else{
			vals = [value];
		}
		var next = target.next('.addcheckbox');
		var isReadonly = target.attr('readonly')=='readonly'?true:false;
		if(isReadonly){
			next.find(':checkbox').removeAttr('disabled');
			next.find(':checkbox').removeAttr('checked');
		}
		for(var i in vals){
			var checked = next.find('input[value="'+vals[i]+'"]:checkbox');
			if(checked.length>0){
				checked._propAttr('checked',true);
			}
		}
	
		if(isReadonly){
			next.find(':checkbox').not(':checked').attr('disabled','disabled');
			next.find(':checkbox').unbind('click').bind('click',function(){return false});
		}
	}
	//冯超 2015-2-11
	function _readonly(target){
		var next = target.next('.addcheckbox');
		next.find(':checkbox').not(':checked').attr('disabled','disabled');
		next.find(':checkbox').unbind('click').bind('click',function(){return false});
	}
	
	function _unReadonly(target){
		var next = target.next('.addcheckbox');
		next.find(':checkbox').removeAttr('disabled');
		next.find(':checkbox').unbind('click');
	}
	//冯超 2015-2-11
	function _disabled(target){
		var next = target.next('.addcheckbox');
		next.find(':checkbox').attr('disabled','disabled');
		next.find(':checkbox').unbind('click').bind('click',function(){return false});
	}
	
	function _unDisabled(target){
		var next = target.next('.addcheckbox');
		next.find(':checkbox').removeAttr('disabled');
		next.find(':checkbox').unbind('click');
	}
	
	$.fn.checkbox.methods = {
		options: function(jq){
			return $.data(jq[0], 'checkbox').options;
		},
		setValue:function(jq,value){
			_setValue(jq,value);
		},
		readonly:function(jq){//添加只读
			_readonly(jq);
		},
		unReadonly:function(jq){//取消只读
			_unReadonly(jq);
		},
		disabled:function(jq){
			_disabled(jq);
		},
		unDisabled:function(jq){
			_unDisabled(jq);
		},
		validate:function(jq){
			validate(jq);
		}
	};
	
	$.fn.checkbox.parseOptions = function(target){
		var t = $(target);
		return $.extend({}, $.parser.parseOptions(target, []));
	};
	
	$.fn.checkbox.defaults = {
			onClick: function(param){},
			queryParams:{},
			onBeforeLoad:function(param){}
	};
	
})(jQuery);





/**
 * radio - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php checkbox
 */


(function($){
	
	function createRadio(target) {
		var state = $.data(target, 'radio');
		var opts = state.options;
		var texts = opts.text;
		var values = opts.value;
		var isReadOnly = false;
		var isDisabled = false;
		if(opts.lookupcode){
			opts.lookupType = opts.lookupcode;
		}else{
			opts.lookupcode = opts.lookupType;
		}
		$(target).hide();
		if(!$(target).next().is('div.addradio')){
			$(target).after('<div class="addradio"></div>');
		}else{
			$(target).next().empty();
		}
		if($(target).attr('readonly')=='readonly'){isReadOnly=true;};
		if($(target).attr('disabled')=='disabled'){isDisabled=true;};
		if(lookupUtils || ('undefined' != typeof(texts) && 'undefined' != typeof(values)) ) {
			if(opts.lookupcode&&null != (s=lookupUtils.getLookupEnable(opts.lookupcode))) {
				
				for (var o  in s.children){
					value =s.children[o].attributes.code; 	
					name =s.children[o].attributes.name; 
//					if(!opts.checked){
//						opts.checked = s.children[0].attributes.code;
//					}
					var html = '<input  type="radio" name="'+$(target).attr('name')+'"  value="'+value+'"';
//					if(value==opts.checked){
//						html+=' checked="checked"';
//					}
					if(opts.checked != null) {
						if($.inArray(value,opts.checked.split(","))!=-1){
							html+=' checked="checked"';
						}
					}
					if($(target).attr('value') != null) {
						if($.inArray(value+'',$(target).attr('value').split(','))!=-1){
							html+=' checked="checked" ';
						}
					}
					/**
					 * 为选项显示值包装为span
					 * 
					 */
					html+='><span code='+value+'>'+name+'</span></input>';
						$(target).next('.addradio').append(html);
				}
			}
			if('undefined' != typeof(texts) && 'undefined' != typeof(values)) {
				var texts = texts.split(",");
				var values = values.split(",");
				//2014-11-25冯超  使组件支持默认值
//				if(!opts.checked){
//					opts.checked = values[0];
//				}
				for ( var int = 0; int < texts.length; int++) {
					var html = '<input  type="radio" name="'+$(target).attr('name')+'"  value="'+values[int]+'"';
//					if(values[int]==opts.checked){
//						html+=' checked="checked"';
//					}
					if(opts.checked != null) {
						if($.inArray(values[int],opts.checked.split(","))!=-1){
							html+=' checked="checked"';
						}
					}
					if($(target).attr('value') != null) {
						if($.inArray(values[int]+'',$(target).attr('value').split(','))!=-1){
							html+=' checked="checked" ';
						}
					}
					html+='>'+texts[int]+'</input>';
					$(target).next('.addradio').append(html);
				}
			//2014-11-14冯超  使组件支持url 及data
			}else if(opts.valueField&&opts.textField){
				if(opts.url&&opts.url!=''){
					var param = {};
					if(opts.onBeforeLoad.call(target,param)==false){return}
					if(!$.isEmptyObject(opts.queryParams)){
						param = opts.queryParams;
					}
					$.ajax({
						url:opts.url,
						type:'post',
						data:param,
						async:false,
						success:function(data){
							if(data==null||data==''){return}
//							if(data[0]&&!opts.checked){
//								opts.checked = data[0][opts.valueField];
//							}
							$(target).next('.addradio').empty();
							for(var item in data){
								var html = '<input  type="radio" name="'+$(target).attr('name')+'" ';
								if(opts.checked != null) { 
									if($.inArray(data[item][opts.valueField]+'', opts.checked.split(","))!=-1){
										html+=' checked="checked"';
									}
								}
								if($(target).attr('value') != null) {
									if($.inArray(data[item][opts.valueField]+'', $(target).attr('value').split(','))!=-1){
										html+=' checked="checked" ';
									}
								}
								html+=' value="'+data[item][opts.valueField]+'">'+data[item][opts.textField]+'</input>';
								$(target).next('.addradio').append(html);
							}
							}
					})
				}else if(opts.data){
//					if(opts.data[0]&&!opts.checked){
//						opts.checked = opts.data[0][opts.valueField];
//					}
					for(var item in opts.data){
						var html = '<input  type="radio" name="'+$(target).attr('name')+'" ';
						if(opts.checked != null) { 
							if($.inArray(opts.data[item][opts.valueField]+'',opts.checked.split(","))!=-1){
								html+=' checked="checked"';
							}
						}
						if($(target).attr('value') != null) {
							if($.inArray(opts.data[item][opts.valueField]+'',$(target).attr('value').split(','))!=-1){
								html+=' checked="checked" ';
							}
						}
						html+=' value="'+opts.data[item][opts.valueField]+'">'+opts.data[item][opts.textField]+'</input>';
						$(target).next('.addradio').append(html);
					}
				}
			} 
		} else {
			$(target).next('.addradio').append('<input  type="radio"  name="'+$(target).attr('name')+'"></input>');
		}
		if(isReadOnly){//如果是只读，将未选中的设置为disabled
			$(target).next('.addradio').find(':radio').not(':checked').attr('disabled','disabled');
		}
		if(isDisabled){//如果是禁用，将所有的选项都设置为disabled
			$(target).next('.addradio').find(':radio').attr('disabled','disabled');
		}
		/**
		 * 新增加回调当创建完后进行操作
		 */
		opts.createAfter.call(target,target);
		bindEvent(target);
		
	}
		//2014-11-12 冯超 为radio添加点击事件
	function bindEvent(target){
		var state = $.data(target, 'radio');
		var opts = state.options;
		$(target).next('.addradio').find('input[type="radio"]').unbind('click').bind('click',function(e){
			opts.onClick.call(target,$(this).val());
		});
	}
		
	$.fn.radio = function(options, param){
		if (typeof options == 'string'){
			return $.fn.radio.methods[options](this, param);
		}
		
		options = options || {};
		return this.each(function(){
			var state = $.data(this, 'radio');
			if (state){
				$.extend(state.options, options);
			} else {
				$.data(this, 'radio', {
					options: $.extend({}, $.fn.radio.defaults, $.fn.radio.parseOptions(this), options)
				});
			}
			createRadio(this);
		});
	};
	
	function _setValue(target,value){
		var next = target.next('.addradio');
		var isReadonly = target.attr('readonly')=='readonly'?true:false;
		if(isReadonly){
			next.find(':radio').removeAttr('disabled');
			next.find(':radio').removeAttr('checked');
		}
		var checked = next.find('input[value="'+value+'"]:radio');
		if(checked.length>0){
			checked._propAttr('checked',true);
		}
		if(isReadonly){
			next.find(':radio').not(':checked').attr('disabled','disabled');
		}
		return target;
	}
	
	//冯超 2015-2-11
	function _readonly(target){
		var next = target.next('.addradio');
		next.find(':radio').not(':checked').attr('disabled','disabled');
		return target;
	}
	
	function _unReadonly(target){
		var next = target.next('.addradio');
		next.find(':radio').removeAttr('disabled');
		return target;
	}
	function _disabled(target){
		var next = target.next('.addradio');
		next.find(':radio').attr('disabled','disabled');
		return target;
	}
	
	function _unDisabled(target){
		var next = target.next('.addradio');
		next.find(':radio').removeAttr('disabled');
		return target;
	}
	
	$.fn.radio.methods = {
		options: function(jq){
			return $.data(jq[0], 'radio').options;
		},
		setValue:function(jq,value){
			return _setValue(jq,value);
		},
		readonly:function(jq){//设置radio为只读
			return _readonly(jq);
		},
		unReadonly:function(jq){//取消readonly属性
			return _unReadonly(jq);
		},
		disabled:function(jq){//设置radio为只读
			return _disabled(jq);
		},
		unDisabled:function(jq){//取消readonly属性
			return _unDisabled(jq);
		}
	};
	
	$.fn.radio.parseOptions = function(target){
		var t = $(target);
		return $.extend({}, $.parser.parseOptions(target, []));
	};
	
	$.fn.radio.defaults = {
			onClick: function(param){},
			queryParams:{},
			onBeforeLoad:function(param){},
			createAfter:function(target){}
	};
	
})(jQuery);




/**
 * advanceupload - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php checkbox
 */


(function($){
	var NTKO_AttachFile = new Array(); // 保存服务器上的控件列表信息
	var NTKO_errNoOcx = "控件不能正常加载";
	
	function createAdvanceUpload(target) {
		var state = $.data(target, 'advanceupload');
		var opts = state.options;
		$(target).append('<object id="NTKOATTACH_OCX" classid="clsid:E8FD8E76-203A-48ed-9C39-481479080C34" codebase="'+ contextPath +'/plugins/ntko/ntkofman.cab#version=3,0,9,6" '+
		'width="100%" height="100%"><param name="MaxUploadSize" value="1000000000"><param name="IsUseUTF8URL" value="-1"><param name="IsUseUTF8Data" value="-1">' +
		'<param name="DelFileField" value="DELATTNAME"><param name="IsPermitAddDelFiles" value="-1"><param name="IsConfirmSaveModified" value="0"><param name="IsAllowSelScannerPicType" value="-1">' +
		'<param name="MakerCaption" value="西安美林电子有限责任公司">' +
		'<param name="MakerKey" value="A5A1C435504B9693AE6CB6D30B953F891004F27E">' +
		'<param name="ProductCaption" value="美林应用开发平台">' +
		'<param name="ProductKey" value="3E054EDC8D3CB5E79A6E6B87DE36A79AC774F9A1">' +
		'<SPAN STYLE="color:red">不能装载附件管理控件。请在检查浏览器的选项中检查浏览器的安全设置。</SPAN></object>');
		var ntkoocx = $(target).find('#NTKOATTACH_OCX')[0];
		var width = opts.width;
		var height = opts.height;
		var filterTypes = opts.filterTypes;
		var filterSize = opts.filterSize;
		if('undefined' != typeof(width)) {
			$(target).find('#NTKOATTACH_OCX').attr("width",width);
		}
		if('undefined' != typeof(height)) {
			$(target).find('#NTKOATTACH_OCX').attr("height",height);
		}
		if('undefined' != typeof(filterTypes)) {
			ntkoocx.DefaultAddFileTypes = filterTypes;
		}
		if('undefined' != typeof(filterSize)) {
			ntkoocx.MaxUploadSize = filterSize;
		}
	}
		
	$.fn.advanceupload = function(options, param){
		if (typeof options == 'string'){
			return $.fn.advanceupload.methods[options](this,param);
		}
		options = options || {};
		return this.each(function(){
			var state = $.data(this, 'advanceupload');
			if (state){
				$.extend(state.options, options);
			} else {
				$.data(this, 'advanceupload', {
					options: $.extend({}, $.fn.advanceupload.defaults, $.fn.advanceupload.parseOptions(this), options)
				});
			}
			createAdvanceUpload(this);
		});
	};
	/**
	 * 附件上传操作
	 * @param id
	 */
	function submit(jq,param){
		var ntkoocx = jq.find('#NTKOATTACH_OCX')[0];
		if (!ntkoocx) {
	       alert(NTKO_errNoOcx);
		}
		if (null != param && param != "") {
			if(ntkoocx.IsNeedSaveToServer) {
				if(window.confirm("附件文件被修改或者增加,您需要保存回服务器吗?")) {
					ntkoocx.BeginSaveToURL(
							contextPath + '/mvc/upload/service/advanceupload',
							"Filedata", // 文件输入域名称,可任选,不与其他<input type=file name=..>的name部分重复即可
							"mup_upload_id="+param, // 可选的其他自定义数据－值对，以&分隔。如：myname=tanger&hisname=tom,一般为空
							0// 控件的智能提交功能可以允许同时提交选定的表单的所有数据.此处可使用id或者序号
					);
				}
			}
		}
	};
	
	/**
	 * 初始查看附件数据
	 * @param jq
	 * @param param
	 */
	function initData(jq,param) {
		var ntkoocx = jq.find('#NTKOATTACH_OCX')[0];
		 $.ajax({
				url: contextPath + '/mvc/upload/service/getList/' + param,
				type: "post",
				dataType:"JSON",
				success: function(datas){
					var opts = $.data(jq[0],'advanceupload').options;
					for ( var int = 0; int < datas.length; int++) {
						 var s=ntkoocx.AddServerFile(opts.downloadPath + datas[int].id, datas[int].name, datas[int].size, DateUtils.formatDateTime(datas[int].createDate));
						 NTKO_AttachFile.push(s);
					}
				}
		});
	}
	
	$.fn.advanceupload.methods = {
		options: function(jq){
			return $.data(jq[0],'advanceupload').options;
		},
		submit: function(jq,param) {
			return submit(jq,param);
		},
		setJoinId : function(jq,param) {
			return jq.each(function() {
				var opts = $.data(jq[0],'advanceupload').options;
				opts.joinId = param;
				initData(jq,param);
			});
		}
	};
	
	$.fn.advanceupload.parseOptions = function(target){
		var t = $(target);
		return $.extend({}, $.parser.parseOptions(target, []));
	};
	
	$.fn.advanceupload.defaults = {
			canEdit : true,
			width : 61,
			height : 26,
			auto : false, 
			joinId : 'null',
			uploadSuccess : false,
			buttonText : '上传',
			listPath : contextPath + "/mvc/upload/service/getList/",
			deletePath : contextPath + '/mvc/upload/service/delete',
			downloadPath : contextPath + '/mvc/upload/service/download/'
	};
	
})(jQuery);


///**
// * topDialog - jQuery MUI
// * 
// * Dependencies: dialog
// * 
// */
//(function($) {
//	
//	var initTopDialog = function(params){
//		var div = top.$('<div></div>').css({
//			width:'100%',
//			height:'100%',
//			zIndex:100000,
//			position:'absolute',
//			left:0,
//			top:0
//		});
//		top.$('body').append(div);
//			 var iframe = top.$('<iframe frameborder="0" allowtransparency="true" src="'+contextPath+'/dialog.jsp"></iframe>').css({
//				width:'100%',
//				height:'100%',
//				'background-color':'transparent',
//				display:'none'
//			}).appendTo(div);
//			iframe.load(function(){
//				top.$(this).show();	
//				this.contentWindow.lookupUtils = window.lookupUtils;
//				this.contentWindow.$p = $;
//				initDialog(params,this);
//			});
//		iframe.find = function(select,context){
//			return this[0].contentWindow.$(select,context);
//		};
//		iframe.dialog = function(options,params){
//			return this[0].contentWindow.$('.iframe_dialog').dialog(options,params);
//		}
//		return iframe;
//	}
//	
//	var initDialog = function(params,iframe){
//		var id = new Date().getTime()+'dialog';
//		 iframe.contentWindow.$('<div id="'+id+'" class="iframe_dialog"></div>').appendTo(iframe.contentWindow.document.body).dialog(params);
//		 $(iframe).attr('data-id',id);
//	}
//	
////	var change$ = function(_$){
////		var $c = _$;
////		var $p = top.$;
////		var $t = $;
////		var fun =  function(selector,context){
////			var c = $c(selector,context);
////			if(c.length>0){
////				return c;
////			}
////			var t = $t(selector,context);
////			if(t.length>0){
////				return t;
////			}
////			if($p){ 
////				return $p(selector,context);
////			}
////			return [];
////		}
////		return fun; 
////	}
//	
//	function closeDialog() {
//		var iframe = top.$('[data-id="'+this.id+'"]');
//		var state = iframe[0].contentWindow.$.data(this,'dialog');
//		if(state.options.onCloseCall){
//			state.options.onCloseCall.call(this);
//		}
//		iframe.parent().remove();
//	}
//
//	function beforeDialogClose(){
//	 var editors = $(this).find("[data-roles='mui-editor']");
//		if(editors.length > 0){
//			$.each(editors,function(index,obj){
//				try{
//					var e = $(obj).editor('destory').remove();
//					$(e).remove();
//				}catch(e){
//					console.log("Error Message is "+e.message);
//				}
//			});
//		}
//	var mueditors = $(this).find("[data-roles='mui-mueditor']");
//		if(mueditors.length > 0){
//			$.each(mueditors,function(index,obj){
//				try{
//					var e = $(obj).mueditor('destory').remove();
//					$(e).remove();
//				}catch(e){
//					console.log("Error Message is "+e.message);
//				}
//			});
//		}
//	
//	}
//	
//	$.topDialog = function(options, target, param) {
//		if (typeof options == 'string') {
//			if(options=="close"){
//				options=="destroy";
//				target.parent().remove();
//			}
////			target.dialog(options, param);
////			if(options=='close'){
////				target.remove();
////			}
//		} else {
//			var options = options || {};
//			if(options.onClose){
//				options.onCloseCall = options.onClose;
//				delete options.onClose;
//			}
//			options = $.extend({}, $.topDialog.defaults, options);
////			$.data(target,'topDialog',options);
//			return initTopDialog(options);
//		}
//	};
//	var defHeight = (typeof dialogSizeConfig == 'undefined') ? 400
//			: dialogSizeConfig.defaults.height;
//
//	var defWidth = (typeof dialogSizeConfig == 'undefined') ? 700
//			: dialogSizeConfig.defaults.width;
//
//	$.topDialog.defaults = {
//		onBeforeClose:beforeDialogClose,
//		onClose : closeDialog,
//		height : defHeight,
//		width : defWidth,
//		resizable : true,
//		modal : true
//	};
//	
//	$.topDialog.methods = {
//			close:function(){
//				
//			}
//	}
//	return false;
//	
////	
////	 var top$;
////		var  isPortalOpen = false;
////	if(location.href.indexOf("isPortalOpen=1")>0){// 在门户打开平台功能应用，只能在当前应用打开
////		isPortalOpen = true;
////	}
////	if (typeof top.$ != 'undefined' && typeof top.$.fn.dialog != 'undefined') {
////		top$ = top.$;
////	}  else if(typeof parent.$ != 'undefined' && typeof parent.$.fn.dialog != 'undefined'){
////		top$ = parent.$;
////	}else {
////		top$ = $;
////	}
////
//////	function closeDialog() {
//////		var div = top$(this).dialog('destroy', true);
//////		$(div).remove();
//////	}
////
////	function initTopDialog(param) {
////		return top$('<div id=dialogId>').dialog(param);
////	}
////	function beforeDialogClose(){
////	 var editors = top$(this).find("[data-roles='mui-editor']");
////		if(editors.length > 0){
////			$.each(editors,function(index,obj){
////				try{
////					var e = top$(obj).editor('destory').remove();
////					$(e).remove();
////				}catch(e){
////					console.log("Error Message is "+e.message);
////				}
////			});
////		}
////	var mueditors = top$(this).find("[data-roles='mui-mueditor']");
////		if(mueditors.length > 0){
////			$.each(mueditors,function(index,obj){
////				try{
////					var e = top$(obj).mueditor('destory').remove();
////					$(e).remove();
////				}catch(e){
////					console.log("Error Message is "+e.message);
////				}
////			});
////		}
////	
////	}
////
////	$.topDialog = function(options, target, param) {
////		if (typeof options == 'string') {
////			if(options=="close"){
////				options=="destroy";
////			}
////			target.dialog(options, param);
////			if(options=='close'){
////				target.remove();
////			}
////		} else {
////			var options = options || {};
////			options = $.extend({}, $.topDialog.defaults, options);
////			return initTopDialog(options);
////		}
////	};
////	var defHeight = (typeof dialogSizeConfig == 'undefined') ? 400
////			: dialogSizeConfig.defaults.height;
////
////	var defWidth = (typeof dialogSizeConfig == 'undefined') ? 700
////			: dialogSizeConfig.defaults.width;
////
////	$.topDialog.defaults = {
////		onBeforeClose:beforeDialogClose,
////		onClose : closeDialog,
////		height : defHeight,
////		width : defWidth,
////		resizable : true,
////		modal : true
////	};
//
//})(jQuery);

/**
 * topDialog - jQuery MUI
 * 
 * Dependencies: dialog
 * 
 */
(function($) {
//	var top$;
//	if(top.$ == undefined){// 首页没有引入jquery
//		return false;
//	} 
	
	 var top$;
		var  isPortalOpen = false;
	if(location.href.indexOf("isPortalOpen=1")>0){// 在门户打开平台功能应用，只能在当前应用打开
		isPortalOpen = true;
	}
	if (typeof top.$ != 'undefined' && typeof top.$.fn.dialog != 'undefined') {
		top$ = top.$;
	}  else if(typeof parent.$ != 'undefined' && typeof parent.$.fn.dialog != 'undefined'){
		top$ = parent.$;
	}else {
		top$ = $;
	}

	function closeDialog() {
		var div = top$(this).dialog('destroy', true);
		$(div).remove();
	}

	function initTopDialog(param) {
		return top$('<div id=dialogId>').dialog(param);
	}
	function beforeDialogClose(){
	 var editors = top$(this).find("[data-roles='mui-editor']");
		if(editors.length > 0){
			$.each(editors,function(index,obj){
				try{
					var e = top$(obj).editor('destory').remove();
					$(e).remove();
				}catch(e){
					console.log("Error Message is "+e.message);
				}
			});
		}
	var mueditors = top$(this).find("[data-roles='mui-mueditor']");
		if(mueditors.length > 0){
			$.each(mueditors,function(index,obj){
				try{
					var e = top$(obj).mueditor('destory').remove();
					$(e).remove();
				}catch(e){
					console.log("Error Message is "+e.message);
				}
			});
		}
	
	}

	$.topDialog = function(options, target, param) {
		if (typeof options == 'string') {
			if(options=="close"){
				options=="destroy";
			}
			target.dialog(options, param);
			if(options=='close'){
				target.remove();
			}
		} else {
			var options = options || {};
			options = $.extend({}, $.topDialog.defaults, options);
			return initTopDialog(options);
		}
	};
	var defHeight = (typeof dialogSizeConfig == 'undefined') ? 400
			: dialogSizeConfig.defaults.height;

	var defWidth = (typeof dialogSizeConfig == 'undefined') ? 700
			: dialogSizeConfig.defaults.width;

	$.topDialog.defaults = {
		onBeforeClose:beforeDialogClose,
		onClose : closeDialog,
		height : defHeight,
		width : defWidth,
		resizable : true,
		modal : true
	};

})(jQuery);

/**
 * mup.messager - Merit UI
 * 
 * Dependencies: messager
 */
(function($) {
	function getMsg(code) {
		var msg = MessageStore[code];
		if (msg) {
			return msg;
		} else {
			return {
				title : '',
				msg : '',
				icon : ''
			};
		}
	}

	$.Msg = {
		alert : function(code, fn, fn1, fn2) {
			if(typeof fn == 'string'){
				_$msg.alert(code, fn, fn1, fn2);
			}else{
				var msg = getMsg(code);
				_$msg.alert(msg.title, msg.msg, msg.icon, fn);
			}
		},
		error : function(code, fn, fn1, fn2) {
			if(typeof fn == 'string'){
				_$msg.alert(code, fn, fn1, fn2);
			}else{
				var msg = getMsg(code);
				_$msg.alert(msg.title, msg.msg , msg.icon);
				
			}
		},
		confirm : function(code, fn, fn1) {
			if(typeof fn == 'string'){
				_$msg.confirm(code, fn, fn1);
			}else{
				var msg = getMsg(code);
				_$msg.confirm(msg.title, msg.msg, fn);
			}
		},
		prompt : function(code, fn, fn1) {
			if(typeof fn == 'string'){
				_$msg.prompt(code, fn, fn1);
			}else{
				var msg = getMsg(code);
				_$msg.prompt(msg.title, msg.msg, fn);
			}
		},
		addMsg : function(code, title, msg, icon) {
			if (typeof code == 'string') {
				MessageStore[code] = {
					title : title || '',
					msg : msg || '',
					icon : icon || ''
				};
			} else {
				$.extend(MessageStore, code);
			}
		}
	};

	var MessageStore = {};

	var _$msg;
/*	if(top.$ == undefined){// 首页没有引入jquery
		return false;
	}*/ 
	if (typeof top.$ != 'undefined' && typeof top.$.messager != 'undefined') {
		_$msg = top.$.messager;
	} else if (typeof parent.$ != 'undefined' && typeof parent.$.messager != 'undefined') {
		_$msg = parent.$.messager;
	} else {
		_$msg = $.messager;
	}
})(jQuery);

jQuery.ajaxSetup({
	error : function(res) {
//		$.Msg.alert('SystemError');
		var errorDialog= $.topDialog({title: '提示', content:'<p>抱歉：系统错误，请联系管理员</p><a href="javascript:; void(0)" class="errorBtn" >+ 查看信息</a><div class="errorDetail" style="display:none">'+res.responseText+'</div>',
			 height: 'auto',
			 width: 500});
		errorDialog.find('.errorBtn').click(function() {
			errorDialog.find('.errorDetail').toggle('normal');
		});
	}
});

(function($) {
	if ($.Msg) {
		$.Msg.addMsg('SystemError', '提示', '抱歉：系统错误，请联系管理员');
	}

	dialogSizeConfig = {
		defaults : {
			width : 700,
			height : 400
		}
	};
})(jQuery);

/**
 * MeritUtil工具类
 * 
 * @author meifeng@meritit.com
 * @since 2014-07-25
 * @version 2.0.0.1
 */
(function($) {
	var MeritUtil = {};
	/** **********************添加代码开始*********************** */
	/**
	 * 获取时间 解决ie6存在缓存。发现请求地址相同，不会在发出请求
	 */
	MeritUtil.getTime = function() {
		return new Date().getTime();
	};
	
	/**
	 * 在tabs中新打开tab项
	 * params
	 * {
	 *  tabsId : 指定的tabs的Id,			//默认是tabs
	 *  title : tab标题					//tab项标题
	 *  moduleId : 模块id				//【必须】样例moduleId:'prodduct/moduleproc'
	 * 	url : 地址						//【必须】样例url:contextPath + '/mvc/test/service/view/index'
	 * }
	 */
	MeritUtil.addTab = function(params) {
		var tabsId_ = params.tabsId == undefined ? 'tabs' : params.tabsId;
		var title_ = params.title == undefined ? '审批单' : params.title;
		var fm_ = top$('<iframe height="100%" width="100%">').attr('src', params.url);
		var id_ = params.id || '_tabModuleId_' + params.moduleId + '_' + $.MeritUtil.getTime();
		var tabs = window.parent.$('#ftabs');
		if(tabs &&　tabs.length > 0){
			tabs.ftabs('add',{
				id : id_,
				title : title_,
				selected : true, 
				content:'<iframe onload="iframeClick(this)"  allowtransparency="true" frameBorder="0" style="width:100%;height:100%;border:0px;" src="'+params.url+'"></iframe>',
				closable : true
			});
		}else{
			top$('#' + tabsId_ + '').tabs('add',{
				id : id_,
				title : title_,
				selected : true, 
				content : fm_,
				height : '100%',
				closable : true
			});
		}
	};
	
	/**
	 * 根据名称验证标签页是否存在
	 * * params
	 * {
	 *  tabsId : 指定的tabs的Id,			//默认是tabs
	 *  title : tab标题					//tab项标题
	 * }
	 */
	MeritUtil.existTab = function(params){
		var title = params.title;
		var tabsId = params.tabsId;
		var tabs = window.parent.$('#ftabs');
		if(tabs.length > 0){
			return tabs.ftabs('existName',title);
		}else{
			return top$('#' + tabsId + '').tabs('exists',title);
		}
	};
	
	/** **********************添加代码结束*********************** */
	$.MeritUtil = MeritUtil;
})(jQuery);
/**
 * 遮罩层处理
 * 
 * @author dingxuan
 *//** **********************添加遮罩代码开始*********************** */
function maskLoad(text) {          // 显示遮罩
// $('<div class="datagrid-mask"
// style="display:block"></div>').css({width:parent.document.width,height:parent.document.height}).appendTo("body",parent.document);
// var msg = $('<div class="datagrid-mask-msg"
// style="display:block;left:50%"></div>').html("<font
// size='1'>正在运行，请稍候。。。</font>").appendTo("body",parent.document);
// msg.css('marginLeft', -msg.outerWidth()/2);
	if(null == text) {
		var text = "正在加载,请稍候..."
	}
	top$.messager.progress({
		text:text,        // 遮罩提示信息
		interval:500,                 // 进度条显示速度
		width:300
	});
}

function maskDisplayLoad() {     // 去掉遮罩
// $('.datagrid-mask').remove();
// $('.datagrid-mask-msg').remove();
	top$.messager.progress('close');    // 关闭遮罩
} 
/** **********************遮罩处理代码代码结束*********************** */


/**
 * datagrid单元格省略显示（用冒号省略显示）
 * 
 * @author dingxuan
 *//** **********************添加省略显示代码开始*********************** */
// var myview = $.extend({},$.fn.datagrid.defaults.view,{
// onAfterRender:function(tgt) {
// var filedName = $(tgt).datagrid("options").viewfield;
// var filedNames = filedName.split(",");
// var viewlength = $(tgt).datagrid("options").viewlength;
// for ( var int = 0; int < filedNames.length; int++) {
// if(typeof(viewlength) =='undefined') {
// viewlength = 10;
// }
// $(tgt).datagrid("getPanel").find("div.datagrid-body").find('td[field='+filedNames[int]+']').find("div.datagrid-cell").each(function(){
// var $Obj = $(this);
// if($Obj.text().length>viewlength) {
// $Obj.attr("title",$Obj.text());
// $Obj.html($Obj.text().substring(0,viewlength)+"...");
// }
// })
// }
// }
// });
/** **********************添加省略显示代码结束***********************

 * ntkoeditor - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 * 
 * Licensed under the GPL or commercial licenses To use it on other terms please
 * contact us: info@jeasyui.com http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php checkbox
 */


(function($){
	var timeOut;
	function createNoko(target) {
		var state = $.data(target, 'ntkoeditor');
		var opts = state.options;
		var width = opts.width;
		var height = opts.height;
		if(width.substring(width.length-1)=='%'){
			var w = width.substring(0,width.length-1);
			if(w=='100'){
				opts.width = $(window).width();
			}else{
				opts.width = parseFloat('0.'+w)*$(window).width();
			}
		}
		if(height.substring(height.length-1)=='%'){
			var w = height.substring(0,height.length-1);
			if(w=='100'){
				opts.height = $(window).height();
			}else{
				opts.height = parseFloat('0.'+w)*$(window).height();
			}
		}
		
		$(target).append('<object  classid="clsid:C9BC4DFF-4248-4a3c-8A49-63A7D317F404" codebase="'+contextPath+'/plugins/ntko/OfficeControl.cab#version=5,0,1,0"' +
				'id="'+opts.id+'" width="'+ opts.width+'" height="'+opts.height+'">' +
				'<param name="Toolbars" value='+(opts.isToolbar == true ? "1" : "0")+'>' +
				'<param name="Menubar" value='+(opts.isMenubar==true?"1":"0")+'>' +
				'<param name="IsUseUTF8Data" VALUE="-1">' + 
				'<param name="MakerCaption" value="西安美林电子有限责任公司">' +
				'<param name="MakerKey" value="450D83DB36641E3909E6B2F3909E2A870787E650">' +
				'<param name="ProductCaption" value="美林应用开发平台">' +
				'<param name="ProductKey" value="6555D1DFF5A658C4B4A6A18ABB1B1308EC936781">' +
				'<SPAN STYLE="color:red">不能装载NTKO OFFICE文档控件，请在检查浏览器的选项中检查浏览器的安全设置</SPAN></object>');
		
		 /*var html ="<object  classid=\"clsid:C9BC4DFF-4248-4a3c-8A49-63A7D317F404\" codebase=\""+contextPath+"/plugins/ntko/OfficeControl.cab#version=5,0,1,0\"" +
                  "id=\""+opts.id+"\" width=\""+ opts.width+"\" height=\""+opts.height+"\">" +
                  "<param name=\"Toolbars\" value=\""+(opts.isToolbar == true ? '1' : '0')+"\">" +
                  "<param name=\"TitlebarColor\" value=\"-2147483635\">" +
                  "<param name=\"BorderColor\" value=\"-2147483632\">" +
                  "<param name=\"BackColor\" value=\"-2147483643\">" +
                  "<param name=\"ForeColor\" value=\"-2147483640\">" +
                  "<param name=\"Menubar\" value=\""+(opts.isMenubar==true?'1':'0')+"\">" +
				  "<param name=\"IsUseUTF8Data\" VALUE=\"-1\">" +
				  "<param name=\"MakerCaption\" value=\"西安美林电子有限责任公司\">" +
				  "<param name=\"MakerKey\" value=\"450D83DB36641E3909E6B2F3909E2A870787E650\">" +
				  "<param name=\"ProductCaption\" value=\"美林应用开发平台\">" +
				  "<param name=\"ProductKey\" value=\"6555D1DFF5A658C4B4A6A18ABB1B1308EC936781\">" +
                  "</object>";
		 $(target).append(html);*/
		 
		 if(opts.fileId!=null){
			 $(target).find('#'+opts.id)[0].BeginOpenFromURL(contextPath + '/mvc/upload/service/download/'+opts.fileId);
		 }
		 bindEvent(target);
	}
	function bindEvent(target){
		var state = $.data(target, 'ntkoeditor');
		var opts = state.options;
		opts.initOff.call(target);
	}
	
	$.fn.ntkoeditor = function(options, param){
		if (typeof options == 'string'){
			return $.fn.ntkoeditor.methods[options](this, param);
		}
		
		options = options || {};
		return this.each(function(){
			var state = $.data(this, 'ntkoeditor');
			if (state){
				$.extend(state.options, options);
			} else {
				$.data(this, 'ntkoeditor', {
					options: $.extend({}, $.fn.ntkoeditor.defaults, $.fn.ntkoeditor.parseOptions(this), options)
				});
			}
			createNoko(this);
		});
	};
	

	$.fn.ntkoeditor.methods = {
		options: function(jq){
			return $.data(jq[0], 'ntkoeditor').options;
		},
		//文件类型
        //Word信息内容
        wordInfo: {
            Start: 0,
            End: 0,
            Text: "NDOFramer"
        },
        //关闭插件
        close: function(jq) {
        	jq.find('object')[0].close();
        	var opts = $.data(jq[0], 'ntkoeditor').options;
        	opts.fileId = null;
        },
        //打开文档
        open: function(jq,fileId) {
        	var fileInfo = {};
        	var opts = $.data(jq[0], 'ntkoeditor').options;
        	var doc = jq.find('object')[0];
        	$.ajax({
        		url:contextPath + '/mvc/ntkoOffice/service/getFile',
        		type:'post',
        		data:{id:fileId},
        		dataType:'json',
        		async:false,
        		success:function(data){
        			fileInfo = data;
                	var doc = jq.find('object')[0];
                	var url=contextPath + '/mvc/upload/service/download/'+fileId;
                	doc.BeginOpenFromURL(url);   //第二个参数为只读设置
                	var opts = $.data(jq[0], 'ntkoeditor').options;
                	opts.fileId = fileId;
        		}
        	});
        	beginOpen();
//        	var i = 0;
        	function beginOpen(){
//        		i+=1;
//        		if(i>10) {
//        			alert(i);
//        			return;
//        		}
        		if(jq.find('object')[0].ActiveDocument) {
//        			alert("11");
        			opts.afterOpenFromURL.call(jq,doc);
        			return;
        		}
        		setTimeout(beginOpen,100);
        	}
        	return fileInfo;
        },
        //新建Word文档
        newWord: function(jq) {
        	var opts = $.data(jq[0], 'ntkoeditor').options;
        	$.ajax({
        		url:contextPath + '/mvc/ntkoOffice/service/getUUID',
        		success:function(data){
        			opts.uuid = data.uuid;
        		}
        	});
        	jq.find('object')[0].CreateNew('Word.Document');
        	opts.fileId = null;
        	return opts.uuid;
        },
        //新建Excel文档
        newExcel: function(jq) {
        	var opts = $.data(jq[0], 'ntkoeditor').options;
         	$.ajax({
        		url:contextPath + '/mvc/ntkoOffice/service/getUUID',
        		success:function(data){
        			opts.uuid = data.uuid;
        		}
        	});
        	jq.find('object')[0].CreateNew('Excel.Sheet');
        	opts.fileId = null;
        	return opts.uuid;
        },
        //新建PowerPoint文档
        newPowerPoint: function(jq) {
        	var opts = $.data(jq[0], 'ntkoeditor').options;
         	$.ajax({
        		url:contextPath + '/mvc/ntkoOffice/service/getUUID',
        		success:function(data){
        			opts.uuid = data.uuid;
        		}
        	});
        	jq.find('object')[0].CreateNew('PowerPoint.Show');
        	opts.fileId = null;
        	return opts.uuid;
        },
        //打开本地文档
        openLocalFile: function(jq) {
        	var opts = $.data(jq[0], 'ntkoeditor').options;
        	$.ajax({
        		url:contextPath + '/mvc/ntkoOffice/service/getUUID',
        		success:function(data){
        			var opts = $.data(jq[0], 'ntkoeditor').options;
        			opts.uuid = data.uuid;
        		}
        	});
        	jq.find('object')[0].ShowDialog(1);
        	opts.fileId = null;
        	return opts.uuid;
//        	jq.find('object')[0].OpenLocalFile(file);
        },
        //保存到本地
        saveLocalFile: function(jq) {
        	var opts = $.data(jq[0], 'ntkoeditor').options;
        	var ntko = document.getElementById(opts.id);
        	ntko.ShowDialog(2);
        },
        //保存文档，返回是否保存成功
        save: function(jq,params) {
        	var opts = $.data(jq[0], 'ntkoeditor').options;
        	var ntko = document.getElementById(opts.id);       	
        		 	var docType = ntko.DocType;
                	var type = 'doc';
                	var fileType = "Word.Document";
                	switch (docType) {
        			case 1:
        				type = 'doc';
        				fileType = 'Word.Document';
        				break;
        			case 2:
        				type = 'xls';
        				fileType = 'Excel.Sheet';
        				break;
        			case 3:
        				type = 'ppt';
        				fileType = 'PowerPoint.Show';
        				break;
        			default:
        				return false;
        				break;
        			}
                	var fileName = params.fileName?(params.fileName+'.'+type):('新建'+'.'+type);
                	var formSettings = {};
                	formSettings.UploadFileId  =  "Filedata";
                	formSettings.Data= "savetype=1&fileType="+fileType;
                	if(opts.fileId&&opts.fileId!=null){
                		formSettings.Data+='&fileId='+opts.fileId;	
                	}else{
                		if(opts.uuid&&opts.uuid!=null){
                			formSettings.Data+='&fileId='+opts.uuid;	
                		}
                	}
                	formSettings.FileName = fileName;
                	formSettings.FormId = 0;
                	var retHTML;
                	if(type=="doc"){//office2003 office2010保存为兼容模式
                		retHTML =ntko.SaveAsOtherFormatToURL(5,contextPath + '/mvc/ntkoOffice/service/saveOffice',    //提交到的url地址
                	            formSettings.UploadFileId,     //文件域的id，类似<input type=file id=upLoadFile 中的id
                	            "mup_upload_id="+params.joinId+"&operate_mark="+params.mark,
                	            formSettings.FileName,         //上传文件的名称，类似<input type=file 的value
                	            formSettings.FormId            //与控件一起提交的表单id，也可以是form的序列号，这里应该是0.
                            );
                	}else{
                		retHTML =ntko.saveToURL(contextPath + '/mvc/ntkoOffice/service/saveOffice',    //提交到的url地址
                	            formSettings.UploadFileId,     //文件域的id，类似<input type=file id=upLoadFile 中的id
                	            "mup_upload_id="+params.joinId+"&operate_mark="+params.mark,
                	            formSettings.FileName,         //上传文件的名称，类似<input type=file 的value
                	            formSettings.FormId            //与控件一起提交的表单id，也可以是form的序列号，这里应该是0.
                            );
                	}
                    return retHTML;
       
        },
        //下载远程文件
        downloadFile: function(jq,url, localPath) {
        	jq.find('object')[0].DownloadFile(url, localPath);
        },
        //插入本地文档
        insertLocalFile: function(jq) {
        	jq.find('object')[0].ActiveDocument.Application.Dialogs(164).Show();
        },
        //插入文档，为文档插入内容
        insertFile: function(jq,url) {//$('div').ntkoeditor('insertFile',contextPath+'/plugins/1.docx')
        	jq.find('object')[0]._doc =jq.find('object')[0].ActiveDocument;
        	jq.find('object')[0]._doc.Activate();
        	jq.find('object')[0].AddTemplateFromURL(url);
        },
        //插入本地图片
        insertLocalImage: function(jq) {
        	jq.find('object')[0].ActiveDocument.Application.Dialogs(163).Show();
        },
        //插入图片
        insertImage: function(jq,url, type) {
        	jq.find('object')[0].InsertFile(url, type + 8);
        },
        //插入文本
        insertText: function(jq,text) {
        	var state = $.data(jq[0], 'ntkoeditor');
        	state._doc = jq.find('object')[0].ActiveDocument;
        	state._doc.Activate();
        	state._doc.Application.Selection.InsertAfter(text);
        },
        //页面设置
        setPageSetup: function(jq) {//有问题
        	var showDialogType = showDialogType();
        	jq.find('object')[0].showdialog(showDialogType.PageSetup);
        },
        //文档属性设置
        setProperty: function(jq) {//有问题
        	var showDialogType = showDialogType();
        	jq.find('object')[0].showdialog(showDialogType.Properties);
        },
        //打印
        print: function(jq) {//有问题
            //                this[0].PrintOut();
        	var showDialogType = showDialogType();
        	jq.find('object')[0].showdialog(showDialogType.Print);
        },
        //打印预览
        printPreview: function(jq) {
        	jq.find('object')[0].PrintPreview();
        },
        //关闭打印预览
        printExit: function(jq) {//有问题
        	jq.find('object')[0].PrintPreviewExit();
        },
        //隐藏工具栏
        hideToolbar: function(jq) {//隐藏文档的工具栏
        	jq.find('object')[0].Activate(false);
        	jq.find('object')[0].Toolbars = false;
        },
        //显示工具栏
        showToolbar: function(jq) {
        	jq.find('object')[0].Activate(false);
        	jq.find('object')[0].Toolbars = true;
        },
        //隐藏菜单栏
        hideMenubar: function(jq) {
        	jq.find('object')[0].Activate(false);
        	jq.find('object')[0].Menubar = false;
        },
        //显示菜单栏
        showMenubar: function(jq) {
        	jq.find('object')[0].Activate(false);
        	jq.find('object')[0].Menubar = true;
        },
        //获取或设置窗口高度
        height: function(jq,arg) {
            if (typeof (arg) !== "undefined") {
            	jq.find('object').css("height",arg);
            }
            else {
                return jq.find('object').css("height"); ;
            }
        },
        //获取或设置窗口宽度
        width: function(jq,arg) {
            if (typeof (arg) !== "undefined") {
            	jq.find('object').css("width", arg);
            }
            else {
                return jq.find('object').css("width"); ;
            }
        },
        //删除本地路径，如c:\\1.doc
        deleteLocalFile: function(jq,localPath) {//对象不支持此属性或方法"
        	jq.find('object')[0].DeleteLocalFile(localPath);
        },
        showView: function(jq,showViewType) {//参数超出范围。"
        	jq.find('object')[0].Activate(false);
        	jq.find('object')[0].ActiveDocument.ActiveWindow.View = showViewType;
        },
        //是否只读
        isReadOnly: function(jq) {
            return jq.find('object')[0].IsReadOnly;
        },
        //设为只读
        setReadOnly: function(jq,param) {
        	//取消其他受保护状态，设置为只读状态
        	if(0 == jq.find('object')[0].ActiveDocument.ProtectionType){
        		jq.find('object')[0].ActiveDocument.Unprotect("000000");
        	}
        	jq.find('object')[0].SetReadOnly(true,param);
        },
        //设为只读
        setProtect: function(jq,param) {
        	jq.find('object')[0].ActiveDocument.Protect.Password=param;
        },
        //设为可写
        setReadWrite: function(jq,param) {
        	jq.find('object')[0].SetReadOnly(false,param);
        },
        //显示对话框
        showDialog: function(jq,param) {
        	jq.find('object')[0].ActiveDocument.Application.Dialogs(param).Show();
        },
        //读取用户名
        getUserName: function(jq,param) {
        	return jq.find('object')[0].WebUserName;
        },
        //设置用户名
        setUserName: function(jq,param) {
        	return jq.find('object')[0].WebUserName = param;
        },
        //显示痕迹
        showTrace: function(jq) {
        	jq.find('object')[0].ActiveDocument.ShowRevisions = true;
        },                       
        //隐藏痕迹
        hideTrace: function(jq) {
        	jq.find('object')[0].ActiveDocument.ShowRevisions = false;
//        	jq.find('object')[0].TrackRevisions(false);
        },
        //留痕操作
        keepTrace: function(jq) {
        	jq.find('object')[0].ActiveDocument.TrackRevisions = true;
        },  
        //不痕迹操作
        unKeepTrace: function(jq) {
        	jq.find('object')[0].ActiveDocument.TrackRevisions = false;
        },  
        //接收所有修订
        acceptAllRevisions: function(jq,param) {
        	jq.find('object')[0].ActiveDocument.AcceptAllRevisions();
        },
        //拒绝所有修订
        rejectAllChangesInDoc: function(jq,param) {
        	jq.find('object')[0].ActiveDocument.Application.WordBasic.RejectAllChangesInDoc();
        },
        //获取指定书签的值
        getBookmarkValue: function(jq,param) {
        	return jq.find('object')[0].GetBookmarkValue(param);
//        	TANGER_OCX_OBJ.ActiveDocument.BookMarks(BookMarkName);
        },
        //设置指定书签的值
        setBookmarkValue: function(jq,param) {
        	var bookmarkobj = jq.find('object')[0].GetBookmarkValue(param.bookmarkName);
        	if(undefined == bookmarkobj) {
        		return;
        	}
        	jq.find('object')[0].setBookmarkValue(param.bookmarkName,param.value);
        	var bkmkObj =  jq.find('object')[0].ActiveDocument.BookMarks(param.bookmarkName);
//        	var saverange = bkmkObj.Range;
//		    saverange.Text = param.value;
//        	jq.find('object')[0].ActiveDocument.BookMarks.Add(param.bookmarkName,saverange);
        	bkmkObj.Select();
        	var Selection = jq.find('object')[0].ActiveDocument.Application.Selection;
        	return Selection;
        },
        //粘贴html
        pasteHtml: function(jq,param) {
        	var bkmkObj =  jq.find('object')[0].ActiveDocument.BookMarks(param);
        	bkmkObj.Select();
        	jq.find('object')[0].ActiveDocument.Application.Selection.PasteAndFormat(16);
        },
        //增加自定义菜单项
        addCustomMenu2: function(jq,param) {
        	jq.find('object')[0].AddCustomMenu2(param.position,param.caption);
        },
        //删除所有菜单项
        clearAllFileMenuItems: function(jq,param) {
        	jq.find('object')[0].ClearAllFileMenuItems();
        },
        //文档是否已做修改
        isDirty: function(jq) {
            return !jq.find('object')[0].ActiveDocument.Saved;
        },
        //获取文档所有内容，返回该Word文档内容Json
        range: function(jq) {//仅支持word
        	var state = $.data(jq[0], 'ntkoeditor');
        	state._doc = jq.find('object')[0].ActiveDocument;
        	state._doc.Activate();
        	state._range = state._doc.Range();
        	var wordInfo = {};
        	state.wordInfo = wordInfo;
        	state.wordInfo.Start =state._range.Start;
        	state.wordInfo.End = state._range.End;
        	state.wordInfo.Text = state._doc.Range(state._range.Start, state._range.End).Text;
            return state.wordInfo;
        },
        //选中文档所有内容，返回该Word文档内容Json
        select: function(jq) {
        	var state = $.data(jq[0], 'ntkoeditor');
        	state._doc = jq.find('object')[0].ActiveDocument;
        	state._doc.Activate();
        	state._doc.Select();
        	state._selection = state._doc.Application.Selection;
        	var wordInfo = {};
        	wordInfo.Start = state._selection.Start;
        	wordInfo.End = state._selection.End;
        	wordInfo.Text = state._doc.Range(state._selection.Start, state._selection.End).Text;

            return wordInfo;
        },
        //取消选中内容
        unselect: function(jq) {//仅支持word
         	var state = $.data(jq[0], 'ntkoeditor');
            if (state._selection != null) {
            	state._selection.Start = 0;
            	state._selection.End = 0;
            	state._selection = null;
            }
        },
        replace: function(jq,text, start, end) {
        	var state = $.data(jq[0], 'ntkoeditor');
            //                alert(this._doc.Range(start,end).Text);
        	state._doc.Range(start, end).Text = text;
            //                alert(this._doc.range(this.wordInfo.Starti,this.wordInfo.End).Text);
        },
        //清除文本
        clear: function(jq) {//仅支持word
            var wordDoc = jq.find('object')[0].ActiveDocument;
            wordDoc.Activate();
            wordDoc.Select();
            var wordSelection = wordDoc.Application.Selection;
            wordDoc.Range(wordSelection.Start, wordSelection.End).Text = "";
        },
        //从URL增加图片到Office文档
        addPicFromURL: function(jq,param) {//仅支持word
        	jq.find('object')[0].AddPicFromURL(
        			param,//URL 注意；URL必须返回Word支持的图片类型。
        			true,//是否浮动图片
        			0,//如果是浮动图片，相对于左边的Left 单位磅
        			0,//如果是浮动图片，相对于当前段落Top
        			1, //当前光标处
        			100,//无缩放
        			1 //文字上方
        		);
        },
        //从URL增加印章到Office文档
        addSignFromURL: function(jq,param) {//仅支持word
    		jq.find('object')[0].AddSignFromURL(
    				"匿名用户",//当前登陆用户
    				param,//URL
    				50,//left
    				50, //top
    				"SignKey4456",
    				1,
    				100,
    				0
    		)
        },
        //从URL增加模板文件
        addTemplateFromURL: function(jq,param) {//仅支持word
        	jq.find('object')[0].ActiveDocument.Application.Selection.HomeKey(6,0);//光标移动到文档开头
        	jq.find('object')[0].AddTemplateFromURL(
        			param,//URL
        			true
        	)
        }
	};
	
	$.fn.ntkoeditor.parseOptions = function(target){
		var t = $(target);
		return $.extend({}, $.parser.parseOptions(target, []));
	};
	
	$.fn.ntkoeditor.defaults = {
	            width: "700px",
	            height: "500px",
	            id: "OFRAMER_" + new Date().getTime(),
	            isToolbar: true,
	            isMenubar: false,
	            failed: function() {},
	            fileId:null,
	            initOff:function() {},
	            afterOpenFromURL:function(document) {}
	};
	
})(jQuery);


/**
 * chart - jQuery EasyUI
 * 
 */
(function($){
	
	var index = 0;
	function createChart(target) {
		var state = $.data(target, 'chart');
		var opts = state.options;
		//获取Id
		var id = $(target).attr('id') || 'chartContainer';
		//追加图标展示区域
		//$(target).append('<div id='+id+' style="background-color:#CCC;height:'+opts.height+'px; font-size:15px; color:gray;text-align:center;line-height:'+opts.height+'px">Data loading，please wait for a moment</div>');
		//类型
		var swfType =  contextPath + '/charts/chart/'+opts.swfType+'.swf';
		//固定值方式
		var data = opts.data;
		if(data){
			var currId = id + getIndex();
			chart = new FusionCharts( swfType, currId, opts.width,opts.height, opts.debugMode,  opts.registerWithJS );
			if(typeof(data) == 'string'){
				chart.setDataXML(data)
			}else{
				chart.setJSONData(data);
			}
			chart.render( id);
			//将当前的chart对象的ID与html组件绑定
			$.data(target, 'chart').options['chartId'] = currId;
		}else{
			$.ajax({
				url:opts.url,
				data:opts.param,
				type:'post',
				success:function(data){
					var currId = id + getIndex();
					chart = new FusionCharts( swfType, currId,  opts.width , opts.height, opts.debugMode,  opts.registerWithJS );
					if(typeof(data.data) == 'string'){
						chart.setDataXML(data.data)
					}else{
						chart.setJSONData(data.data);
					}
					chart.render(id);
					//将当前的chart对象的ID与html组件绑定
					$.data(target, 'chart').options['chartId'] = currId;
					
				}
			});
		}
	}
	
	//防止ID重复，生成一个序列
	getIndex = function(){
		return index++;
	};
	
	
	$.fn.chart = function(options, param){
		if (typeof options == 'string'){
			return $.fn.chart.methods[options](this,param);
		}
		options = options || {};
		return this.each(function(){
			var state = $.data(this, 'chart');
			if (state){
				$.extend(state.options, options);
			} else {
				$.data(this, 'chart', {
					options: $.extend({}, $.fn.chart.defaults, $.fn.chart.parseOptions(this), options)
				});
			}
			createChart(this);
		});
	};
	
	
	//解析options属性
	$.fn.chart.parseOptions = function(target){
		var t = $(target);
		return $.extend({}, $.fn.panel.parseOptions(target), $.parser.parseOptions(target, ['url','swfUrl','width','height','debugMode','registerWithJS']));
	};
	
	
	//方法
	$.fn.chart.methods = {
			options: function(jq){
				return $.data(jq[0], 'chart').options;
			},
			resizeTo:function(jq,param){//重新定义大小
				var currChartId = $(jq).chart('options').chartId;
				var currChart = FusionCharts(currChartId);
				currChart.resizeTo(param.width,param.height);
			},
			getData:function(jq){//获得JSON数据对象
				var currChartId = $(jq).chart('options').chartId;
				var currChart = FusionCharts(currChartId);
				return currChart.getJSONData();
			},
			getChart:function(jq){
				var currChartId = $(jq).chart('options').chartId;
				var currChart = FusionCharts(currChartId);
				return currChart;
			},
			refresh:function(jq){
				var options = $(jq).chart('options');
				$(jq).chart(options);
			},
			expChart:function(jq,param){
				var exportFormat  = param['exportFormat'];
				var exportAtClient  = param['exportAtClient'];
				var currChartId = $(jq).chart('options').chartId;
				var currChart = FusionCharts(currChartId);
				if(exportAtClient){
					currChart.exportChart({exportAtClient:exportAtClient,exportFormat:exportFormat});
				}else{
					currChart.exportChart({exportFormat:exportFormat});
				}
			}
	};
	
	//属性以及默认值
	$.fn.chart.defaults = {
			 url:null,				//访问后台url
			 param:null	,		//请求参数
			 data:null,			//固定值方式    json对象
			 swfType:null,	//swf类型 Column3D.swf 。。。
			 xmlUrl:null,		//xml方式时xml文件的路径
			 width:'900',		//图标的宽度
			 height:'300',		//图标的高度
			 debugMode:0,	
			 registerWithJS:1
	 }
	 
})(jQuery);



/**
 * echarts - jQuery EasyUI
 */

(function($){
	function createChart(target) {
		var state = $.data(target, 'echart');
		var opts = state.options;
		//获取Id
		var id = $(target).attr('id');
		//如果有data参数，则不进入后台
		var data = opts.data;
		//主题
		var theme = opts.theme;
		
		if(data){
			var dom = document.getElementById(id);
			var chartInstance = echarts.init(dom,getEchartsTheme(theme));
			
			chartInstance.showLoading();
			chartInstance.setOption(data);
			chartInstance.hideLoading();
            
            //分装当前图表的实例Id
            var instanceId =  $('#'+id).attr('_echarts_instance_');
            $.data(target, 'echart').options['instanceId'] = instanceId;
        	bindEvents(target);
		}else{
			//远程获取数据
			$.ajax({
				url:opts.url,
				data:opts.param,
				type:'post',
				success:function(data){
					var dom = document.getElementById(id);
					var chartInstance = echarts.init(dom,getEchartsTheme(theme));
					if(data.tooltip && data.tooltip.formatter){
						var formatter = data.tooltip.formatter;
						if(typeof formatter == "string" && formatter.indexOf('function') >= 0){
							var a = (new Function("return " + formatter))();
							data.tooltip.formatter = a;
						}
						chartInstance.setOption(data);
					}else{
						chartInstance.setOption(data);
					}
					var instanceId =  $('#'+id).attr('_echarts_instance_');
					$.data(target, 'echart').options['instanceId'] = instanceId;
					bindEvents(target);
				}
			});
		}
	}
	
	
	$.fn.echart = function(options, param){
		if (typeof options == 'string'){
			return $.fn.echart.methods[options](this,param);
		}
		options = options || {};
		return this.each(function(){
			var state = $.data(this, 'echart');
			if (state){
				$.extend(state.options, options);
			} else {
				$.data(this, 'echart', {
					options: $.extend({}, $.fn.echart.defaults, $.fn.echart.parseOptions(this), options)
				});
			}
			createChart(this);
		});
	};
	
	
	function getEchartsTheme(theme){
		var echarts_theme = {
				blue:{
				    // 默认色板
				    color: [
				        '#1790cf','#1bb2d8','#99d2dd','#88b0bb',
				        '#1c7099','#038cc4','#75abd0','#afd6dd'
				    ],
				    // 图表标题
				    title: {
				        textStyle: {
				            fontWeight: 'normal',
				            color: '#1790cf'
				        }
				    },
				    // 值域
				    dataRange: {
				        color:['#1178ad','#72bbd0']
				    },
				    // 工具箱
				    toolbox: {
				        color : ['#1790cf','#1790cf','#1790cf','#1790cf']
				    },
				    // 提示框
				    tooltip: {
				        backgroundColor: 'rgba(0,0,0,0.5)',
				        axisPointer : {            // 坐标轴指示器，坐标轴触发有效
				            type : 'line',         // 默认为直线，可选为：'line' | 'shadow'
				            lineStyle : {          // 直线指示器样式设置
				                color: '#1790cf',
				                type: 'dashed'
				            },
				            crossStyle: {
				                color: '#1790cf'
				            },
				            shadowStyle : {                     // 阴影指示器样式设置
				                color: 'rgba(200,200,200,0.3)'
				            }
				        }
				    },
				    // 区域缩放控制器
				    dataZoom: {
				        dataBackgroundColor: '#eee',            // 数据背景颜色
				        fillerColor: 'rgba(144,197,237,0.2)',   // 填充颜色
				        handleColor: '#1790cf'     // 手柄颜色
				    },
				    // 网格
				    grid: {
				        borderWidth: 0
				    },
				    // 类目轴
				    categoryAxis: {
				        axisLine: {            // 坐标轴线
				            lineStyle: {       // 属性lineStyle控制线条样式
				                color: '#1790cf'
				            }
				        },
				        splitLine: {           // 分隔线
				            lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
				                color: ['#eee']
				            }
				        }
				    },

				    // 数值型坐标轴默认参数
				    valueAxis: {
				        axisLine: {            // 坐标轴线
				            lineStyle: {       // 属性lineStyle控制线条样式
				                color: '#1790cf'
				            }
				        },
				        splitArea : {
				            show : true,
				            areaStyle : {
				                color: ['rgba(250,250,250,0.1)','rgba(200,200,200,0.1)']
				            }
				        },
				        splitLine: {           // 分隔线
				            lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
				                color: ['#eee']
				            }
				        }
				    },

				    timeline : {
				        lineStyle : {
				            color : '#1790cf'
				        },
				        controlStyle : {
				            normal : { color : '#1790cf'},
				            emphasis : { color : '#1790cf'}
				        }
				    },

				    // K线图默认参数
				    k: {
				        itemStyle: {
				            normal: {
				                color: '#1bb2d8',          // 阳线填充颜色
				                color0: '#99d2dd',      // 阴线填充颜色
				                lineStyle: {
				                    width: 1,
				                    color: '#1c7099',   // 阳线边框颜色
				                    color0: '#88b0bb'   // 阴线边框颜色
				                }
				            }
				        }
				    },
				    
				    map: {
				        itemStyle: {
				            normal: {
				                areaStyle: {
				                    color: '#ddd'
				                },
				                label: {
				                    textStyle: {
				                        color: '#c12e34'
				                    }
				                }
				            },
				            emphasis: {                 // 也是选中样式
				                areaStyle: {
				                    color: '#99d2dd'
				                },
				                label: {
				                    textStyle: {
				                        color: '#c12e34'
				                    }
				                }
				            }
				        }
				    },
				    
				    force : {
				        itemStyle: {
				            normal: {
				                linkStyle : {
				                    color : '#1790cf'
				                }
				            }
				        }
				    },
				    
				    chord : {
				        padding : 4,
				        itemStyle : {
				            normal : {
				                borderWidth: 1,
				                borderColor: 'rgba(128, 128, 128, 0.5)',
				                chordStyle : {
				                    lineStyle : {
				                        color : 'rgba(128, 128, 128, 0.5)'
				                    }
				                }
				            },
				            emphasis : {
				                borderWidth: 1,
				                borderColor: 'rgba(128, 128, 128, 0.5)',
				                chordStyle : {
				                    lineStyle : {
				                        color : 'rgba(128, 128, 128, 0.5)'
				                    }
				                }
				            }
				        }
				    },
				    gauge : {
				        axisLine: {            // 坐标轴线
				            show: true,        // 默认显示，属性show控制显示与否
				            lineStyle: {       // 属性lineStyle控制线条样式
				                color: [[0.2, '#1bb2d8'],[0.8, '#1790cf'],[1, '#1c7099']], 
				                width: 8
				            }
				        },
				        axisTick: {            // 坐标轴小标记
				            splitNumber: 10,   // 每份split细分多少段
				            length :12,        // 属性length控制线长
				            lineStyle: {       // 属性lineStyle控制线条样式
				                color: 'auto'
				            }
				        },
				        axisLabel: {           // 坐标轴文本标签，详见axis.axisLabel
				            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
				                color: 'auto'
				            }
				        },
				        splitLine: {           // 分隔线
				            length : 18,         // 属性length控制线长
				            lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
				                color: 'auto'
				            }
				        },
				        pointer : {
				            length : '90%',
				            color : 'auto'
				        },
				        title : {
				            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
				                color: '#333'
				            }
				        },
				        detail : {
				            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
				                color: 'auto'
				            }
				        }
				    },
				    
				    textStyle: {
				        fontFamily: '微软雅黑, Arial, Verdana, sans-serif'
				    }
				},

					dark:{
				    // 全图默认背景
				    backgroundColor: '#1b1b1b',
				
				    // 默认色板
				    color: [
				        '#FE8463','#9BCA63','#FAD860','#60C0DD','#0084C6',
				        '#D7504B','#C6E579','#26C0C0','#F0805A','#F4E001',
				        '#B5C334'
				    ],
				
				    // 图表标题
				    title: {
				        textStyle: {
				            fontWeight: 'normal',
				            color: '#fff'          // 主标题文字颜色
				        }
				    },
				
				    // 图例
				    legend: {
				        textStyle: {
				            color: '#ccc'          // 图例文字颜色
				        }
				    },
				
				    // 值域
				    dataRange: {
				        itemWidth: 15,
				        color: ['#FFF808','#21BCF9'],
				        textStyle: {
				            color: '#ccc'          // 值域文字颜色
				        }
				    },
				
				    toolbox: {
				        color : ['#fff', '#fff', '#fff', '#fff'],
				        effectiveColor : '#FE8463',
				        disableColor: '#666'
				    },
				
				    // 提示框
				    tooltip: {
				        backgroundColor: 'rgba(250,250,250,0.8)',     // 提示背景颜色，默认为透明度为0.7的黑色
				        axisPointer : {            // 坐标轴指示器，坐标轴触发有效
				            type : 'line',         // 默认为直线，可选为：'line' | 'shadow'
				            lineStyle : {          // 直线指示器样式设置
				                color: '#aaa'
				            },
				            crossStyle: {
				                color: '#aaa'
				            },
				            shadowStyle : {                     // 阴影指示器样式设置
				                color: 'rgba(200,200,200,0.2)'
				            }
				        },
				        textStyle: {
				            color: '#333'
				        }
				    },
				
				    // 区域缩放控制器
				    dataZoom: {
				        dataBackgroundColor: '#555',            // 数据背景颜色
				        fillerColor: 'rgba(200,200,200,0.2)',   // 填充颜色
				        handleColor: '#eee'     // 手柄颜色
				    },
				
				    // 网格
				    grid: {
				        borderWidth: 0
				    },
				
				    // 类目轴
				    categoryAxis: {
				        axisLine: {            // 坐标轴线
				            show: false
				        },
				        axisTick: {            // 坐标轴小标记
				            show: false
				        },
				        axisLabel: {           // 坐标轴文本标签，详见axis.axisLabel
				            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
				                color: '#ccc'
				            }
				        },
				        splitLine: {           // 分隔线
				            show: false
				        }
				    },
				
				    // 数值型坐标轴默认参数
				    valueAxis: {
				        axisLine: {            // 坐标轴线
				            show: false
				        },
				        axisTick: {            // 坐标轴小标记
				            show: false
				        },
				        axisLabel: {           // 坐标轴文本标签，详见axis.axisLabel
				            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
				                color: '#ccc'
				            }
				        },
				        splitLine: {           // 分隔线
				            lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
				                color: ['#aaa'],
				                type: 'dashed'
				            }
				        },
				        splitArea: {           // 分隔区域
				            show: false
				        }
				    },
				
				    polar : {
				        name : {
				            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
				                color: '#ccc'
				            }
				        },
				        axisLine: {            // 坐标轴线
				            lineStyle: {       // 属性lineStyle控制线条样式
				                color: '#ddd'
				            }
				        },
				        splitArea : {
				            show : true,
				            areaStyle : {
				                color: ['rgba(250,250,250,0.2)','rgba(200,200,200,0.2)']
				            }
				        },
				        splitLine : {
				            lineStyle : {
				                color : '#ddd'
				            }
				        }
				    },
				
				    timeline : {
				        label: {
				            textStyle:{
				                color: '#ccc'
				            }
				        },
				        lineStyle : {
				            color : '#aaa'
				        },
				        controlStyle : {
				            normal : { color : '#fff'},
				            emphasis : { color : '#FE8463'}
				        },
				        symbolSize : 3
				    },
				
				    // 折线图默认参数
				    line: {
				        smooth : true
				    },
				
				    // K线图默认参数
				    k: {
				        itemStyle: {
				            normal: {
				                color: '#FE8463',       // 阳线填充颜色
				                color0: '#9BCA63',      // 阴线填充颜色
				                lineStyle: {
				                    width: 1,
				                    color: '#FE8463',   // 阳线边框颜色
				                    color0: '#9BCA63'   // 阴线边框颜色
				                }
				            }
				        }
				    },
				
				    // 雷达图默认参数
				    radar : {
				        symbol: 'emptyCircle',    // 图形类型
				        symbolSize:3
				        //symbol: null,         // 拐点图形类型
				        //symbolRotate : null,  // 图形旋转控制
				    },
				
				    pie: {
				        itemStyle: {
				            normal: {
				                borderWidth: 1,
				                borderColor : 'rgba(255, 255, 255, 0.5)'
				            },
				            emphasis: {
				                borderWidth: 1,
				                borderColor : 'rgba(255, 255, 255, 1)'
				            }
				        }
				    },
				
				    map: {
				        itemStyle: {
				            normal: {
				                borderColor:'rgba(255, 255, 255, 0.5)',
				                areaStyle: {
				                    color: '#ddd'
				                },
				                label: {
				                    textStyle: {
				                        // color: '#ccc'
				                    }
				                }
				            },
				            emphasis: {                 // 也是选中样式
				                areaStyle: {
				                    color: '#FE8463'
				                },
				                label: {
				                    textStyle: {
				                        // color: 'ccc'
				                    }
				                }
				            }
				        }
				    },
				
				    force : {
				        itemStyle: {
				            normal: {
				                linkStyle : {
				                    color : '#fff'
				                }
				            }
				        }
				    },
				
				    chord : {
				        itemStyle : {
				            normal : {
				                borderWidth: 1,
				                borderColor: 'rgba(228, 228, 228, 0.2)',
				                chordStyle : {
				                    lineStyle : {
				                        color : 'rgba(228, 228, 228, 0.2)'
				                    }
				                }
				            },
				            emphasis : {
				                borderWidth: 1,
				                borderColor: 'rgba(228, 228, 228, 0.9)',
				                chordStyle : {
				                    lineStyle : {
				                        color : 'rgba(228, 228, 228, 0.9)'
				                    }
				                }
				            }
				        }
				    },
				
				    gauge : {
				        axisLine: {            // 坐标轴线
				            show: true,        // 默认显示，属性show控制显示与否
				            lineStyle: {       // 属性lineStyle控制线条样式
				                color: [[0.2, '#9BCA63'],[0.8, '#60C0DD'],[1, '#D7504B']],
				                width: 3,
				                shadowColor : '#fff', //默认透明
				                shadowBlur: 10
				            }
				        },
				        axisTick: {            // 坐标轴小标记
				            length :15,        // 属性length控制线长
				            lineStyle: {       // 属性lineStyle控制线条样式
				                color: 'auto',
				                shadowColor : '#fff', //默认透明
				                shadowBlur: 10
				            }
				        },
				        axisLabel: {            // 坐标轴小标记
				            textStyle: {       // 属性lineStyle控制线条样式
				                fontWeight: 'bolder',
				                color: '#fff',
				                shadowColor : '#fff', //默认透明
				                shadowBlur: 10
				            }
				        },
				        splitLine: {           // 分隔线
				            length :25,         // 属性length控制线长
				            lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
				                width:3,
				                color: '#fff',
				                shadowColor : '#fff', //默认透明
				                shadowBlur: 10
				            }
				        },
				        pointer: {           // 分隔线
				            shadowColor : '#fff', //默认透明
				            shadowBlur: 5
				        },
				        title : {
				            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
				                fontWeight: 'bolder',
				                fontSize: 20,
				                fontStyle: 'italic',
				                color: '#fff',
				                shadowColor : '#fff', //默认透明
				                shadowBlur: 10
				            }
				        },
				        detail : {
				            shadowColor : '#fff', //默认透明
				            shadowBlur: 5,
				            offsetCenter: [0, '50%'],       // x, y，单位px
				            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
				                fontWeight: 'bolder',
				                color: '#fff'
				            }
				        }
				    },
				
				    funnel : {
				        itemStyle: {
				            normal: {
				                borderColor : 'rgba(255, 255, 255, 0.5)',
				                borderWidth: 1
				            },
				            emphasis: {
				                borderColor : 'rgba(255, 255, 255, 1)',
				                borderWidth: 1
				            }
				        }
				    },
				
				    textStyle: {
				        fontFamily: '微软雅黑, Arial, Verdana, sans-serif'
				    }
				},

				gray:{
				    // 默认色板
				    color: [
				        '#757575','#c7c7c7','#dadada',
				        '#8b8b8b','#b5b5b5','#e9e9e9'
				    ],

				    // 图表标题
				    title: {
				        textStyle: {
				            fontWeight: 'normal',
				            color: '#757575'
				        }
				    },
				    
				    // 值域
				    dataRange: {
				        color:['#636363','#dcdcdc']
				    },

				    // 工具箱
				    toolbox: {
				        color : ['#757575','#757575','#757575','#757575']
				    },

				    // 提示框
				    tooltip: {
				        backgroundColor: 'rgba(0,0,0,0.5)',
				        axisPointer : {            // 坐标轴指示器，坐标轴触发有效
				            type : 'line',         // 默认为直线，可选为：'line' | 'shadow'
				            lineStyle : {          // 直线指示器样式设置
				                color: '#757575',
				                type: 'dashed'
				            },
				            crossStyle: {
				                color: '#757575'
				            },
				            shadowStyle : {                     // 阴影指示器样式设置
				                color: 'rgba(200,200,200,0.3)'
				            }
				        }
				    },

				    // 区域缩放控制器
				    dataZoom: {
				        dataBackgroundColor: '#eee',            // 数据背景颜色
				        fillerColor: 'rgba(117,117,117,0.2)',   // 填充颜色
				        handleColor: '#757575'     // 手柄颜色
				    },
				    
				    // 网格
				    grid: {
				        borderWidth: 0
				    },

				    // 类目轴
				    categoryAxis: {
				        axisLine: {            // 坐标轴线
				            lineStyle: {       // 属性lineStyle控制线条样式
				                color: '#757575'
				            }
				        },
				        splitLine: {           // 分隔线
				            lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
				                color: ['#eee']
				            }
				        }
				    },

				    // 数值型坐标轴默认参数
				    valueAxis: {
				        axisLine: {            // 坐标轴线
				            lineStyle: {       // 属性lineStyle控制线条样式
				                color: '#757575'
				            }
				        },
				        splitArea : {
				            show : true,
				            areaStyle : {
				                color: ['rgba(250,250,250,0.1)','rgba(200,200,200,0.1)']
				            }
				        },
				        splitLine: {           // 分隔线
				            lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
				                color: ['#eee']
				            }
				        }
				    },

				    timeline : {
				        lineStyle : {
				            color : '#757575'
				        },
				        controlStyle : {
				            normal : { color : '#757575'},
				            emphasis : { color : '#757575'}
				        }
				    },

				    // K线图默认参数
				    k: {
				        itemStyle: {
				            normal: {
				                color: '#8b8b8b',          // 阳线填充颜色
				                color0: '#dadada',      // 阴线填充颜色
				                lineStyle: {
				                    width: 1,
				                    color: '#757575',   // 阳线边框颜色
				                    color0: '#c7c7c7'   // 阴线边框颜色
				                }
				            }
				        }
				    },
				    
				    map: {
				        itemStyle: {
				            normal: {
				                areaStyle: {
				                    color: '#ddd'
				                },
				                label: {
				                    textStyle: {
				                        color: '#c12e34'
				                    }
				                }
				            },
				            emphasis: {                 // 也是选中样式
				                areaStyle: {
				                    color: '#99d2dd'
				                },
				                label: {
				                    textStyle: {
				                        color: '#c12e34'
				                    }
				                }
				            }
				        }
				    },
				    
				    force : {
				        itemStyle: {
				            normal: {
				                linkStyle : {
				                    color : '#757575'
				                }
				            }
				        }
				    },
				    
				    chord : {
				        padding : 4,
				        itemStyle : {
				            normal : {
				                borderWidth: 1,
				                borderColor: 'rgba(128, 128, 128, 0.5)',
				                chordStyle : {
				                    lineStyle : {
				                        color : 'rgba(128, 128, 128, 0.5)'
				                    }
				                }
				            },
				            emphasis : {
				                borderWidth: 1,
				                borderColor: 'rgba(128, 128, 128, 0.5)',
				                chordStyle : {
				                    lineStyle : {
				                        color : 'rgba(128, 128, 128, 0.5)'
				                    }
				                }
				            }
				        }
				    },
				    
				    gauge : {
				        axisLine: {            // 坐标轴线
				            show: true,        // 默认显示，属性show控制显示与否
				            lineStyle: {       // 属性lineStyle控制线条样式
				                color: [[0.2, '#b5b5b5'],[0.8, '#757575'],[1, '#5c5c5c']], 
				                width: 8
				            }
				        },
				        axisTick: {            // 坐标轴小标记
				            splitNumber: 10,   // 每份split细分多少段
				            length :12,        // 属性length控制线长
				            lineStyle: {       // 属性lineStyle控制线条样式
				                color: 'auto'
				            }
				        },
				        axisLabel: {           // 坐标轴文本标签，详见axis.axisLabel
				            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
				                color: 'auto'
				            }
				        },
				        splitLine: {           // 分隔线
				            length : 18,         // 属性length控制线长
				            lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
				                color: 'auto'
				            }
				        },
				        pointer : {
				            length : '90%',
				            color : 'auto'
				        },
				        title : {
				            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
				                color: '#333'
				            }
				        },
				        detail : {
				            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
				                color: 'auto'
				            }
				        }
				    },
				    
				    textStyle: {
				        fontFamily: '微软雅黑, Arial, Verdana, sans-serif'
				    }
				},
				green:{
				    // 默认色板
				    color: [
				        '#408829','#68a54a','#a9cba2','#86b379',
				        '#397b29','#8abb6f','#759c6a','#bfd3b7'
				    ],

				    // 图表标题
				    title: {
				        textStyle: {
				            fontWeight: 'normal',
				            color: '#408829'
				        }
				    },
				    
				    // 值域
				    dataRange: {
				        color:['#1f610a','#97b58d']
				    },

				    // 工具箱
				    toolbox: {
				        color : ['#408829','#408829','#408829','#408829']
				    },

				    // 提示框
				    tooltip: {
				        backgroundColor: 'rgba(0,0,0,0.5)',
				        axisPointer : {            // 坐标轴指示器，坐标轴触发有效
				            type : 'line',         // 默认为直线，可选为：'line' | 'shadow'
				            lineStyle : {          // 直线指示器样式设置
				                color: '#408829',
				                type: 'dashed'
				            },
				            crossStyle: {
				                color: '#408829'
				            },
				            shadowStyle : {                     // 阴影指示器样式设置
				                color: 'rgba(200,200,200,0.3)'
				            }
				        }
				    },

				    // 区域缩放控制器
				    dataZoom: {
				        dataBackgroundColor: '#eee',            // 数据背景颜色
				        fillerColor: 'rgba(64,136,41,0.2)',   // 填充颜色
				        handleColor: '#408829'     // 手柄颜色
				    },
				    
				    // 网格
				    grid: {
				        borderWidth: 0
				    },

				    // 类目轴
				    categoryAxis: {
				        axisLine: {            // 坐标轴线
				            lineStyle: {       // 属性lineStyle控制线条样式
				                color: '#408829'
				            }
				        },
				        splitLine: {           // 分隔线
				            lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
				                color: ['#eee']
				            }
				        }
				    },

				    // 数值型坐标轴默认参数
				    valueAxis: {
				        axisLine: {            // 坐标轴线
				            lineStyle: {       // 属性lineStyle控制线条样式
				                color: '#408829'
				            }
				        },
				        splitArea : {
				            show : true,
				            areaStyle : {
				                color: ['rgba(250,250,250,0.1)','rgba(200,200,200,0.1)']
				            }
				        },
				        splitLine: {           // 分隔线
				            lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
				                color: ['#eee']
				            }
				        }
				    },

				    timeline : {
				        lineStyle : {
				            color : '#408829'
				        },
				        controlStyle : {
				            normal : { color : '#408829'},
				            emphasis : { color : '#408829'}
				        }
				    },

				    // K线图默认参数
				    k: {
				        itemStyle: {
				            normal: {
				                color: '#68a54a',          // 阳线填充颜色
				                color0: '#a9cba2',      // 阴线填充颜色
				                lineStyle: {
				                    width: 1,
				                    color: '#408829',   // 阳线边框颜色
				                    color0: '#86b379'   // 阴线边框颜色
				                }
				            }
				        }
				    },
				    
				    map: {
				        itemStyle: {
				            normal: {
				                areaStyle: {
				                    color: '#ddd'
				                },
				                label: {
				                    textStyle: {
				                        color: '#c12e34'
				                    }
				                }
				            },
				            emphasis: {                 // 也是选中样式
				                areaStyle: {
				                    color: '#99d2dd'
				                },
				                label: {
				                    textStyle: {
				                        color: '#c12e34'
				                    }
				                }
				            }
				        }
				    },
				    
				    force : {
				        itemStyle: {
				            normal: {
				                linkStyle : {
				                    color : '#408829'
				                }
				            }
				        }
				    },
				    
				    chord : {
				        padding : 4,
				        itemStyle : {
				            normal : {
				                borderWidth: 1,
				                borderColor: 'rgba(128, 128, 128, 0.5)',
				                chordStyle : {
				                    lineStyle : {
				                        color : 'rgba(128, 128, 128, 0.5)'
				                    }
				                }
				            },
				            emphasis : {
				                borderWidth: 1,
				                borderColor: 'rgba(128, 128, 128, 0.5)',
				                chordStyle : {
				                    lineStyle : {
				                        color : 'rgba(128, 128, 128, 0.5)'
				                    }
				                }
				            }
				        }
				    },
				    
				    gauge : {
				        axisLine: {            // 坐标轴线
				            show: true,        // 默认显示，属性show控制显示与否
				            lineStyle: {       // 属性lineStyle控制线条样式
				                color: [[0.2, '#86b379'],[0.8, '#68a54a'],[1, '#408829']], 
				                width: 8
				            }
				        },
				        axisTick: {            // 坐标轴小标记
				            splitNumber: 10,   // 每份split细分多少段
				            length :12,        // 属性length控制线长
				            lineStyle: {       // 属性lineStyle控制线条样式
				                color: 'auto'
				            }
				        },
				        axisLabel: {           // 坐标轴文本标签，详见axis.axisLabel
				            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
				                color: 'auto'
				            }
				        },
				        splitLine: {           // 分隔线
				            length : 18,         // 属性length控制线长
				            lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
				                color: 'auto'
				            }
				        },
				        pointer : {
				            length : '90%',
				            color : 'auto'
				        },
				        title : {
				            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
				                color: '#333'
				            }
				        },
				        detail : {
				            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
				                color: 'auto'
				            }
				        }
				    },
				    
				    textStyle: {
				        fontFamily: '微软雅黑, Arial, Verdana, sans-serif'
				    }
				},
				helianthus:{
				    backgroundColor: '#F2F2E6',
				    // 默认色板
				    color: [
				        '#44B7D3','#E42B6D','#F4E24E','#FE9616','#8AED35',
				        '#ff69b4','#ba55d3','#cd5c5c','#ffa500','#40e0d0',
				        '#E95569','#ff6347','#7b68ee','#00fa9a','#ffd700',
				        '#6699FF','#ff6666','#3cb371','#b8860b','#30e0e0'
				    ],

				    // 图表标题
				    title: {
				        backgroundColor: '#F2F2E6',
				        itemGap: 10,               // 主副标题纵向间隔，单位px，默认为10，
				        textStyle: {
				            color: '#8A826D'          // 主标题文字颜色
				        },
				        subtextStyle: {
				            color: '#E877A3'          // 副标题文字颜色
				        }
				    },

				    // 值域
				    dataRange: {
				        x:'right',
				        y:'center',
				        itemWidth: 5,
				        itemHeight:25,
				        color:['#E42B6D','#F9AD96'],
				        text:['高','低'],         // 文本，默认为数值文本
				        textStyle: {
				            color: '#8A826D'          // 值域文字颜色
				        }
				    },

				    toolbox: {
				        color : ['#E95569','#E95569','#E95569','#E95569'],
				        effectiveColor : '#ff4500',
				        itemGap: 8
				    },

				    // 提示框
				    tooltip: {
				        backgroundColor: 'rgba(138,130,109,0.7)',     // 提示背景颜色，默认为透明度为0.7的黑色
				        axisPointer : {            // 坐标轴指示器，坐标轴触发有效
				            type : 'line',         // 默认为直线，可选为：'line' | 'shadow'
				            lineStyle : {          // 直线指示器样式设置
				                color: '#6B6455',
				                type: 'dashed'
				            },
				            crossStyle: {          //十字准星指示器
				                color: '#A6A299'
				            },
				            shadowStyle : {                     // 阴影指示器样式设置
				                color: 'rgba(200,200,200,0.3)'
				            }
				        }
				    },

				    // 区域缩放控制器
				    dataZoom: {
				        dataBackgroundColor: 'rgba(130,197,209,0.6)',            // 数据背景颜色
				        fillerColor: 'rgba(233,84,105,0.1)',   // 填充颜色
				        handleColor: 'rgba(107,99,84,0.8)'     // 手柄颜色
				    },

				    // 网格
				    grid: {
				        borderWidth:0
				    },

				    // 类目轴
				    categoryAxis: {
				        axisLine: {            // 坐标轴线
				            lineStyle: {       // 属性lineStyle控制线条样式
				                color: '#6B6455'
				            }
				        },
				        splitLine: {           // 分隔线
				            show: false
				        }
				    },

				    // 数值型坐标轴默认参数
				    valueAxis: {
				        axisLine: {            // 坐标轴线
				            show: false
				        },
				        splitArea : {
				            show: false
				        },
				        splitLine: {           // 分隔线
				            lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
				                color: ['#FFF'],
				                type: 'dashed'
				            }
				        }
				    },

				    polar : {
				        axisLine: {            // 坐标轴线
				            lineStyle: {       // 属性lineStyle控制线条样式
				                color: '#ddd'
				            }
				        },
				        splitArea : {
				            show : true,
				            areaStyle : {
				                color: ['rgba(250,250,250,0.2)','rgba(200,200,200,0.2)']
				            }
				        },
				        splitLine : {
				            lineStyle : {
				                color : '#ddd'
				            }
				        }
				    },

				    timeline : {
				        lineStyle : {
				            color : '#6B6455'
				        },
				        controlStyle : {
				            normal : { color : '#6B6455'},
				            emphasis : { color : '#6B6455'}
				        },
				        symbol : 'emptyCircle',
				        symbolSize : 3
				    },

				    // 柱形图默认参数
				    bar: {
				        itemStyle: {
				            normal: {
				                barBorderRadius: 0
				            },
				            emphasis: {
				                barBorderRadius: 0
				            }
				        }
				    },

				    // 折线图默认参数
				    line: {
				        smooth : true,
				        symbol: 'emptyCircle',  // 拐点图形类型
				        symbolSize: 3           // 拐点图形大小
				    },


				    // K线图默认参数
				    k: {
				        itemStyle: {
				            normal: {
				                color: '#E42B6D',       // 阳线填充颜色
				                color0: '#44B7D3',      // 阴线填充颜色
				                lineStyle: {
				                    width: 1,
				                    color: '#E42B6D',   // 阳线边框颜色
				                    color0: '#44B7D3'   // 阴线边框颜色
				                }
				            }
				        }
				    },

				    // 散点图默认参数
				    scatter: {
				        itemStyle: {
				            normal: {
				                borderWidth:1,
				                borderColor:'rgba(200,200,200,0.5)'
				            },
				            emphasis: {
				                borderWidth:0
				            }
				        },
				        symbol: 'circle',    // 图形类型
				        symbolSize: 4        // 图形大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2
				    },

				    // 雷达图默认参数
				    radar : {
				        symbol: 'emptyCircle',    // 图形类型
				        symbolSize:3
				        //symbol: null,         // 拐点图形类型
				        //symbolRotate : null,  // 图形旋转控制
				    },

				    map: {
				        itemStyle: {
				            normal: {
				                areaStyle: {
				                    color: '#ddd'
				                },
				                label: {
				                    textStyle: {
				                        color: '#E42B6D'
				                    }
				                }
				            },
				            emphasis: {                 // 也是选中样式
				                areaStyle: {
				                    color: '#fe994e'
				                },
				                label: {
				                    textStyle: {
				                        color: 'rgb(100,0,0)'
				                    }
				                }
				            }
				        }
				    },

				    force : {
				        itemStyle: {
				            normal: {
				                nodeStyle : {
				                    borderColor : 'rgba(0,0,0,0)'
				                },
				                linkStyle : {
				                    color : '#6B6455'
				                }
				            }
				        }
				    },

				    chord : {
				        itemStyle : {
				            normal : {
				                chordStyle : {
				                    lineStyle : {
				                        width : 0,
				                        color : 'rgba(128, 128, 128, 0.5)'
				                    }
				                }
				            },
				            emphasis : {
				                chordStyle : {
				                    lineStyle : {
				                        width : 1,
				                        color : 'rgba(128, 128, 128, 0.5)'
				                    }
				                }
				            }
				        }
				    },

				    gauge : {                  // 仪表盘
				        center:['50%','80%'],
				        radius:'100%',
				        startAngle: 180,
				        endAngle : 0,
				        axisLine: {            // 坐标轴线
				            show: true,        // 默认显示，属性show控制显示与否
				            lineStyle: {       // 属性lineStyle控制线条样式
				                color: [[0.2, '#44B7D3'],[0.8, '#6B6455'],[1, '#E42B6D']],
				                width: '40%'
				            }
				        },
				        axisTick: {            // 坐标轴小标记
				            splitNumber: 2,   // 每份split细分多少段
				            length: 5,        // 属性length控制线长
				            lineStyle: {       // 属性lineStyle控制线条样式
				                color: '#fff'
				            }
				        },
				        axisLabel: {           // 坐标轴文本标签，详见axis.axisLabel
				            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
				                color: '#fff',
				                fontWeight:'bolder'
				            }
				        },
				        splitLine: {           // 分隔线
				            length: '5%',         // 属性length控制线长
				            lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
				                color: '#fff'
				            }
				        },
				        pointer : {
				            width : '40%',
				            length: '80%',
				            color: '#fff'
				        },
				        title : {
				          offsetCenter: [0, -20],       // x, y，单位px
				          textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
				            color: 'auto',
				            fontSize: 20
				          }
				        },
				        detail : {
				            offsetCenter: [0, 0],       // x, y，单位px
				            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
				                color: 'auto',
				                fontSize: 40
				            }
				        }
				    },

				    textStyle: {
				        fontFamily: '微软雅黑, Arial, Verdana, sans-serif'
				    }
				},
				infographic:{
				    // 默认色板
				    color: [
				        '#C1232B','#B5C334','#FCCE10','#E87C25','#27727B',
				        '#FE8463','#9BCA63','#FAD860','#F3A43B','#60C0DD',
				        '#D7504B','#C6E579','#F4E001','#F0805A','#26C0C0'
				    ],

				    // 图表标题
				    title: {
				        textStyle: {
				            fontWeight: 'normal',
				            color: '#27727B'          // 主标题文字颜色
				        }
				    },

				    // 值域
				    dataRange: {
				        x:'right',
				        y:'center',
				        itemWidth: 5,
				        itemHeight:25,
				        color:['#C1232B','#FCCE10']
				    },

				    toolbox: {
				        color : [
				            '#C1232B','#B5C334','#FCCE10','#E87C25','#27727B',
				            '#FE8463','#9BCA63','#FAD860','#F3A43B','#60C0DD'
				        ],
				        effectiveColor : '#ff4500'
				    },

				    // 提示框
				    tooltip: {
				        backgroundColor: 'rgba(50,50,50,0.5)',     // 提示背景颜色，默认为透明度为0.7的黑色
				        axisPointer : {            // 坐标轴指示器，坐标轴触发有效
				            type : 'line',         // 默认为直线，可选为：'line' | 'shadow'
				            lineStyle : {          // 直线指示器样式设置
				                color: '#27727B',
				                type: 'dashed'
				            },
				            crossStyle: {
				                color: '#27727B'
				            },
				            shadowStyle : {                     // 阴影指示器样式设置
				                color: 'rgba(200,200,200,0.3)'
				            }
				        }
				    },

				    // 区域缩放控制器
				    dataZoom: {
				        dataBackgroundColor: 'rgba(181,195,52,0.3)',            // 数据背景颜色
				        fillerColor: 'rgba(181,195,52,0.2)',   // 填充颜色
				        handleColor: '#27727B'    // 手柄颜色
				    },

				    // 网格
				    grid: {
				        borderWidth:0
				    },

				    // 类目轴
				    categoryAxis: {
				        axisLine: {            // 坐标轴线
				            lineStyle: {       // 属性lineStyle控制线条样式
				                color: '#27727B'
				            }
				        },
				        splitLine: {           // 分隔线
				            show: false
				        }
				    },

				    // 数值型坐标轴默认参数
				    valueAxis: {
				        axisLine: {            // 坐标轴线
				            show: false
				        },
				        splitArea : {
				            show: false
				        },
				        splitLine: {           // 分隔线
				            lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
				                color: ['#ccc'],
				                type: 'dashed'
				            }
				        }
				    },

				    polar : {
				        axisLine: {            // 坐标轴线
				            lineStyle: {       // 属性lineStyle控制线条样式
				                color: '#ddd'
				            }
				        },
				        splitArea : {
				            show : true,
				            areaStyle : {
				                color: ['rgba(250,250,250,0.2)','rgba(200,200,200,0.2)']
				            }
				        },
				        splitLine : {
				            lineStyle : {
				                color : '#ddd'
				            }
				        }
				    },

				    timeline : {
				        lineStyle : {
				            color : '#27727B'
				        },
				        controlStyle : {
				            normal : { color : '#27727B'},
				            emphasis : { color : '#27727B'}
				        },
				        symbol : 'emptyCircle',
				        symbolSize : 3
				    },

				    // 折线图默认参数
				    line: {
				        itemStyle: {
				            normal: {
				                borderWidth:2,
				                borderColor:'#fff',
				                lineStyle: {
				                    width: 3
				                }
				            },
				            emphasis: {
				                borderWidth:0
				            }
				        },
				        symbol: 'circle',  // 拐点图形类型
				        symbolSize: 3.5           // 拐点图形大小
				    },

				    // K线图默认参数
				    k: {
				        itemStyle: {
				            normal: {
				                color: '#C1232B',       // 阳线填充颜色
				                color0: '#B5C334',      // 阴线填充颜色
				                lineStyle: {
				                    width: 1,
				                    color: '#C1232B',   // 阳线边框颜色
				                    color0: '#B5C334'   // 阴线边框颜色
				                }
				            }
				        }
				    },

				    // 散点图默认参数
				    scatter: {
				        itemStyle: {
				            normal: {
				                borderWidth:1,
				                borderColor:'rgba(200,200,200,0.5)'
				            },
				            emphasis: {
				                borderWidth:0
				            }
				        },
				        symbol: 'star4',    // 图形类型
				        symbolSize: 4        // 图形大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2
				    },

				    // 雷达图默认参数
				    radar : {
				        symbol: 'emptyCircle',    // 图形类型
				        symbolSize:3
				        //symbol: null,         // 拐点图形类型
				        //symbolRotate : null,  // 图形旋转控制
				    },

				    map: {
				        itemStyle: {
				            normal: {
				                areaStyle: {
				                    color: '#ddd'
				                },
				                label: {
				                    textStyle: {
				                        color: '#C1232B'
				                    }
				                }
				            },
				            emphasis: {                 // 也是选中样式
				                areaStyle: {
				                    color: '#fe994e'
				                },
				                label: {
				                    textStyle: {
				                        color: 'rgb(100,0,0)'
				                    }
				                }
				            }
				        }
				    },

				    force : {
				        itemStyle: {
				            normal: {
				                linkStyle : {
				                    color : '#27727B'
				                }
				            }
				        }
				    },

				    chord : {
				        itemStyle : {
				            normal : {
				                borderWidth: 1,
				                borderColor: 'rgba(128, 128, 128, 0.5)',
				                chordStyle : {
				                    lineStyle : {
				                        color : 'rgba(128, 128, 128, 0.5)'
				                    }
				                }
				            },
				            emphasis : {
				                borderWidth: 1,
				                borderColor: 'rgba(128, 128, 128, 0.5)',
				                chordStyle : {
				                    lineStyle : {
				                        color : 'rgba(128, 128, 128, 0.5)'
				                    }
				                }
				            }
				        }
				    },

				    gauge : {
				        center:['50%','80%'],
				        radius:'100%',
				        startAngle: 180,
				        endAngle : 0,
				        axisLine: {            // 坐标轴线
				            show: true,        // 默认显示，属性show控制显示与否
				            lineStyle: {       // 属性lineStyle控制线条样式
				                color: [[0.2, '#B5C334'],[0.8, '#27727B'],[1, '#C1232B']],
				                width: '40%'
				            }
				        },
				        axisTick: {            // 坐标轴小标记
				            splitNumber: 2,   // 每份split细分多少段
				            length: 5,        // 属性length控制线长
				            lineStyle: {       // 属性lineStyle控制线条样式
				                color: '#fff'
				            }
				        },
				        axisLabel: {           // 坐标轴文本标签，详见axis.axisLabel
				            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
				                color: '#fff',
				                fontWeight:'bolder'
				            }
				        },
				        splitLine: {           // 分隔线
				            length: '5%',         // 属性length控制线长
				            lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
				                color: '#fff'
				            }
				        },
				        pointer : {
				            width : '40%',
				            length: '80%',
				            color: '#fff'
				        },
				        title : {
				          offsetCenter: [0, -20],       // x, y，单位px
				          textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
				            color: 'auto',
				            fontSize: 20
				          }
				        },
				        detail : {
				            offsetCenter: [0, 0],       // x, y，单位px
				            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
				                color: 'auto',
				                fontSize: 40
				            }
				        }
				    },

				    textStyle: {
				        fontFamily: '微软雅黑, Arial, Verdana, sans-serif'
				    }
				},

				macarons:{
				    // 默认色板
				    color: [
				        '#2ec7c9','#b6a2de','#5ab1ef','#ffb980','#d87a80',
				        '#8d98b3','#e5cf0d','#97b552','#95706d','#dc69aa',
				        '#07a2a4','#9a7fd1','#588dd5','#f5994e','#c05050',
				        '#59678c','#c9ab00','#7eb00a','#6f5553','#c14089'
				    ],

				    // 图表标题
				    title: {
				        textStyle: {
				            fontWeight: 'normal',
				            color: '#008acd'          // 主标题文字颜色
				        }
				    },
				    
				    // 值域
				    dataRange: {
				        itemWidth: 15,
				        color: ['#5ab1ef','#e0ffff']
				    },

				    // 工具箱
				    toolbox: {
				        color : ['#1e90ff', '#1e90ff', '#1e90ff', '#1e90ff'],
				        effectiveColor : '#ff4500'
				    },

				    // 提示框
				    tooltip: {
				        backgroundColor: 'rgba(50,50,50,0.5)',     // 提示背景颜色，默认为透明度为0.7的黑色
				        axisPointer : {            // 坐标轴指示器，坐标轴触发有效
				            type : 'line',         // 默认为直线，可选为：'line' | 'shadow'
				            lineStyle : {          // 直线指示器样式设置
				                color: '#008acd'
				            },
				            crossStyle: {
				                color: '#008acd'
				            },
				            shadowStyle : {                     // 阴影指示器样式设置
				                color: 'rgba(200,200,200,0.2)'
				            }
				        }
				    },

				    // 区域缩放控制器
				    dataZoom: {
				        dataBackgroundColor: '#efefff',            // 数据背景颜色
				        fillerColor: 'rgba(182,162,222,0.2)',   // 填充颜色
				        handleColor: '#008acd'    // 手柄颜色
				    },

				    // 网格
				    grid: {
				        borderColor: '#eee'
				    },

				    // 类目轴
				    categoryAxis: {
				        axisLine: {            // 坐标轴线
				            lineStyle: {       // 属性lineStyle控制线条样式
				                color: '#008acd'
				            }
				        },
				        splitLine: {           // 分隔线
				            lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
				                color: ['#eee']
				            }
				        }
				    },

				    // 数值型坐标轴默认参数
				    valueAxis: {
				        axisLine: {            // 坐标轴线
				            lineStyle: {       // 属性lineStyle控制线条样式
				                color: '#008acd'
				            }
				        },
				        splitArea : {
				            show : true,
				            areaStyle : {
				                color: ['rgba(250,250,250,0.1)','rgba(200,200,200,0.1)']
				            }
				        },
				        splitLine: {           // 分隔线
				            lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
				                color: ['#eee']
				            }
				        }
				    },

				    polar : {
				        axisLine: {            // 坐标轴线
				            lineStyle: {       // 属性lineStyle控制线条样式
				                color: '#ddd'
				            }
				        },
				        splitArea : {
				            show : true,
				            areaStyle : {
				                color: ['rgba(250,250,250,0.2)','rgba(200,200,200,0.2)']
				            }
				        },
				        splitLine : {
				            lineStyle : {
				                color : '#ddd'
				            }
				        }
				    },

				    timeline : {
				        lineStyle : {
				            color : '#008acd'
				        },
				        controlStyle : {
				            normal : { color : '#008acd'},
				            emphasis : { color : '#008acd'}
				        },
				        symbol : 'emptyCircle',
				        symbolSize : 3
				    },

				    // 柱形图默认参数
				    bar: {
				        itemStyle: {
				            normal: {
				                barBorderRadius: 5
				            },
				            emphasis: {
				                barBorderRadius: 5
				            }
				        }
				    },

				    // 折线图默认参数
				    line: {
				        smooth : true,
				        symbol: 'emptyCircle',  // 拐点图形类型
				        symbolSize: 3           // 拐点图形大小
				    },
				    
				    // K线图默认参数
				    k: {
				        itemStyle: {
				            normal: {
				                color: '#d87a80',       // 阳线填充颜色
				                color0: '#2ec7c9',      // 阴线填充颜色
				                lineStyle: {
				                    color: '#d87a80',   // 阳线边框颜色
				                    color0: '#2ec7c9'   // 阴线边框颜色
				                }
				            }
				        }
				    },
				    
				    // 散点图默认参数
				    scatter: {
				        symbol: 'circle',    // 图形类型
				        symbolSize: 4        // 图形大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2
				    },

				    // 雷达图默认参数
				    radar : {
				        symbol: 'emptyCircle',    // 图形类型
				        symbolSize:3
				        //symbol: null,         // 拐点图形类型
				        //symbolRotate : null,  // 图形旋转控制
				    },

				    map: {
				        itemStyle: {
				            normal: {
				                areaStyle: {
				                    color: '#ddd'
				                },
				                label: {
				                    textStyle: {
				                        color: '#d87a80'
				                    }
				                }
				            },
				            emphasis: {                 // 也是选中样式
				                areaStyle: {
				                    color: '#fe994e'
				                }
				            }
				        }
				    },
				    
				    force : {
				        itemStyle: {
				            normal: {
				                linkStyle : {
				                    color : '#1e90ff'
				                }
				            }
				        }
				    },

				    chord : {
				        itemStyle : {
				            normal : {
				                borderWidth: 1,
				                borderColor: 'rgba(128, 128, 128, 0.5)',
				                chordStyle : {
				                    lineStyle : {
				                        color : 'rgba(128, 128, 128, 0.5)'
				                    }
				                }
				            },
				            emphasis : {
				                borderWidth: 1,
				                borderColor: 'rgba(128, 128, 128, 0.5)',
				                chordStyle : {
				                    lineStyle : {
				                        color : 'rgba(128, 128, 128, 0.5)'
				                    }
				                }
				            }
				        }
				    },

				    gauge : {
				        axisLine: {            // 坐标轴线
				            lineStyle: {       // 属性lineStyle控制线条样式
				                color: [[0.2, '#2ec7c9'],[0.8, '#5ab1ef'],[1, '#d87a80']], 
				                width: 10
				            }
				        },
				        axisTick: {            // 坐标轴小标记
				            splitNumber: 10,   // 每份split细分多少段
				            length :15,        // 属性length控制线长
				            lineStyle: {       // 属性lineStyle控制线条样式
				                color: 'auto'
				            }
				        },
				        splitLine: {           // 分隔线
				            length :22,         // 属性length控制线长
				            lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
				                color: 'auto'
				            }
				        },
				        pointer : {
				            width : 5
				        }
				    },
				    
				    textStyle: {
				        fontFamily: '微软雅黑, Arial, Verdana, sans-serif'
				    }
				},
				macarons2:{
				    // 默认色板
				    color: ['#ed9678','#e7dac9','#cb8e85','#f3f39d','#c8e49c',
				            '#f16d7a','#f3d999','#d3758f','#dcc392','#2e4783',
				            '#82b6e9','#ff6347','#a092f1','#0a915d','#eaf889',
				            '#6699FF','#ff6666','#3cb371','#d5b158','#38b6b6'],
				    
				    // 值域
				    dataRange: {
				        color:['#cb8e85','#e7dac9'],//颜色 
				        //text:['高','低'],         // 文本，默认为数值文本
				        textStyle: {
				            color: '#333'          // 值域文字颜色
				        }
				    },


				    // 柱形图默认参数
				    bar: {
				        barMinHeight: 0,          // 最小高度改为0
				        // barWidth: null,        // 默认自适应
				        barGap: '30%',            // 柱间距离，默认为柱形宽度的30%，可设固定值
				        barCategoryGap : '20%',   // 类目间柱形距离，默认为类目间距的20%，可设固定值
				        itemStyle: {
				            normal: {
				                // color: '各异',
				                barBorderColor: '#fff',       // 柱条边线
				                barBorderRadius: 0,           // 柱条边线圆角，单位px，默认为0
				                barBorderWidth: 1,            // 柱条边线线宽，单位px，默认为1
				                label: {
				                    show: false
				                    // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为
				                    //           'inside'|'left'|'right'|'top'|'bottom'
				                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
				                }
				            },
				            emphasis: {
				                // color: '各异',
				                barBorderColor: 'rgba(0,0,0,0)',   // 柱条边线
				                barBorderRadius: 0,                // 柱条边线圆角，单位px，默认为0
				                barBorderWidth: 1,                 // 柱条边线线宽，单位px，默认为1
				                label: {
				                    show: false
				                    // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为
				                    //           'inside'|'left'|'right'|'top'|'bottom'
				                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
				                }
				            }
				        }
				    },

				    // 折线图默认参数
				    line: {
				        itemStyle: {
				            normal: {
				                // color: 各异,
				                label: {
				                    show: false
				                    // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为
				                    //           'inside'|'left'|'right'|'top'|'bottom'
				                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
				                },
				                lineStyle: {
				                    width: 2,
				                    type: 'solid',
				                    shadowColor : 'rgba(0,0,0,0)', //默认透明
				                    shadowBlur: 5,
				                    shadowOffsetX: 3,
				                    shadowOffsetY: 3
				                }
				            },
				            emphasis: {
				                // color: 各异,
				                label: {
				                    show: false
				                    // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为
				                    //           'inside'|'left'|'right'|'top'|'bottom'
				                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
				                }
				            }
				        },
				        //smooth : false,
				        //symbol: null,         // 拐点图形类型
				        symbolSize: 2,          // 拐点图形大小
				        //symbolRotate : null,  // 拐点图形旋转控制
				        showAllSymbol: false    // 标志图形默认只有主轴显示（随主轴标签间隔隐藏策略）
				    },
				    
				    // K线图默认参数
				    k: {
				        // barWidth : null          // 默认自适应
				        // barMaxWidth : null       // 默认自适应 
				        itemStyle: {
				            normal: {
				                color: '#fe9778',          // 阳线填充颜色
				                color0: '#e7dac9',      // 阴线填充颜色
				                lineStyle: {
				                    width: 1,
				                    color: '#f78766',   // 阳线边框颜色
				                    color0: '#f1ccb8'   // 阴线边框颜色
				                }
				            },
				            emphasis: {
				                // color: 各异,
				                // color0: 各异
				            }
				        }
				    },

				    // 饼图默认参数
				    pie: {
				        center : ['50%', '50%'],    // 默认全局居中
				        radius : [0, '75%'],
				        clockWise : false,          // 默认逆时针
				        startAngle: 90,
				        minAngle: 0,                // 最小角度改为0
				        selectedOffset: 10,         // 选中是扇区偏移量
				        itemStyle: {
				            normal: {
				                // color: 各异,
				                borderColor: '#fff',
				                borderWidth: 1,
				                label: {
				                    show: true,
				                    position: 'outer',
				                  textStyle: {color: '#1b1b1b'},
				                  lineStyle: {color: '#1b1b1b'}
				                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
				                },
				                labelLine: {
				                    show: true,
				                    length: 20,
				                    lineStyle: {
				                        // color: 各异,
				                        width: 1,
				                        type: 'solid'
				                    }
				                }
				            }
				        }
				    },
				    
				    map: {
				        mapType: 'china',   // 各省的mapType暂时都用中文
				        mapLocation: {
				            x : 'center',
				            y : 'center'
				            // width    // 自适应
				            // height   // 自适应
				        },
				        showLegendSymbol : true,       // 显示图例颜色标识（系列标识的小圆点），存在legend时生效
				        itemStyle: {
				            normal: {
				                // color: 各异,
				                borderColor: '#fff',
				                borderWidth: 1,
				                areaStyle: {
				                    color: '#ccc'//rgba(135,206,250,0.8)
				                },
				                label: {
				                    show: false,
				                    textStyle: {
				                        color: 'rgba(139,69,19,1)'
				                    }
				                }
				            },
				            emphasis: {                 // 也是选中样式
				                // color: 各异,
				                borderColor: 'rgba(0,0,0,0)',
				                borderWidth: 1,
				                areaStyle: {
				                    color: '#f3f39d'
				                },
				                label: {
				                    show: false,
				                    textStyle: {
				                        color: 'rgba(139,69,19,1)'
				                    }
				                }
				            }
				        }
				    },
				    
				    force : {
				        itemStyle: {
				            normal: {
				                // color: 各异,
				                label: {
				                    show: false
				                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
				                },
				                nodeStyle : {
				                    brushType : 'both',
				                    strokeColor : '#a17e6e'
				                },
				                linkStyle : {
				                    strokeColor : '#a17e6e'
				                }
				            },
				            emphasis: {
				                // color: 各异,
				                label: {
				                    show: false
				                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
				                },
				                nodeStyle : {},
				                linkStyle : {}
				            }
				        }
				    },

				    gauge : {
				        axisLine: {            // 坐标轴线
				            show: true,        // 默认显示，属性show控制显示与否
				            lineStyle: {       // 属性lineStyle控制线条样式
				                color: [[0.2, '#ed9678'],[0.8, '#e7dac9'],[1, '#cb8e85']], 
				                width: 8
				            }
				        },
				        axisTick: {            // 坐标轴小标记
				            splitNumber: 10,   // 每份split细分多少段
				            length :12,        // 属性length控制线长
				            lineStyle: {       // 属性lineStyle控制线条样式
				                color: 'auto'
				            }
				        },
				        axisLabel: {           // 坐标轴文本标签，详见axis.axisLabel
				            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
				                color: 'auto'
				            }
				        },
				        splitLine: {           // 分隔线
				            length : 18,         // 属性length控制线长
				            lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
				                color: 'auto'
				            }
				        },
				        pointer : {
				            length : '90%',
				            color : 'auto'
				        },
				        title : {
				            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
				                color: '#333'
				            }
				        },
				        detail : {
				            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
				                color: 'auto'
				            }
				        }
				    }
				},
				mint:{
					   // 默认色板
				    color: ['#8aedd5','#93bc9e','#cef1db','#7fe579','#a6d7c2',
				            '#bef0bb','#99e2vb','#94f8a8','#7de5b8','#4dfb70'],

				    
				    
				    // 值域
				    dataRange: {
				        color:['#93bc92','#bef0bb']
				    },

				    // K线图默认参数
				    k: {
				        // barWidth : null          // 默认自适应
				        // barMaxWidth : null       // 默认自适应 
				        itemStyle: {
				            normal: {
				                color: '#8aedd5',          // 阳线填充颜色
				                color0: '#7fe579',      // 阴线填充颜色
				                lineStyle: {
				                    width: 1,
				                    color: '#8aedd5',   // 阳线边框颜色
				                    color0: '#7fe579'   // 阴线边框颜色
				                }
				            },
				            emphasis: {
				                // color: 各异,
				                // color0: 各异
				            }
				        }
				    },
				    
				    // 饼图默认参数
				    pie: {
				        itemStyle: {
				            normal: {
				                // color: 各异,
				                borderColor: '#fff',
				                borderWidth: 1,
				                label: {
				                    show: true,
				                    position: 'outer',
				                  textStyle: {color: '#1b1b1b'},
				                  lineStyle: {color: '#1b1b1b'}
				                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
				                },
				                labelLine: {
				                    show: true,
				                    length: 20,
				                    lineStyle: {
				                        // color: 各异,
				                        width: 1,
				                        type: 'solid'
				                    }
				                }
				            }
				        }
				    },
				    
				    map: {
				        mapType: 'china',   // 各省的mapType暂时都用中文
				        mapLocation: {
				            x : 'center',
				            y : 'center'
				            // width    // 自适应
				            // height   // 自适应
				        },
				        showLegendSymbol : true,       // 显示图例颜色标识（系列标识的小圆点），存在legend时生效
				        itemStyle: {
				            normal: {
				                // color: 各异,
				                borderColor: '#fff',
				                borderWidth: 1,
				                areaStyle: {
				                    color: '#ccc'//rgba(135,206,250,0.8)
				                },
				                label: {
				                    show: false,
				                    textStyle: {
				                        color: 'rgba(139,69,19,1)'
				                    }
				                }
				            },
				            emphasis: {                 // 也是选中样式
				                // color: 各异,
				                borderColor: 'rgba(0,0,0,0)',
				                borderWidth: 1,
				                areaStyle: {
				                    color: '#f3f39d'
				                },
				                label: {
				                    show: false,
				                    textStyle: {
				                        color: 'rgba(139,69,19,1)'
				                    }
				                }
				            }
				        }
				    },
				    
				    force : {
				        itemStyle: {
				            normal: {
				                // color: 各异,
				                label: {
				                    show: false
				                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
				                },
				                nodeStyle : {
				                    brushType : 'both',
				                    strokeColor : '#49b485'
				                },
				                linkStyle : {
				                    strokeColor : '#49b485'
				                }
				            },
				            emphasis: {
				                // color: 各异,
				                label: {
				                    show: false
				                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
				                },
				                nodeStyle : {},
				                linkStyle : {}
				            }
				        }
				    },

				    gauge : {
				        axisLine: {            // 坐标轴线
				            show: true,        // 默认显示，属性show控制显示与否
				            lineStyle: {       // 属性lineStyle控制线条样式
				                color: [[0.2, '#93bc9e'],[0.8, '#8aedd5'],[1, '#a6d7c2']], 
				                width: 8
				            }
				        },
				        axisTick: {            // 坐标轴小标记
				            splitNumber: 10,   // 每份split细分多少段
				            length :12,        // 属性length控制线长
				            lineStyle: {       // 属性lineStyle控制线条样式
				                color: 'auto'
				            }
				        },
				        axisLabel: {           // 坐标轴文本标签，详见axis.axisLabel
				            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
				                color: 'auto'
				            }
				        },
				        splitLine: {           // 分隔线
				            length : 18,         // 属性length控制线长
				            lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
				                color: 'auto'
				            }
				        },
				        pointer : {
				            length : '90%',
				            color : 'auto'
				        },
				        title : {
				            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
				                color: '#333'
				            }
				        },
				        detail : {
				            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
				                color: 'auto'
				            }
				        }
				    }	
				},
				red:{
				    // 默认色板
				    color: [
				        '#d8361b','#f16b4c','#f7b4a9','#d26666',
				        '#99311c','#c42703','#d07e75'
				    ],

				    // 图表标题
				    title: {
				        textStyle: {
				            fontWeight: 'normal',
				            color: '#d8361b'
				        }
				    },
				    
				    // 值域
				    dataRange: {
				        color:['#bd0707','#ffd2d2']
				    },

				    // 工具箱
				    toolbox: {
				        color : ['#d8361b','#d8361b','#d8361b','#d8361b']
				    },

				    // 提示框
				    tooltip: {
				        backgroundColor: 'rgba(0,0,0,0.5)',
				        axisPointer : {            // 坐标轴指示器，坐标轴触发有效
				            type : 'line',         // 默认为直线，可选为：'line' | 'shadow'
				            lineStyle : {          // 直线指示器样式设置
				                color: '#d8361b',
				                type: 'dashed'
				            },
				            crossStyle: {
				                color: '#d8361b'
				            },
				            shadowStyle : {                     // 阴影指示器样式设置
				                color: 'rgba(200,200,200,0.3)'
				            }
				        }
				    },

				    // 区域缩放控制器
				    dataZoom: {
				        dataBackgroundColor: '#eee',            // 数据背景颜色
				        fillerColor: 'rgba(216,54,27,0.2)',   // 填充颜色
				        handleColor: '#d8361b'     // 手柄颜色
				    },
				    
				    // 网格
				    grid: {
				        borderWidth: 0
				    },

				    // 类目轴
				    categoryAxis: {
				        axisLine: {            // 坐标轴线
				            lineStyle: {       // 属性lineStyle控制线条样式
				                color: '#d8361b'
				            }
				        },
				        splitLine: {           // 分隔线
				            lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
				                color: ['#eee']
				            }
				        }
				    },

				    // 数值型坐标轴默认参数
				    valueAxis: {
				        axisLine: {            // 坐标轴线
				            lineStyle: {       // 属性lineStyle控制线条样式
				                color: '#d8361b'
				            }
				        },
				        splitArea : {
				            show : true,
				            areaStyle : {
				                color: ['rgba(250,250,250,0.1)','rgba(200,200,200,0.1)']
				            }
				        },
				        splitLine: {           // 分隔线
				            lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
				                color: ['#eee']
				            }
				        }
				    },

				    timeline : {
				        lineStyle : {
				            color : '#d8361b'
				        },
				        controlStyle : {
				            normal : { color : '#d8361b'},
				            emphasis : { color : '#d8361b'}
				        }
				    },

				    // K线图默认参数
				    k: {
				        itemStyle: {
				            normal: {
				                color: '#f16b4c',          // 阳线填充颜色
				                color0: '#f7b4a9',      // 阴线填充颜色
				                lineStyle: {
				                    width: 1,
				                    color: '#d8361b',   // 阳线边框颜色
				                    color0: '#d26666'   // 阴线边框颜色
				                }
				            }
				        }
				    },
				    
				    map: {
				        itemStyle: {
				            normal: {
				                areaStyle: {
				                    color: '#ddd'
				                },
				                label: {
				                    textStyle: {
				                        color: '#c12e34'
				                    }
				                }
				            },
				            emphasis: {                 // 也是选中样式
				                areaStyle: {
				                    color: '#99d2dd'
				                },
				                label: {
				                    textStyle: {
				                        color: '#c12e34'
				                    }
				                }
				            }
				        }
				    },
				    
				    force : {
				        itemStyle: {
				            normal: {
				                linkStyle : {
				                    color : '#d8361b'
				                }
				            }
				        }
				    },
				    
				    chord : {
				        padding : 4,
				        itemStyle : {
				            normal : {
				                borderWidth: 1,
				                borderColor: 'rgba(128, 128, 128, 0.5)',
				                chordStyle : {
				                    lineStyle : {
				                        color : 'rgba(128, 128, 128, 0.5)'
				                    }
				                }
				            },
				            emphasis : {
				                borderWidth: 1,
				                borderColor: 'rgba(128, 128, 128, 0.5)',
				                chordStyle : {
				                    lineStyle : {
				                        color : 'rgba(128, 128, 128, 0.5)'
				                    }
				                }
				            }
				        }
				    },
				    
				    gauge : {
				        axisLine: {            // 坐标轴线
				            show: true,        // 默认显示，属性show控制显示与否
				            lineStyle: {       // 属性lineStyle控制线条样式
				                color: [[0.2, '#f16b4c'],[0.8, '#d8361b'],[1, '#99311c']], 
				                width: 8
				            }
				        },
				        axisTick: {            // 坐标轴小标记
				            splitNumber: 10,   // 每份split细分多少段
				            length :12,        // 属性length控制线长
				            lineStyle: {       // 属性lineStyle控制线条样式
				                color: 'auto'
				            }
				        },
				        axisLabel: {           // 坐标轴文本标签，详见axis.axisLabel
				            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
				                color: 'auto'
				            }
				        },
				        splitLine: {           // 分隔线
				            length : 18,         // 属性length控制线长
				            lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
				                color: 'auto'
				            }
				        },
				        pointer : {
				            length : '90%',
				            color : 'auto'
				        },
				        title : {
				            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
				                color: '#333'
				            }
				        },
				        detail : {
				            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
				                color: 'auto'
				            }
				        }
				    },
				    
				    textStyle: {
				        fontFamily: '微软雅黑, Arial, Verdana, sans-serif'
				    }
				},
				roma:{

				    color: ['#E01F54','#b8d2c7','#f5e8c8','#001852','#c6b38e',
				            '#a4d8c2','#f3d999','#d3758f','#dcc392','#2e4783',
				            '#82b6e9','#ff6347','#a092f1','#0a915d','#eaf889',
				            '#6699FF','#ff6666','#3cb371','#d5b158','#38b6b6'],
				    dataRange: {
				        color:['#e01f54','#e7dbc3'],
				        textStyle: {
				            color: '#333'
				        }
				    },
				    k: {
				        itemStyle: {
				            normal: {
				                color: '#e01f54',          
				                color0: '#001852',      
				                lineStyle: {
				                    width: 1,
				                    color: '#f5e8c8',
				                    color0: '#b8d2c7'   
				                }
				            }
				        }
				    },
				    pie: {
				        itemStyle: {
				            normal: {
				                
				                borderColor: '#fff',
				                borderWidth: 1,
				                label: {
				                    show: true,
				                    position: 'outer',
				                  textStyle: {color: '#1b1b1b'},
				                  lineStyle: {color: '#1b1b1b'}
				                    
				                },
				                labelLine: {
				                    show: true,
				                    length: 20,
				                    lineStyle: {
				                        
				                        width: 1,
				                        type: 'solid'
				                    }
				                }
				            },
				            emphasis: {
				                
				                borderColor: 'rgba(0,0,0,0)',
				                borderWidth: 1,
				                label: {
				                    show: false
				                },
				                labelLine: {
				                    show: false,
				                    length: 20,
				                    lineStyle: {
				                        width: 1,
				                        type: 'solid'
				                    }
				                }
				            }
				        }
				    },
				    
				    map: {
				        itemStyle: {
				            normal: {
				                borderColor: '#fff',
				                borderWidth: 1,
				                areaStyle: {
				                    color: '#ccc'
				                },
				                label: {
				                    show: false,
				                    textStyle: {
				                        color: 'rgba(139,69,19,1)'
				                    }
				                }
				            },
				            emphasis: {                 
				                
				                borderColor: 'rgba(0,0,0,0)',
				                borderWidth: 1,
				                areaStyle: {
				                    color: '#f3d999'
				                },
				                label: {
				                    show: false,
				                    textStyle: {
				                        color: 'rgba(139,69,19,1)'
				                    }
				                }
				            }
				        }
				    },
				    
				    force : {
				        itemStyle: {
				            normal: {
				                label: {
				                    show: false
				                },
				                nodeStyle : {
				                    brushType : 'both',
				                    strokeColor : '#5182ab'
				                },
				                linkStyle : {
				                    strokeColor : '#5182ab'
				                }
				            },
				            emphasis: {
				                label: {
				                    show: false
				                },
				                nodeStyle : {},
				                linkStyle : {}
				            }
				        }
				    },

				    gauge : {
				        axisLine: {            // 坐标轴线
				            show: true,        // 默认显示，属性show控制显示与否
				            lineStyle: {       // 属性lineStyle控制线条样式
				                color: [[0.2, '#E01F54'],[0.8, '#b8d2c7'],[1, '#001852']], 
				                width: 8
				            }
				        },
				        axisTick: {            // 坐标轴小标记
				            splitNumber: 10,   // 每份split细分多少段
				            length :12,        // 属性length控制线长
				            lineStyle: {       // 属性lineStyle控制线条样式
				                color: 'auto'
				            }
				        },
				        axisLabel: {           // 坐标轴文本标签，详见axis.axisLabel
				            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
				                color: 'auto'
				            }
				        },
				        splitLine: {           // 分隔线
				            length : 18,         // 属性length控制线长
				            lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
				                color: 'auto'
				            }
				        },
				        pointer : {
				            length : '90%',
				            color : 'auto'
				        },
				        title : {
				            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
				                color: '#333'
				            }
				        },
				        detail : {
				            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
				                color: 'auto'
				            }
				        }
				    }
				},
				sakura:{

				    // 全图默认背景
				    // backgroundColor: 'rgba(0,0,0,0)',
				    
				    // 默认色板
				    color: ['#e52c3c','#f7b1ab','#fa506c','#f59288','#f8c4d8',
				            '#e54f5c','#f06d5c','#e54f80','#f29c9f','#eeb5b7'],

				    // 值域
				    dataRange: {
				        color:['#e52c3c','#f7b1ab']//颜色 
				    },

				    
				    // K线图默认参数
				    k: {
				        // barWidth : null          // 默认自适应
				        // barMaxWidth : null       // 默认自适应 
				        itemStyle: {
				            normal: {
				                color: '#e52c3c',          // 阳线填充颜色
				                color0: '#f59288',      // 阴线填充颜色
				                lineStyle: {
				                    width: 1,
				                    color: '#e52c3c',   // 阳线边框颜色
				                    color0: '#f59288'   // 阴线边框颜色
				                }
				            },
				            emphasis: {
				                // color: 各异,
				                // color0: 各异
				            }
				        }
				    },
				    
				    // 饼图默认参数
				    pie: {
				        itemStyle: {
				            normal: {
				                // color: 各异,
				                borderColor: '#fff',
				                borderWidth: 1,
				                label: {
				                    show: true,
				                    position: 'outer',
				                  textStyle: {color: 'black'}
				                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
				                },
				                labelLine: {
				                    show: true,
				                    length: 20,
				                    lineStyle: {
				                        // color: 各异,
				                        width: 1,
				                        type: 'solid'
				                    }
				                }
				            }
				        }
				    },
				    
				    map: {
				        mapType: 'china',   // 各省的mapType暂时都用中文
				        mapLocation: {
				            x : 'center',
				            y : 'center'
				            // width    // 自适应
				            // height   // 自适应
				        },
				        showLegendSymbol : true,       // 显示图例颜色标识（系列标识的小圆点），存在legend时生效
				        itemStyle: {
				            normal: {
				                // color: 各异,
				                borderColor: '#fff',
				                borderWidth: 1,
				                areaStyle: {
				                    color: '#ccc'//rgba(135,206,250,0.8)
				                },
				                label: {
				                    show: false,
				                    textStyle: {
				                        color: 'rgba(139,69,19,1)'
				                    }
				                }
				            },
				            emphasis: {                 // 也是选中样式
				                // color: 各异,
				                borderColor: 'rgba(0,0,0,0)',
				                borderWidth: 1,
				                areaStyle: {
				                    color: '#f3f39d'
				                },
				                label: {
				                    show: false,
				                    textStyle: {
				                        color: 'rgba(139,69,19,1)'
				                    }
				                }
				            }
				        }
				    },
				    
				    force : {
				        // 分类里如果有样式会覆盖节点默认样式
				        itemStyle: {
				            normal: {
				                // color: 各异,
				                label: {
				                    show: false
				                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
				                },
				                nodeStyle : {
				                    brushType : 'both',
				                    strokeColor : '#e54f5c'
				                },
				                linkStyle : {
				                    strokeColor : '#e54f5c'
				                }
				            },
				            emphasis: {
				                // color: 各异,
				                label: {
				                    show: false
				                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
				                },
				                nodeStyle : {},
				                linkStyle : {}
				            }
				        }
				    },
				    
				    gauge : {
				        axisLine: {            // 坐标轴线
				            show: true,        // 默认显示，属性show控制显示与否
				            lineStyle: {       // 属性lineStyle控制线条样式
				                color: [[0.2, '#e52c3c'],[0.8, '#f7b1ab'],[1, '#fa506c']], 
				                width: 8
				            }
				        },
				        axisTick: {            // 坐标轴小标记
				            splitNumber: 10,   // 每份split细分多少段
				            length :12,        // 属性length控制线长
				            lineStyle: {       // 属性lineStyle控制线条样式
				                color: 'auto'
				            }
				        },
				        axisLabel: {           // 坐标轴文本标签，详见axis.axisLabel
				            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
				                color: 'auto'
				            }
				        },
				        splitLine: {           // 分隔线
				            length : 18,         // 属性length控制线长
				            lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
				                color: 'auto'
				            }
				        },
				        pointer : {
				            length : '90%',
				            color : 'auto'
				        },
				        title : {
				            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
				                color: '#333'
				            }
				        },
				        detail : {
				            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
				                color: 'auto'
				            }
				        }
				    }
				},
				shine:{
				    // 默认色板
				    color: [
				        '#c12e34','#e6b600','#0098d9','#2b821d',
				        '#005eaa','#339ca8','#cda819','#32a487'
				    ],

				    // 图表标题
				    title: {
				        textStyle: {
				            fontWeight: 'normal'
				        }
				    },
				    
				    // 值域
				    dataRange: {
				        itemWidth: 15,             // 值域图形宽度，线性渐变水平布局宽度为该值 * 10
				        color:['#1790cf','#a2d4e6']
				    },

				    // 工具箱
				    toolbox: {
				        color : ['#06467c','#00613c','#872d2f','#c47630']
				    },

				    // 提示框
				    tooltip: {
				        backgroundColor: 'rgba(0,0,0,0.6)'
				    },

				    // 区域缩放控制器
				    dataZoom: {
				        dataBackgroundColor: '#dedede',            // 数据背景颜色
				        fillerColor: 'rgba(154,217,247,0.2)',   // 填充颜色
				        handleColor: '#005eaa'     // 手柄颜色
				    },
				    
				    // 网格
				    grid: {
				        borderWidth: 0
				    },
				    
				    // 类目轴
				    categoryAxis: {
				        axisLine: {            // 坐标轴线
				            show: false
				        },
				        axisTick: {            // 坐标轴小标记
				            show: false
				        }
				    },

				    // 数值型坐标轴默认参数
				    valueAxis: {
				        axisLine: {            // 坐标轴线
				            show: false
				        },
				        axisTick: {            // 坐标轴小标记
				            show: false
				        },
				        splitArea: {           // 分隔区域
				            show: true,       // 默认不显示，属性show控制显示与否
				            areaStyle: {       // 属性areaStyle（详见areaStyle）控制区域样式
				                color: ['rgba(250,250,250,0.2)','rgba(200,200,200,0.2)']
				            }
				        }
				    },
				    
				    timeline : {
				        lineStyle : {
				            color : '#005eaa'
				        },
				        controlStyle : {
				            normal : { color : '#005eaa'},
				            emphasis : { color : '#005eaa'}
				        }
				    },

				    // K线图默认参数
				    k: {
				        itemStyle: {
				            normal: {
				                color: '#c12e34',          // 阳线填充颜色
				                color0: '#2b821d',      // 阴线填充颜色
				                lineStyle: {
				                    width: 1,
				                    color: '#c12e34',   // 阳线边框颜色
				                    color0: '#2b821d'   // 阴线边框颜色
				                }
				            }
				        }
				    },
				    
				    map: {
				        itemStyle: {
				            normal: {
				                areaStyle: {
				                    color: '#ddd'
				                },
				                label: {
				                    textStyle: {
				                        color: '#c12e34'
				                    }
				                }
				            },
				            emphasis: {                 // 也是选中样式
				                areaStyle: {
				                    color: '#e6b600'
				                },
				                label: {
				                    textStyle: {
				                        color: '#c12e34'
				                    }
				                }
				            }
				        }
				    },
				    
				    force : {
				        itemStyle: {
				            normal: {
				                linkStyle : {
				                    color : '#005eaa'
				                }
				            }
				        }
				    },
				    
				    chord : {
				        itemStyle : {
				            normal : {
				                borderWidth: 1,
				                borderColor: 'rgba(128, 128, 128, 0.5)',
				                chordStyle : {
				                    lineStyle : {
				                        color : 'rgba(128, 128, 128, 0.5)'
				                    }
				                }
				            },
				            emphasis : {
				                borderWidth: 1,
				                borderColor: 'rgba(128, 128, 128, 0.5)',
				                chordStyle : {
				                    lineStyle : {
				                        color : 'rgba(128, 128, 128, 0.5)'
				                    }
				                }
				            }
				        }
				    },
				    
				    gauge : {
				        axisLine: {            // 坐标轴线
				            show: true,        // 默认显示，属性show控制显示与否
				            lineStyle: {       // 属性lineStyle控制线条样式
				                color: [[0.2, '#2b821d'],[0.8, '#005eaa'],[1, '#c12e34']], 
				                width: 5
				            }
				        },
				        axisTick: {            // 坐标轴小标记
				            splitNumber: 10,   // 每份split细分多少段
				            length :8,        // 属性length控制线长
				            lineStyle: {       // 属性lineStyle控制线条样式
				                color: 'auto'
				            }
				        },
				        axisLabel: {           // 坐标轴文本标签，详见axis.axisLabel
				            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
				                color: 'auto'
				            }
				        },
				        splitLine: {           // 分隔线
				            length : 12,         // 属性length控制线长
				            lineStyle: {       // 属性lineStyle（详见lineStyle）控制线条样式
				                color: 'auto'
				            }
				        },
				        pointer : {
				            length : '90%',
				            width : 3,
				            color : 'auto'
				        },
				        title : {
				            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
				                color: '#333'
				            }
				        },
				        detail : {
				            textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
				                color: 'auto'
				            }
				        }
				    },
				    
				    textStyle: {
				        fontFamily: '微软雅黑, Arial, Verdana, sans-serif'
				    }
				}
			}
		
		return echarts_theme[theme];
	}
	function bindEvents(target){
		var opts = $.data(target, 'echart').options;
		var chart = $(target).echart('getInstance');
		chart.on(echarts.config.EVENT.MAP_SELECTED,opts.onMapSelect);
		chart.on(echarts.config.EVENT.CLICK,opts.onClick);
	}
	
	/**
	 * 封装相关方法
	 */
	$.fn.echart.methods = {
			options: function(jq){
				return $.data(jq[0], 'echart').options;
			},
			/**
			 * 获取当前echart的实例
			 */
			getInstance : function(jq){
				var instanceId = $.data(jq[0], 'echart').options.instanceId;
				var chartInstance = echarts.getInstanceById(instanceId);
				return chartInstance;
			},
			/**
			 * 刷新图表，图例选择、数据区域缩放，拖拽状态均保持
			 */
			refresh: function(jq){
				var chartId = $(jq).attr('id');
				var dom  = document.getElementById(chartId);
				var instanceId = $.data(jq[0], 'echart').options.instanceId;
				var chartInstance = echarts.getInstanceById(instanceId);
				chartInstance.refresh();
			},
			setOption:function(jq,param){
				var chartInstance = $.fn.echart.methods.getInstance(jq);
				chartInstance.setOption(param,true);
			},
			/**
			 * 返回内部持有的当前显示option克隆（拷贝）。
			 */
			getOption:function(jq){
				var chartInstance = $.fn.echart.methods.getInstance(jq);
				return chartInstance.getOption();
			},
			/**
			 * 设置主题，内置主题（暂无）直接传入名称，自定义扩展主题可传入主题对象
			 */
			setTheme:function(jq,param){
				var chartInstance = $.fn.echart.methods.getInstance(jq);
				return chartInstance.setTheme(param);
			},
			/**
			 * 多图联动，传入联动目标为EChart实例，支持数组
			 */
			connect:function(jq,param){
				var chartInstance = $.fn.echart.methods.getInstance(jq);
				return chartInstance.connect(param);
			},
			/**
			 * 解除已连结的多图联动
			 */
			disConnect:function(jq,param){
				var chartInstance = $.fn.echart.methods.getInstance(jq);
				return chartInstance.disConnect(param);
			},
			/**
			 * 显示进度
			 */
			showLoading:function(jq){
				var chartInstance = $.fn.echart.methods.getInstance(jq);
				return chartInstance.showLoading();
			},
			/**
			 * 隐藏进度
			 */
			hideLoading:function(jq){
				var chartInstance = $.fn.echart.methods.getInstance(jq);
				return chartInstance.hideLoading();
			},
			/**
			 * 还原图形
			 */
			restore:function(jq){
				var chartInstance = $.fn.echart.methods.getInstance(jq);
				return chartInstance.restore();
			},
			/**
			 * 清空绘画内容，清空后实例可用
			 */
			clear:function(jq){
				var chartInstance = $.fn.echart.methods.getInstance(jq);
				return chartInstance.clear();
			},
			/**
			 * 释放图表实例，释放后实例不再可用
			 */
			dispose:function(jq){
				var chartInstance = $.fn.echart.methods.getInstance(jq);
				return chartInstance.dispose();
			},
			/**
			 * 获取当前图表的Base64图片dataURL，imgType 图片类型，支持png|jpeg，默认为png
			 */
			getDataURL:function(jq){
				var chartInstance = $.fn.echart.methods.getInstance(jq);
				return chartInstance.getDataURL();
			},
			/**
			 * 获取一个当前图表的img，imgType 图片类型，支持png|jpeg，默认为png
			 */
			getImage:function(jq){
				var chartInstance = $.fn.echart.methods.getInstance(jq);
				return chartInstance.getImage();
			},
			resize:function(jq){
				var chartInstance = $.fn.echart.methods.getInstance(jq);
				return chartInstance.resize();
			}
	};
	
	/**
	 * 默认属性
	 */
	$.fn.echart.defaults = {
		 url:null,			//访问后台url
		 param:null	,		//请求参数
		 data:null,			//固定值方式    json对象
		 onMapSelect:function(param){},
		 onResize:function(){},
		 onClick:function(param){}
	}
	
	
	
	/**
	 * 解析dataOptions属性
	 */
	$.fn.echart.parseOptions = function(target){
		var t = $(target);
		return $.extend({}, $.fn.panel.parseOptions(target), $.parser.parseOptions(target, ['url']));
	};
	 
})(jQuery);



/**
 * report - jQuery EasyUI
 * 
 * Copyright (c) 2009-2013 www.jeasyui.com. All rights reserved.
 *
 * Licensed under the GPL or commercial licenses
 * To use it on other terms please contact us: info@jeasyui.com
 * http://www.gnu.org/licenses/gpl.txt
 * http://www.jeasyui.com/license_commercial.php
 * 
 * Dependencies:
 * 	 panel
 * 
 */
(function($){
	
	function create(target){
		var state = $.data(target, 'report');
		var options = state.options;
		var href = '';
		if(options.href){
			href = options.href;
		}
		var content= '<iframe  name= "__report_content'+options.id+'" id="content"   width="100%" height="100%">'+
		             '</iframe>';
		var panel = $(target).panel($.extend({}, options, {
			content:content,
			href:null
		}));
		var form = $("<form>");   //定义一个form表单
		form.attr('style', 'display:none');   //在form表单中添加查询参数
		form.attr('target', '__report_content'+options.id);
		form.attr('method', 'post');
		form.attr('action',  href||'');
		for(var i in options.queryParams){
			var input = $('<input>');
			input.prop('type', 'hidden');
			input.prop('name', i);
			input.prop('value', options.queryParams[i]);
			form.append(input);
				}
		$('body').append(form);
		form.submit();
		state.iframe=content;
		state.form=form;
	}
	function refresh(target,params){
		var state = $.data(target, 'report');
		var options = state.options;
		if(params){
			var href='';
			if((typeof params == 'string')){
				 href=options.href=params;
				 state.form.attr('action',  href||'');
				 state.form.submit();
			   } 
			if(typeof params =='object'){
				state.form.empty();
				options.queryParams=params;
				for(var i in params){
					var input = $('<input>');
					input.attr('type', 'hidden');
					input.attr('name', i);
					input.attr('value', params[i]);
					state.form.append(input);
						}
				    state.form.attr('method', 'post');
				    state.form.attr('action',  options.href||'');
				    state.form.submit();
			}
			}else{
			     state.form.attr('method', 'post');
			     state.form.attr('action',  options.href||'');
				 state.form.submit();
			} 
		
	}
	$.fn.report = function(options, param){
		if (typeof options == 'string'){
			var method = $.fn.report.methods[options];
			if (method){
				return method(this, param);
			} else {
				return this.panel(options, param);
			}
		}
		options = options || {};
		
		return this.each(function(){
			var state = $.data(this, 'report');
			if (state){
				$.extend(state.options, options);
			} else {
				state = $.data(this, 'report', {
					options: $.extend({}, $.fn.report.defaults, $.fn.report.parseOptions(this), options)
				});
			}
			create(this);
		});
	};
	$.fn.report.methods = {
		options: function(jq){
			return $.data(jq[0], 'report').options;
		},
		refresh: function(jq,params){
			  refresh(jq[0],params);
		}
	}
	
	$.fn.report.parseOptions = function(target){
		var t = $(target);
		return $.extend({}, $.parser.parseOptions(target, [
			'width','height',{fit:'boolean',border:'boolean',noheader:'boolean'}
		]));
	};
	
	 $.fn.report.defaults = {
		fit:false,
		width: 'auto',
		height: 'auto',
		noheader: true,
		border: false,
		queryParams:{},
		id:''
		
	};
})(jQuery);

(function($){
	function createCheck(target){
		var checkBox = $('<input type="checkbox" />')
		var state = $.data(target, 'checkbox2');
		    checkBox.insertAfter($(target))
		    $(target).hide();
		var opts = state.options;
		//$(target).attr('type','checkbox');
		checkBox.prop('checked',opts.defaultStatus);
		
		if(opts.defaultStatus){
			$(target).val(opts.onval);
			$(target).prop('value',opts.onval);
		}else{
			$(target).val(opts.offval);
			$(target).prop('value',opts.offval);
		}
 		state.checkBox = checkBox;
		bindEvents(target,opts,checkBox);
	}
	function bindEvents(target,opts,checkBox){
		var checkedFlag = checkBox.prop('checked');
		checkBox.unbind('click').bind('click',function(){
			var val = $(target).val();
			if(opts.editable){
				if(val == opts.onval){
					checkBox.removeProp('checked');
					$(target).val(opts.offval);
					$(target).prop('value',opts.offval);
				    opts.onUnCheck.call(target);
				}
				else if(val == opts.offval){
					checkBox.prop('checked',true);
					$(target).val(opts.onval);
					$(target).prop('value',opts.onval);
					opts.onCheck.call(target);
				}else{
					$(target).val(checkedFlag?opts.offval:opts.onval);
				}
			}else{
				checkBox.prop('checked',checkedFlag);
				return;
			}
			
		});
	}
	
	function setValue(target,value){
		var state = $.data(target, 'checkbox2');
		var checkBox = state.checkBox
		var opts = state.options;
		if(value == opts.onval){
			$(target).val(opts.onval);
			$(target).prop('value',opts.onval);
			checkBox.prop('checked',true);
		}else if(value == opts.offval){
			$(target).val(opts.offval);
			$(target).prop('value',opts.offval);
			checkBox.removeProp('checked');
		}else{
			$(target).val(value||'');
		}
	}
	$.fn.checkbox2 = function(options, param){
		if (typeof options == 'string'){
			return $.fn.checkbox2.methods[options](this, param);
		}
		
		options = options || {};
		
		return this.each(function(){
			var state = $.data(this, 'checkbox2');
			var opts;
			if (state){
				opts = $.extend(state.options, options);
				state.opts = opts;
			} else {
				opts = $.extend({}, $.fn.checkbox2.defaults, $.fn.checkbox2.parseOptions(this), options);
				state = $.data(this, 'checkbox2', {
					options:opts
				});
			}
			
			createCheck(this);
		});
	};	

$.fn.checkbox2.methods = {
		options: function(jq){
			return $.data(jq[0], 'checkbox2').options;
		},
		setValue:function(jq,value){
			return jq.each(function(){
				setValue(this,value);
			});
		}
	};
$.fn.checkbox2.parseOptions = function(target){
		var t = $(target);
		return $.extend({}, $.parser.parseOptions(target, [
			'onval','offval',{defaultStatus:'boolean',editable:'boolean'}
		]));
	};
$.fn.checkbox2.defaults = {
		onval: '1',
		offval: '0',
		defaultStatus:false,
		editable:true,
		onCheck: function(){
		},
		onUnCheck:function(){
		}
	};

})(jQuery);


//处理键盘事件 禁止后退键（Backspace）
document.onkeydown = function(e){   
    var ev = e || window.event;//获取event对象   
    var obj = ev.target || ev.srcElement;//获取事件源   
    var t = obj.type || obj.getAttribute('type') || obj.getAttribute('data-roles');//获取事件源类型  
    //获取作为判断条件的事件类型
    var vReadOnly = obj.getAttribute('readonly');
    //处理null值情况
    vReadOnly = (vReadOnly == "") ? false : vReadOnly;
    //并且readonly属性为true或enabled属性为false的，则退格键失效
    
    //当敲Backspace键时，事件源类型为密码或单行、多行文本的，可以添加如下代码
    //&& (t=="password" || t=="text" || t=="textarea") 
    var flag=(vReadOnly=="readonly")?true:false;
    
    //t==null 当空格键点击在空白处
    if(flag || t == "mui-layout"){   
        return false;   
    }   
}


//$(function(){
//			var div = $('<div></div>').css({
//				zIndex:100000,
//				position:'absolute',
//				left:0,
//				top:0,
//				filter: 'alpha(opacity=40)',
//				opacity: '0.40',
//				background: '#CCC',
//				display:'none'
//			}).appendTo(document.body);
//			var iframe = $('<iframe frameborder="0" allowtransparency="true"></iframe>').css({
//				width:'100%',
//				height:'100%',
//				'background-color':'transparent',
//				display:'none'
//			}).appendTo(div).attr('src',contextPath+'/dialog.jsp');
//			$.topDialog.iframe = div;
//})

//document.onkeydown=function(event){
//	var target,code,tag;
//	if(!event){
//	event=window.event;
//	target=event.srcElement;
//	code=event.keyCode;
//	if(code==13){/*
//	tag=target.tagName;
//	if(tag=="TEXTAREA"){
//	return true;}
//	else{
//	return false;}*/}
//
//	}else{
//	target=event.target;
//	code=event.keyCode;
//	if(code==13){
//	tag=target.tagName;
//	if(tag=="INPUT"){
//	return false;}
//	else {
//	return true;}}
//	}
//
//	}
